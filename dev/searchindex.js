Search.setIndex({"docnames": ["CONTRIBUTING", "api/algorithm_functions/centrality", "api/algorithm_functions/coloring", "api/algorithm_functions/connectivity_and_cycles", "api/algorithm_functions/dag_algorithms", "api/algorithm_functions/graph_operations", "api/algorithm_functions/index", "api/algorithm_functions/isomorphism", "api/algorithm_functions/link_analysis", "api/algorithm_functions/matching", "api/algorithm_functions/other", "api/algorithm_functions/shortest_paths", "api/algorithm_functions/traversal", "api/algorithm_functions/tree", "api/converters", "api/custom_return_types", "api/exceptions", "api/generators", "api/graph_classes", "api/index", "api/layout_functions", "api/pydigraph_api_functions", "api/pygraph_api_functions", "api/random_graph_generator_functions", "api/serialization", "apiref/rustworkx.AllPairsPathLengthMapping", "apiref/rustworkx.AllPairsPathLengthMapping.items", "apiref/rustworkx.AllPairsPathLengthMapping.keys", "apiref/rustworkx.AllPairsPathLengthMapping.values", "apiref/rustworkx.AllPairsPathMapping", "apiref/rustworkx.AllPairsPathMapping.items", "apiref/rustworkx.AllPairsPathMapping.keys", "apiref/rustworkx.AllPairsPathMapping.values", "apiref/rustworkx.BFSPredecessors", "apiref/rustworkx.BFSSuccessors", "apiref/rustworkx.BiconnectedComponents", "apiref/rustworkx.BiconnectedComponents.items", "apiref/rustworkx.BiconnectedComponents.keys", "apiref/rustworkx.BiconnectedComponents.values", "apiref/rustworkx.CentralityMapping", "apiref/rustworkx.CentralityMapping.items", "apiref/rustworkx.CentralityMapping.keys", "apiref/rustworkx.CentralityMapping.values", "apiref/rustworkx.Chains", "apiref/rustworkx.ColoringStrategy", "apiref/rustworkx.DAGHasCycle", "apiref/rustworkx.DAGWouldCycle", "apiref/rustworkx.EdgeCentralityMapping", "apiref/rustworkx.EdgeCentralityMapping.items", "apiref/rustworkx.EdgeCentralityMapping.keys", "apiref/rustworkx.EdgeCentralityMapping.values", "apiref/rustworkx.EdgeIndexMap", "apiref/rustworkx.EdgeIndexMap.items", "apiref/rustworkx.EdgeIndexMap.keys", "apiref/rustworkx.EdgeIndexMap.values", "apiref/rustworkx.EdgeIndices", "apiref/rustworkx.EdgeList", "apiref/rustworkx.GraphNotBipartite", "apiref/rustworkx.IndexPartitionBlock", "apiref/rustworkx.InvalidMapping", "apiref/rustworkx.InvalidNode", "apiref/rustworkx.JSONSerializationError", "apiref/rustworkx.NegativeCycle", "apiref/rustworkx.NoEdgeBetweenNodes", "apiref/rustworkx.NoPathFound", "apiref/rustworkx.NoSuitableNeighbors", "apiref/rustworkx.NodeIndices", "apiref/rustworkx.NodeMap", "apiref/rustworkx.NodeMap.items", "apiref/rustworkx.NodeMap.keys", "apiref/rustworkx.NodeMap.values", "apiref/rustworkx.NullGraph", "apiref/rustworkx.PathLengthMapping", "apiref/rustworkx.PathLengthMapping.items", "apiref/rustworkx.PathLengthMapping.keys", "apiref/rustworkx.PathLengthMapping.values", "apiref/rustworkx.PathMapping", "apiref/rustworkx.PathMapping.items", "apiref/rustworkx.PathMapping.keys", "apiref/rustworkx.PathMapping.values", "apiref/rustworkx.Pos2DMapping", "apiref/rustworkx.Pos2DMapping.items", "apiref/rustworkx.Pos2DMapping.keys", "apiref/rustworkx.Pos2DMapping.values", "apiref/rustworkx.ProductNodeMap", "apiref/rustworkx.ProductNodeMap.items", "apiref/rustworkx.ProductNodeMap.keys", "apiref/rustworkx.ProductNodeMap.values", "apiref/rustworkx.PyDAG", "apiref/rustworkx.PyDAG.add_child", "apiref/rustworkx.PyDAG.add_edge", "apiref/rustworkx.PyDAG.add_edges_from", "apiref/rustworkx.PyDAG.add_edges_from_no_data", "apiref/rustworkx.PyDAG.add_node", "apiref/rustworkx.PyDAG.add_nodes_from", "apiref/rustworkx.PyDAG.add_parent", "apiref/rustworkx.PyDAG.adj", "apiref/rustworkx.PyDAG.adj_direction", "apiref/rustworkx.PyDAG.clear", "apiref/rustworkx.PyDAG.clear_edges", "apiref/rustworkx.PyDAG.compose", "apiref/rustworkx.PyDAG.contract_nodes", "apiref/rustworkx.PyDAG.copy", "apiref/rustworkx.PyDAG.edge_index_map", "apiref/rustworkx.PyDAG.edge_indices", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints", "apiref/rustworkx.PyDAG.edge_list", "apiref/rustworkx.PyDAG.edge_subgraph", "apiref/rustworkx.PyDAG.edges", "apiref/rustworkx.PyDAG.extend_from_edge_list", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list", "apiref/rustworkx.PyDAG.filter_edges", "apiref/rustworkx.PyDAG.filter_nodes", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge", "apiref/rustworkx.PyDAG.find_node_by_weight", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge", "apiref/rustworkx.PyDAG.find_predecessors_by_edge", "apiref/rustworkx.PyDAG.find_successors_by_edge", "apiref/rustworkx.PyDAG.from_adjacency_matrix", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix", "apiref/rustworkx.PyDAG.get_all_edge_data", "apiref/rustworkx.PyDAG.get_edge_data", "apiref/rustworkx.PyDAG.get_edge_data_by_index", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index", "apiref/rustworkx.PyDAG.get_node_data", "apiref/rustworkx.PyDAG.has_edge", "apiref/rustworkx.PyDAG.has_node", "apiref/rustworkx.PyDAG.has_parallel_edges", "apiref/rustworkx.PyDAG.in_degree", "apiref/rustworkx.PyDAG.in_edges", "apiref/rustworkx.PyDAG.incident_edge_index_map", "apiref/rustworkx.PyDAG.incident_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDAG.insert_node_on_out_edges", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDAG.is_symmetric", "apiref/rustworkx.PyDAG.make_symmetric", "apiref/rustworkx.PyDAG.merge_nodes", "apiref/rustworkx.PyDAG.neighbors", "apiref/rustworkx.PyDAG.neighbors_undirected", "apiref/rustworkx.PyDAG.node_indexes", "apiref/rustworkx.PyDAG.node_indices", "apiref/rustworkx.PyDAG.nodes", "apiref/rustworkx.PyDAG.num_edges", "apiref/rustworkx.PyDAG.num_nodes", "apiref/rustworkx.PyDAG.out_degree", "apiref/rustworkx.PyDAG.out_edges", "apiref/rustworkx.PyDAG.predecessor_indices", "apiref/rustworkx.PyDAG.predecessors", "apiref/rustworkx.PyDAG.read_edge_list", "apiref/rustworkx.PyDAG.remove_edge", "apiref/rustworkx.PyDAG.remove_edge_from_index", "apiref/rustworkx.PyDAG.remove_edges_from", "apiref/rustworkx.PyDAG.remove_node", "apiref/rustworkx.PyDAG.remove_node_retain_edges", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDAG.remove_nodes_from", "apiref/rustworkx.PyDAG.reverse", "apiref/rustworkx.PyDAG.subgraph", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph", "apiref/rustworkx.PyDAG.successor_indices", "apiref/rustworkx.PyDAG.successors", "apiref/rustworkx.PyDAG.to_dot", "apiref/rustworkx.PyDAG.to_undirected", "apiref/rustworkx.PyDAG.update_edge", "apiref/rustworkx.PyDAG.update_edge_by_index", "apiref/rustworkx.PyDAG.weighted_edge_list", "apiref/rustworkx.PyDAG.write_edge_list", "apiref/rustworkx.PyDiGraph", "apiref/rustworkx.PyDiGraph.add_child", "apiref/rustworkx.PyDiGraph.add_edge", "apiref/rustworkx.PyDiGraph.add_edges_from", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data", "apiref/rustworkx.PyDiGraph.add_node", "apiref/rustworkx.PyDiGraph.add_nodes_from", "apiref/rustworkx.PyDiGraph.add_parent", "apiref/rustworkx.PyDiGraph.adj", "apiref/rustworkx.PyDiGraph.adj_direction", "apiref/rustworkx.PyDiGraph.clear", "apiref/rustworkx.PyDiGraph.clear_edges", "apiref/rustworkx.PyDiGraph.compose", "apiref/rustworkx.PyDiGraph.contract_nodes", "apiref/rustworkx.PyDiGraph.copy", "apiref/rustworkx.PyDiGraph.edge_index_map", "apiref/rustworkx.PyDiGraph.edge_indices", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyDiGraph.edge_list", "apiref/rustworkx.PyDiGraph.edge_subgraph", "apiref/rustworkx.PyDiGraph.edges", "apiref/rustworkx.PyDiGraph.extend_from_edge_list", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyDiGraph.filter_edges", "apiref/rustworkx.PyDiGraph.filter_nodes", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge", "apiref/rustworkx.PyDiGraph.find_node_by_weight", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge", "apiref/rustworkx.PyDiGraph.find_successors_by_edge", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyDiGraph.get_all_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyDiGraph.get_node_data", "apiref/rustworkx.PyDiGraph.has_edge", "apiref/rustworkx.PyDiGraph.has_node", "apiref/rustworkx.PyDiGraph.has_parallel_edges", "apiref/rustworkx.PyDiGraph.in_degree", "apiref/rustworkx.PyDiGraph.in_edges", "apiref/rustworkx.PyDiGraph.incident_edge_index_map", "apiref/rustworkx.PyDiGraph.incident_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "apiref/rustworkx.PyDiGraph.is_symmetric", "apiref/rustworkx.PyDiGraph.make_symmetric", "apiref/rustworkx.PyDiGraph.merge_nodes", "apiref/rustworkx.PyDiGraph.neighbors", "apiref/rustworkx.PyDiGraph.neighbors_undirected", "apiref/rustworkx.PyDiGraph.node_indexes", "apiref/rustworkx.PyDiGraph.node_indices", "apiref/rustworkx.PyDiGraph.nodes", "apiref/rustworkx.PyDiGraph.num_edges", "apiref/rustworkx.PyDiGraph.num_nodes", "apiref/rustworkx.PyDiGraph.out_degree", "apiref/rustworkx.PyDiGraph.out_edges", "apiref/rustworkx.PyDiGraph.predecessor_indices", "apiref/rustworkx.PyDiGraph.predecessors", "apiref/rustworkx.PyDiGraph.read_edge_list", "apiref/rustworkx.PyDiGraph.remove_edge", "apiref/rustworkx.PyDiGraph.remove_edge_from_index", "apiref/rustworkx.PyDiGraph.remove_edges_from", "apiref/rustworkx.PyDiGraph.remove_node", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "apiref/rustworkx.PyDiGraph.remove_nodes_from", "apiref/rustworkx.PyDiGraph.reverse", "apiref/rustworkx.PyDiGraph.subgraph", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyDiGraph.successor_indices", "apiref/rustworkx.PyDiGraph.successors", "apiref/rustworkx.PyDiGraph.to_dot", "apiref/rustworkx.PyDiGraph.to_undirected", "apiref/rustworkx.PyDiGraph.update_edge", "apiref/rustworkx.PyDiGraph.update_edge_by_index", "apiref/rustworkx.PyDiGraph.weighted_edge_list", "apiref/rustworkx.PyDiGraph.write_edge_list", "apiref/rustworkx.PyGraph", "apiref/rustworkx.PyGraph.add_edge", "apiref/rustworkx.PyGraph.add_edges_from", "apiref/rustworkx.PyGraph.add_edges_from_no_data", "apiref/rustworkx.PyGraph.add_node", "apiref/rustworkx.PyGraph.add_nodes_from", "apiref/rustworkx.PyGraph.adj", "apiref/rustworkx.PyGraph.clear", "apiref/rustworkx.PyGraph.clear_edges", "apiref/rustworkx.PyGraph.compose", "apiref/rustworkx.PyGraph.contract_nodes", "apiref/rustworkx.PyGraph.copy", "apiref/rustworkx.PyGraph.degree", "apiref/rustworkx.PyGraph.edge_index_map", "apiref/rustworkx.PyGraph.edge_indices", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints", "apiref/rustworkx.PyGraph.edge_list", "apiref/rustworkx.PyGraph.edge_subgraph", "apiref/rustworkx.PyGraph.edges", "apiref/rustworkx.PyGraph.extend_from_edge_list", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list", "apiref/rustworkx.PyGraph.filter_edges", "apiref/rustworkx.PyGraph.filter_nodes", "apiref/rustworkx.PyGraph.find_node_by_weight", "apiref/rustworkx.PyGraph.from_adjacency_matrix", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix", "apiref/rustworkx.PyGraph.get_all_edge_data", "apiref/rustworkx.PyGraph.get_edge_data", "apiref/rustworkx.PyGraph.get_edge_data_by_index", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index", "apiref/rustworkx.PyGraph.get_node_data", "apiref/rustworkx.PyGraph.has_edge", "apiref/rustworkx.PyGraph.has_node", "apiref/rustworkx.PyGraph.has_parallel_edges", "apiref/rustworkx.PyGraph.in_edges", "apiref/rustworkx.PyGraph.incident_edge_index_map", "apiref/rustworkx.PyGraph.incident_edges", "apiref/rustworkx.PyGraph.neighbors", "apiref/rustworkx.PyGraph.node_indexes", "apiref/rustworkx.PyGraph.node_indices", "apiref/rustworkx.PyGraph.nodes", "apiref/rustworkx.PyGraph.num_edges", "apiref/rustworkx.PyGraph.num_nodes", "apiref/rustworkx.PyGraph.out_edges", "apiref/rustworkx.PyGraph.read_edge_list", "apiref/rustworkx.PyGraph.remove_edge", "apiref/rustworkx.PyGraph.remove_edge_from_index", "apiref/rustworkx.PyGraph.remove_edges_from", "apiref/rustworkx.PyGraph.remove_node", "apiref/rustworkx.PyGraph.remove_nodes_from", "apiref/rustworkx.PyGraph.subgraph", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph", "apiref/rustworkx.PyGraph.to_directed", "apiref/rustworkx.PyGraph.to_dot", "apiref/rustworkx.PyGraph.update_edge", "apiref/rustworkx.PyGraph.update_edge_by_index", "apiref/rustworkx.PyGraph.weighted_edge_list", "apiref/rustworkx.PyGraph.write_edge_list", "apiref/rustworkx.RelationalCoarsestPartition", "apiref/rustworkx.TopologicalSorter", "apiref/rustworkx.TopologicalSorter.done", "apiref/rustworkx.TopologicalSorter.get_ready", "apiref/rustworkx.TopologicalSorter.is_active", "apiref/rustworkx.WeightedEdgeList", "apiref/rustworkx.adjacency_matrix", "apiref/rustworkx.all_pairs_all_simple_paths", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.all_pairs_dijkstra_path_lengths", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.all_shortest_paths", "apiref/rustworkx.all_simple_paths", "apiref/rustworkx.ancestors", "apiref/rustworkx.articulation_points", "apiref/rustworkx.astar_shortest_path", "apiref/rustworkx.barabasi_albert_graph", "apiref/rustworkx.bellman_ford_shortest_path_lengths", "apiref/rustworkx.bellman_ford_shortest_paths", "apiref/rustworkx.betweenness_centrality", "apiref/rustworkx.bfs_predecessors", "apiref/rustworkx.bfs_search", "apiref/rustworkx.bfs_successors", "apiref/rustworkx.biconnected_components", "apiref/rustworkx.bipartite_layout", "apiref/rustworkx.bridges", "apiref/rustworkx.cartesian_product", "apiref/rustworkx.chain_decomposition", "apiref/rustworkx.circular_layout", "apiref/rustworkx.closeness_centrality", "apiref/rustworkx.collect_bicolor_runs", "apiref/rustworkx.collect_runs", "apiref/rustworkx.complement", "apiref/rustworkx.connected_components", "apiref/rustworkx.connected_subgraphs", "apiref/rustworkx.core_number", "apiref/rustworkx.cycle_basis", "apiref/rustworkx.dag_longest_path", "apiref/rustworkx.dag_longest_path_length", "apiref/rustworkx.dag_weighted_longest_path", "apiref/rustworkx.dag_weighted_longest_path_length", "apiref/rustworkx.descendants", "apiref/rustworkx.dfs_edges", "apiref/rustworkx.dfs_search", "apiref/rustworkx.digraph_adjacency_matrix", "apiref/rustworkx.digraph_all_pairs_all_simple_paths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.digraph_all_shortest_paths", "apiref/rustworkx.digraph_all_simple_paths", "apiref/rustworkx.digraph_astar_shortest_path", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.digraph_betweenness_centrality", "apiref/rustworkx.digraph_bfs_search", "apiref/rustworkx.digraph_bipartite_layout", "apiref/rustworkx.digraph_cartesian_product", "apiref/rustworkx.digraph_circular_layout", "apiref/rustworkx.digraph_closeness_centrality", "apiref/rustworkx.digraph_complement", "apiref/rustworkx.digraph_core_number", "apiref/rustworkx.digraph_dfs_edges", "apiref/rustworkx.digraph_dfs_search", "apiref/rustworkx.digraph_dijkstra_search", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths", "apiref/rustworkx.digraph_dijkstra_shortest_paths", "apiref/rustworkx.digraph_distance_matrix", "apiref/rustworkx.digraph_edge_betweenness_centrality", "apiref/rustworkx.digraph_eigenvector_centrality", "apiref/rustworkx.digraph_find_cycle", "apiref/rustworkx.digraph_floyd_warshall", "apiref/rustworkx.digraph_floyd_warshall_numpy", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance", "apiref/rustworkx.digraph_is_isomorphic", "apiref/rustworkx.digraph_is_subgraph_isomorphic", "apiref/rustworkx.digraph_k_shortest_path_lengths", "apiref/rustworkx.digraph_katz_centrality", "apiref/rustworkx.digraph_longest_simple_path", "apiref/rustworkx.digraph_maximum_bisimulation", "apiref/rustworkx.digraph_node_link_json", "apiref/rustworkx.digraph_num_shortest_paths_unweighted", "apiref/rustworkx.digraph_random_layout", "apiref/rustworkx.digraph_shell_layout", "apiref/rustworkx.digraph_spiral_layout", "apiref/rustworkx.digraph_spring_layout", "apiref/rustworkx.digraph_tensor_product", "apiref/rustworkx.digraph_transitivity", "apiref/rustworkx.digraph_union", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length", "apiref/rustworkx.digraph_vf2_mapping", "apiref/rustworkx.dijkstra_search", "apiref/rustworkx.dijkstra_shortest_path_lengths", "apiref/rustworkx.dijkstra_shortest_paths", "apiref/rustworkx.directed_barabasi_albert_graph", "apiref/rustworkx.directed_gnm_random_graph", "apiref/rustworkx.directed_gnp_random_graph", "apiref/rustworkx.directed_random_bipartite_graph", "apiref/rustworkx.directed_sbm_random_graph", "apiref/rustworkx.distance_matrix", "apiref/rustworkx.edge_betweenness_centrality", "apiref/rustworkx.eigenvector_centrality", "apiref/rustworkx.find_negative_cycle", "apiref/rustworkx.floyd_warshall", "apiref/rustworkx.floyd_warshall_numpy", "apiref/rustworkx.floyd_warshall_successor_and_distance", "apiref/rustworkx.from_node_link_json_file", "apiref/rustworkx.generators.barbell_graph", "apiref/rustworkx.generators.binomial_tree_graph", "apiref/rustworkx.generators.complete_graph", "apiref/rustworkx.generators.cycle_graph", "apiref/rustworkx.generators.directed_binomial_tree_graph", "apiref/rustworkx.generators.directed_complete_graph", "apiref/rustworkx.generators.directed_cycle_graph", "apiref/rustworkx.generators.directed_empty_graph", "apiref/rustworkx.generators.directed_grid_graph", "apiref/rustworkx.generators.directed_heavy_hex_graph", "apiref/rustworkx.generators.directed_heavy_square_graph", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph", "apiref/rustworkx.generators.directed_mesh_graph", "apiref/rustworkx.generators.directed_path_graph", "apiref/rustworkx.generators.directed_star_graph", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "apiref/rustworkx.generators.empty_graph", "apiref/rustworkx.generators.full_rary_tree", "apiref/rustworkx.generators.generalized_petersen_graph", "apiref/rustworkx.generators.grid_graph", "apiref/rustworkx.generators.heavy_hex_graph", "apiref/rustworkx.generators.heavy_square_graph", "apiref/rustworkx.generators.hexagonal_lattice_graph", "apiref/rustworkx.generators.lollipop_graph", "apiref/rustworkx.generators.mesh_graph", "apiref/rustworkx.generators.path_graph", "apiref/rustworkx.generators.star_graph", "apiref/rustworkx.graph_adjacency_matrix", "apiref/rustworkx.graph_all_pairs_all_simple_paths", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths", "apiref/rustworkx.graph_all_shortest_paths", "apiref/rustworkx.graph_all_simple_paths", "apiref/rustworkx.graph_astar_shortest_path", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths", "apiref/rustworkx.graph_betweenness_centrality", "apiref/rustworkx.graph_bfs_search", "apiref/rustworkx.graph_bipartite_edge_color", "apiref/rustworkx.graph_bipartite_layout", "apiref/rustworkx.graph_cartesian_product", "apiref/rustworkx.graph_circular_layout", "apiref/rustworkx.graph_closeness_centrality", "apiref/rustworkx.graph_complement", "apiref/rustworkx.graph_core_number", "apiref/rustworkx.graph_dfs_edges", "apiref/rustworkx.graph_dfs_search", "apiref/rustworkx.graph_dijkstra_search", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths", "apiref/rustworkx.graph_dijkstra_shortest_paths", "apiref/rustworkx.graph_distance_matrix", "apiref/rustworkx.graph_edge_betweenness_centrality", "apiref/rustworkx.graph_eigenvector_centrality", "apiref/rustworkx.graph_floyd_warshall", "apiref/rustworkx.graph_floyd_warshall_numpy", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance", "apiref/rustworkx.graph_greedy_color", "apiref/rustworkx.graph_greedy_edge_color", "apiref/rustworkx.graph_is_isomorphic", "apiref/rustworkx.graph_is_subgraph_isomorphic", "apiref/rustworkx.graph_k_shortest_path_lengths", "apiref/rustworkx.graph_katz_centrality", "apiref/rustworkx.graph_line_graph", "apiref/rustworkx.graph_longest_simple_path", "apiref/rustworkx.graph_misra_gries_edge_color", "apiref/rustworkx.graph_node_link_json", "apiref/rustworkx.graph_num_shortest_paths_unweighted", "apiref/rustworkx.graph_random_layout", "apiref/rustworkx.graph_shell_layout", "apiref/rustworkx.graph_spiral_layout", "apiref/rustworkx.graph_spring_layout", "apiref/rustworkx.graph_tensor_product", "apiref/rustworkx.graph_token_swapper", "apiref/rustworkx.graph_transitivity", "apiref/rustworkx.graph_union", "apiref/rustworkx.graph_unweighted_average_shortest_path_length", "apiref/rustworkx.graph_vf2_mapping", "apiref/rustworkx.has_path", "apiref/rustworkx.hits", "apiref/rustworkx.hyperbolic_random_graph", "apiref/rustworkx.is_bipartite", "apiref/rustworkx.is_connected", "apiref/rustworkx.is_directed_acyclic_graph", "apiref/rustworkx.is_isomorphic", "apiref/rustworkx.is_isomorphic_node_match", "apiref/rustworkx.is_matching", "apiref/rustworkx.is_maximal_matching", "apiref/rustworkx.is_planar", "apiref/rustworkx.is_subgraph_isomorphic", "apiref/rustworkx.is_weakly_connected", "apiref/rustworkx.isolates", "apiref/rustworkx.k_shortest_path_lengths", "apiref/rustworkx.katz_centrality", "apiref/rustworkx.layers", "apiref/rustworkx.lexicographical_topological_sort", "apiref/rustworkx.longest_simple_path", "apiref/rustworkx.max_weight_matching", "apiref/rustworkx.metric_closure", "apiref/rustworkx.minimum_spanning_edges", "apiref/rustworkx.minimum_spanning_tree", "apiref/rustworkx.negative_edge_cycle", "apiref/rustworkx.networkx_converter", "apiref/rustworkx.node_connected_component", "apiref/rustworkx.node_link_json", "apiref/rustworkx.num_shortest_paths_unweighted", "apiref/rustworkx.number_connected_components", "apiref/rustworkx.number_weakly_connected_components", "apiref/rustworkx.pagerank", "apiref/rustworkx.parse_node_link_json", "apiref/rustworkx.random_geometric_graph", "apiref/rustworkx.random_layout", "apiref/rustworkx.read_graphml", "apiref/rustworkx.shell_layout", "apiref/rustworkx.simple_cycles", "apiref/rustworkx.spiral_layout", "apiref/rustworkx.spring_layout", "apiref/rustworkx.steiner_tree", "apiref/rustworkx.stoer_wagner_min_cut", "apiref/rustworkx.strongly_connected_components", "apiref/rustworkx.topological_generations", "apiref/rustworkx.topological_sort", "apiref/rustworkx.transitive_reduction", "apiref/rustworkx.transitivity", "apiref/rustworkx.two_color", "apiref/rustworkx.undirected_gnm_random_graph", "apiref/rustworkx.undirected_gnp_random_graph", "apiref/rustworkx.undirected_random_bipartite_graph", "apiref/rustworkx.undirected_sbm_random_graph", "apiref/rustworkx.union", "apiref/rustworkx.unweighted_average_shortest_path_length", "apiref/rustworkx.vf2_mapping", "apiref/rustworkx.visit.BFSVisitor", "apiref/rustworkx.visit.BFSVisitor.black_target_edge", "apiref/rustworkx.visit.BFSVisitor.discover_vertex", "apiref/rustworkx.visit.BFSVisitor.finish_vertex", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge", "apiref/rustworkx.visit.BFSVisitor.tree_edge", "apiref/rustworkx.visit.DFSVisitor", "apiref/rustworkx.visit.DFSVisitor.back_edge", "apiref/rustworkx.visit.DFSVisitor.discover_vertex", "apiref/rustworkx.visit.DFSVisitor.finish_vertex", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge", "apiref/rustworkx.visit.DFSVisitor.tree_edge", "apiref/rustworkx.visit.DijkstraVisitor", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex", "apiref/rustworkx.visit.PruneSearch", "apiref/rustworkx.visit.StopSearch", "apiref/rustworkx.visualization.graphviz_draw", "apiref/rustworkx.visualization.mpl_draw", "apiref/rustworkx.weakly_connected_components", "benchmarks", "index", "install", "networkx", "release_notes", "tutorial/betweenness_centrality", "tutorial/dags", "tutorial/index", "tutorial/introduction", "visualization"], "filenames": ["CONTRIBUTING.md", "api/algorithm_functions/centrality.rst", "api/algorithm_functions/coloring.rst", "api/algorithm_functions/connectivity_and_cycles.rst", "api/algorithm_functions/dag_algorithms.rst", "api/algorithm_functions/graph_operations.rst", "api/algorithm_functions/index.rst", "api/algorithm_functions/isomorphism.rst", "api/algorithm_functions/link_analysis.rst", "api/algorithm_functions/matching.rst", "api/algorithm_functions/other.rst", "api/algorithm_functions/shortest_paths.rst", "api/algorithm_functions/traversal.rst", "api/algorithm_functions/tree.rst", "api/converters.rst", "api/custom_return_types.rst", "api/exceptions.rst", "api/generators.rst", "api/graph_classes.rst", "api/index.rst", "api/layout_functions.rst", "api/pydigraph_api_functions.rst", "api/pygraph_api_functions.rst", "api/random_graph_generator_functions.rst", "api/serialization.rst", "apiref/rustworkx.AllPairsPathLengthMapping.rst", "apiref/rustworkx.AllPairsPathLengthMapping.items.rst", "apiref/rustworkx.AllPairsPathLengthMapping.keys.rst", "apiref/rustworkx.AllPairsPathLengthMapping.values.rst", "apiref/rustworkx.AllPairsPathMapping.rst", "apiref/rustworkx.AllPairsPathMapping.items.rst", "apiref/rustworkx.AllPairsPathMapping.keys.rst", "apiref/rustworkx.AllPairsPathMapping.values.rst", "apiref/rustworkx.BFSPredecessors.rst", "apiref/rustworkx.BFSSuccessors.rst", "apiref/rustworkx.BiconnectedComponents.rst", "apiref/rustworkx.BiconnectedComponents.items.rst", "apiref/rustworkx.BiconnectedComponents.keys.rst", "apiref/rustworkx.BiconnectedComponents.values.rst", "apiref/rustworkx.CentralityMapping.rst", "apiref/rustworkx.CentralityMapping.items.rst", "apiref/rustworkx.CentralityMapping.keys.rst", "apiref/rustworkx.CentralityMapping.values.rst", "apiref/rustworkx.Chains.rst", "apiref/rustworkx.ColoringStrategy.rst", "apiref/rustworkx.DAGHasCycle.rst", "apiref/rustworkx.DAGWouldCycle.rst", "apiref/rustworkx.EdgeCentralityMapping.rst", "apiref/rustworkx.EdgeCentralityMapping.items.rst", "apiref/rustworkx.EdgeCentralityMapping.keys.rst", "apiref/rustworkx.EdgeCentralityMapping.values.rst", "apiref/rustworkx.EdgeIndexMap.rst", "apiref/rustworkx.EdgeIndexMap.items.rst", "apiref/rustworkx.EdgeIndexMap.keys.rst", "apiref/rustworkx.EdgeIndexMap.values.rst", "apiref/rustworkx.EdgeIndices.rst", "apiref/rustworkx.EdgeList.rst", "apiref/rustworkx.GraphNotBipartite.rst", "apiref/rustworkx.IndexPartitionBlock.rst", "apiref/rustworkx.InvalidMapping.rst", "apiref/rustworkx.InvalidNode.rst", "apiref/rustworkx.JSONSerializationError.rst", "apiref/rustworkx.NegativeCycle.rst", "apiref/rustworkx.NoEdgeBetweenNodes.rst", "apiref/rustworkx.NoPathFound.rst", "apiref/rustworkx.NoSuitableNeighbors.rst", "apiref/rustworkx.NodeIndices.rst", "apiref/rustworkx.NodeMap.rst", "apiref/rustworkx.NodeMap.items.rst", "apiref/rustworkx.NodeMap.keys.rst", "apiref/rustworkx.NodeMap.values.rst", "apiref/rustworkx.NullGraph.rst", "apiref/rustworkx.PathLengthMapping.rst", "apiref/rustworkx.PathLengthMapping.items.rst", "apiref/rustworkx.PathLengthMapping.keys.rst", "apiref/rustworkx.PathLengthMapping.values.rst", "apiref/rustworkx.PathMapping.rst", "apiref/rustworkx.PathMapping.items.rst", "apiref/rustworkx.PathMapping.keys.rst", "apiref/rustworkx.PathMapping.values.rst", "apiref/rustworkx.Pos2DMapping.rst", "apiref/rustworkx.Pos2DMapping.items.rst", "apiref/rustworkx.Pos2DMapping.keys.rst", "apiref/rustworkx.Pos2DMapping.values.rst", "apiref/rustworkx.ProductNodeMap.rst", "apiref/rustworkx.ProductNodeMap.items.rst", "apiref/rustworkx.ProductNodeMap.keys.rst", "apiref/rustworkx.ProductNodeMap.values.rst", "apiref/rustworkx.PyDAG.rst", "apiref/rustworkx.PyDAG.add_child.rst", "apiref/rustworkx.PyDAG.add_edge.rst", "apiref/rustworkx.PyDAG.add_edges_from.rst", "apiref/rustworkx.PyDAG.add_edges_from_no_data.rst", "apiref/rustworkx.PyDAG.add_node.rst", "apiref/rustworkx.PyDAG.add_nodes_from.rst", "apiref/rustworkx.PyDAG.add_parent.rst", "apiref/rustworkx.PyDAG.adj.rst", "apiref/rustworkx.PyDAG.adj_direction.rst", "apiref/rustworkx.PyDAG.clear.rst", "apiref/rustworkx.PyDAG.clear_edges.rst", "apiref/rustworkx.PyDAG.compose.rst", "apiref/rustworkx.PyDAG.contract_nodes.rst", "apiref/rustworkx.PyDAG.copy.rst", "apiref/rustworkx.PyDAG.edge_index_map.rst", "apiref/rustworkx.PyDAG.edge_indices.rst", "apiref/rustworkx.PyDAG.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDAG.edge_list.rst", "apiref/rustworkx.PyDAG.edge_subgraph.rst", "apiref/rustworkx.PyDAG.edges.rst", "apiref/rustworkx.PyDAG.extend_from_edge_list.rst", "apiref/rustworkx.PyDAG.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDAG.filter_edges.rst", "apiref/rustworkx.PyDAG.filter_nodes.rst", "apiref/rustworkx.PyDAG.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_node_by_weight.rst", "apiref/rustworkx.PyDAG.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDAG.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDAG.find_successors_by_edge.rst", "apiref/rustworkx.PyDAG.from_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDAG.get_all_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data.rst", "apiref/rustworkx.PyDAG.get_edge_data_by_index.rst", "apiref/rustworkx.PyDAG.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDAG.get_node_data.rst", "apiref/rustworkx.PyDAG.has_edge.rst", "apiref/rustworkx.PyDAG.has_node.rst", "apiref/rustworkx.PyDAG.has_parallel_edges.rst", "apiref/rustworkx.PyDAG.in_degree.rst", "apiref/rustworkx.PyDAG.in_edges.rst", "apiref/rustworkx.PyDAG.incident_edge_index_map.rst", "apiref/rustworkx.PyDAG.incident_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDAG.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDAG.is_symmetric.rst", "apiref/rustworkx.PyDAG.make_symmetric.rst", "apiref/rustworkx.PyDAG.merge_nodes.rst", "apiref/rustworkx.PyDAG.neighbors.rst", "apiref/rustworkx.PyDAG.neighbors_undirected.rst", "apiref/rustworkx.PyDAG.node_indexes.rst", "apiref/rustworkx.PyDAG.node_indices.rst", "apiref/rustworkx.PyDAG.nodes.rst", "apiref/rustworkx.PyDAG.num_edges.rst", "apiref/rustworkx.PyDAG.num_nodes.rst", "apiref/rustworkx.PyDAG.out_degree.rst", "apiref/rustworkx.PyDAG.out_edges.rst", "apiref/rustworkx.PyDAG.predecessor_indices.rst", "apiref/rustworkx.PyDAG.predecessors.rst", "apiref/rustworkx.PyDAG.read_edge_list.rst", "apiref/rustworkx.PyDAG.remove_edge.rst", "apiref/rustworkx.PyDAG.remove_edge_from_index.rst", "apiref/rustworkx.PyDAG.remove_edges_from.rst", "apiref/rustworkx.PyDAG.remove_node.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDAG.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDAG.remove_nodes_from.rst", "apiref/rustworkx.PyDAG.reverse.rst", "apiref/rustworkx.PyDAG.subgraph.rst", "apiref/rustworkx.PyDAG.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDAG.successor_indices.rst", "apiref/rustworkx.PyDAG.successors.rst", "apiref/rustworkx.PyDAG.to_dot.rst", "apiref/rustworkx.PyDAG.to_undirected.rst", "apiref/rustworkx.PyDAG.update_edge.rst", "apiref/rustworkx.PyDAG.update_edge_by_index.rst", "apiref/rustworkx.PyDAG.weighted_edge_list.rst", "apiref/rustworkx.PyDAG.write_edge_list.rst", "apiref/rustworkx.PyDiGraph.rst", "apiref/rustworkx.PyDiGraph.add_child.rst", "apiref/rustworkx.PyDiGraph.add_edge.rst", "apiref/rustworkx.PyDiGraph.add_edges_from.rst", "apiref/rustworkx.PyDiGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyDiGraph.add_node.rst", "apiref/rustworkx.PyDiGraph.add_nodes_from.rst", "apiref/rustworkx.PyDiGraph.add_parent.rst", "apiref/rustworkx.PyDiGraph.adj.rst", "apiref/rustworkx.PyDiGraph.adj_direction.rst", "apiref/rustworkx.PyDiGraph.clear.rst", "apiref/rustworkx.PyDiGraph.clear_edges.rst", "apiref/rustworkx.PyDiGraph.compose.rst", "apiref/rustworkx.PyDiGraph.contract_nodes.rst", "apiref/rustworkx.PyDiGraph.copy.rst", "apiref/rustworkx.PyDiGraph.edge_index_map.rst", "apiref/rustworkx.PyDiGraph.edge_indices.rst", "apiref/rustworkx.PyDiGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyDiGraph.edge_list.rst", "apiref/rustworkx.PyDiGraph.edge_subgraph.rst", "apiref/rustworkx.PyDiGraph.edges.rst", "apiref/rustworkx.PyDiGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyDiGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.filter_edges.rst", "apiref/rustworkx.PyDiGraph.filter_nodes.rst", "apiref/rustworkx.PyDiGraph.find_adjacent_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_node_by_weight.rst", "apiref/rustworkx.PyDiGraph.find_predecessor_node_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_predecessors_by_edge.rst", "apiref/rustworkx.PyDiGraph.find_successors_by_edge.rst", "apiref/rustworkx.PyDiGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyDiGraph.get_all_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data.rst", "apiref/rustworkx.PyDiGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyDiGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyDiGraph.get_node_data.rst", "apiref/rustworkx.PyDiGraph.has_edge.rst", "apiref/rustworkx.PyDiGraph.has_node.rst", "apiref/rustworkx.PyDiGraph.has_parallel_edges.rst", "apiref/rustworkx.PyDiGraph.in_degree.rst", "apiref/rustworkx.PyDiGraph.in_edges.rst", "apiref/rustworkx.PyDiGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyDiGraph.incident_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_in_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges.rst", "apiref/rustworkx.PyDiGraph.insert_node_on_out_edges_multiple.rst", "apiref/rustworkx.PyDiGraph.is_symmetric.rst", "apiref/rustworkx.PyDiGraph.make_symmetric.rst", "apiref/rustworkx.PyDiGraph.merge_nodes.rst", "apiref/rustworkx.PyDiGraph.neighbors.rst", "apiref/rustworkx.PyDiGraph.neighbors_undirected.rst", "apiref/rustworkx.PyDiGraph.node_indexes.rst", "apiref/rustworkx.PyDiGraph.node_indices.rst", "apiref/rustworkx.PyDiGraph.nodes.rst", "apiref/rustworkx.PyDiGraph.num_edges.rst", "apiref/rustworkx.PyDiGraph.num_nodes.rst", "apiref/rustworkx.PyDiGraph.out_degree.rst", "apiref/rustworkx.PyDiGraph.out_edges.rst", "apiref/rustworkx.PyDiGraph.predecessor_indices.rst", "apiref/rustworkx.PyDiGraph.predecessors.rst", "apiref/rustworkx.PyDiGraph.read_edge_list.rst", "apiref/rustworkx.PyDiGraph.remove_edge.rst", "apiref/rustworkx.PyDiGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyDiGraph.remove_edges_from.rst", "apiref/rustworkx.PyDiGraph.remove_node.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_id.rst", "apiref/rustworkx.PyDiGraph.remove_node_retain_edges_by_key.rst", "apiref/rustworkx.PyDiGraph.remove_nodes_from.rst", "apiref/rustworkx.PyDiGraph.reverse.rst", "apiref/rustworkx.PyDiGraph.subgraph.rst", "apiref/rustworkx.PyDiGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyDiGraph.successor_indices.rst", "apiref/rustworkx.PyDiGraph.successors.rst", "apiref/rustworkx.PyDiGraph.to_dot.rst", "apiref/rustworkx.PyDiGraph.to_undirected.rst", "apiref/rustworkx.PyDiGraph.update_edge.rst", "apiref/rustworkx.PyDiGraph.update_edge_by_index.rst", "apiref/rustworkx.PyDiGraph.weighted_edge_list.rst", "apiref/rustworkx.PyDiGraph.write_edge_list.rst", "apiref/rustworkx.PyGraph.rst", "apiref/rustworkx.PyGraph.add_edge.rst", "apiref/rustworkx.PyGraph.add_edges_from.rst", "apiref/rustworkx.PyGraph.add_edges_from_no_data.rst", "apiref/rustworkx.PyGraph.add_node.rst", "apiref/rustworkx.PyGraph.add_nodes_from.rst", "apiref/rustworkx.PyGraph.adj.rst", "apiref/rustworkx.PyGraph.clear.rst", "apiref/rustworkx.PyGraph.clear_edges.rst", "apiref/rustworkx.PyGraph.compose.rst", "apiref/rustworkx.PyGraph.contract_nodes.rst", "apiref/rustworkx.PyGraph.copy.rst", "apiref/rustworkx.PyGraph.degree.rst", "apiref/rustworkx.PyGraph.edge_index_map.rst", "apiref/rustworkx.PyGraph.edge_indices.rst", "apiref/rustworkx.PyGraph.edge_indices_from_endpoints.rst", "apiref/rustworkx.PyGraph.edge_list.rst", "apiref/rustworkx.PyGraph.edge_subgraph.rst", "apiref/rustworkx.PyGraph.edges.rst", "apiref/rustworkx.PyGraph.extend_from_edge_list.rst", "apiref/rustworkx.PyGraph.extend_from_weighted_edge_list.rst", "apiref/rustworkx.PyGraph.filter_edges.rst", "apiref/rustworkx.PyGraph.filter_nodes.rst", "apiref/rustworkx.PyGraph.find_node_by_weight.rst", "apiref/rustworkx.PyGraph.from_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.from_complex_adjacency_matrix.rst", "apiref/rustworkx.PyGraph.get_all_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data.rst", "apiref/rustworkx.PyGraph.get_edge_data_by_index.rst", "apiref/rustworkx.PyGraph.get_edge_endpoints_by_index.rst", "apiref/rustworkx.PyGraph.get_node_data.rst", "apiref/rustworkx.PyGraph.has_edge.rst", "apiref/rustworkx.PyGraph.has_node.rst", "apiref/rustworkx.PyGraph.has_parallel_edges.rst", "apiref/rustworkx.PyGraph.in_edges.rst", "apiref/rustworkx.PyGraph.incident_edge_index_map.rst", "apiref/rustworkx.PyGraph.incident_edges.rst", "apiref/rustworkx.PyGraph.neighbors.rst", "apiref/rustworkx.PyGraph.node_indexes.rst", "apiref/rustworkx.PyGraph.node_indices.rst", "apiref/rustworkx.PyGraph.nodes.rst", "apiref/rustworkx.PyGraph.num_edges.rst", "apiref/rustworkx.PyGraph.num_nodes.rst", "apiref/rustworkx.PyGraph.out_edges.rst", "apiref/rustworkx.PyGraph.read_edge_list.rst", "apiref/rustworkx.PyGraph.remove_edge.rst", "apiref/rustworkx.PyGraph.remove_edge_from_index.rst", "apiref/rustworkx.PyGraph.remove_edges_from.rst", "apiref/rustworkx.PyGraph.remove_node.rst", "apiref/rustworkx.PyGraph.remove_nodes_from.rst", "apiref/rustworkx.PyGraph.subgraph.rst", "apiref/rustworkx.PyGraph.substitute_node_with_subgraph.rst", "apiref/rustworkx.PyGraph.to_directed.rst", "apiref/rustworkx.PyGraph.to_dot.rst", "apiref/rustworkx.PyGraph.update_edge.rst", "apiref/rustworkx.PyGraph.update_edge_by_index.rst", "apiref/rustworkx.PyGraph.weighted_edge_list.rst", "apiref/rustworkx.PyGraph.write_edge_list.rst", "apiref/rustworkx.RelationalCoarsestPartition.rst", "apiref/rustworkx.TopologicalSorter.rst", "apiref/rustworkx.TopologicalSorter.done.rst", "apiref/rustworkx.TopologicalSorter.get_ready.rst", "apiref/rustworkx.TopologicalSorter.is_active.rst", "apiref/rustworkx.WeightedEdgeList.rst", "apiref/rustworkx.adjacency_matrix.rst", "apiref/rustworkx.all_pairs_all_simple_paths.rst", "apiref/rustworkx.all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.all_shortest_paths.rst", "apiref/rustworkx.all_simple_paths.rst", "apiref/rustworkx.ancestors.rst", "apiref/rustworkx.articulation_points.rst", "apiref/rustworkx.astar_shortest_path.rst", "apiref/rustworkx.barabasi_albert_graph.rst", "apiref/rustworkx.bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.bellman_ford_shortest_paths.rst", "apiref/rustworkx.betweenness_centrality.rst", "apiref/rustworkx.bfs_predecessors.rst", "apiref/rustworkx.bfs_search.rst", "apiref/rustworkx.bfs_successors.rst", "apiref/rustworkx.biconnected_components.rst", "apiref/rustworkx.bipartite_layout.rst", "apiref/rustworkx.bridges.rst", "apiref/rustworkx.cartesian_product.rst", "apiref/rustworkx.chain_decomposition.rst", "apiref/rustworkx.circular_layout.rst", "apiref/rustworkx.closeness_centrality.rst", "apiref/rustworkx.collect_bicolor_runs.rst", "apiref/rustworkx.collect_runs.rst", "apiref/rustworkx.complement.rst", "apiref/rustworkx.connected_components.rst", "apiref/rustworkx.connected_subgraphs.rst", "apiref/rustworkx.core_number.rst", "apiref/rustworkx.cycle_basis.rst", "apiref/rustworkx.dag_longest_path.rst", "apiref/rustworkx.dag_longest_path_length.rst", "apiref/rustworkx.dag_weighted_longest_path.rst", "apiref/rustworkx.dag_weighted_longest_path_length.rst", "apiref/rustworkx.descendants.rst", "apiref/rustworkx.dfs_edges.rst", "apiref/rustworkx.dfs_search.rst", "apiref/rustworkx.digraph_adjacency_matrix.rst", "apiref/rustworkx.digraph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.digraph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_all_shortest_paths.rst", "apiref/rustworkx.digraph_all_simple_paths.rst", "apiref/rustworkx.digraph_astar_shortest_path.rst", "apiref/rustworkx.digraph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.digraph_betweenness_centrality.rst", "apiref/rustworkx.digraph_bfs_search.rst", "apiref/rustworkx.digraph_bipartite_layout.rst", "apiref/rustworkx.digraph_cartesian_product.rst", "apiref/rustworkx.digraph_circular_layout.rst", "apiref/rustworkx.digraph_closeness_centrality.rst", "apiref/rustworkx.digraph_complement.rst", "apiref/rustworkx.digraph_core_number.rst", "apiref/rustworkx.digraph_dfs_edges.rst", "apiref/rustworkx.digraph_dfs_search.rst", "apiref/rustworkx.digraph_dijkstra_search.rst", "apiref/rustworkx.digraph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.digraph_dijkstra_shortest_paths.rst", "apiref/rustworkx.digraph_distance_matrix.rst", "apiref/rustworkx.digraph_edge_betweenness_centrality.rst", "apiref/rustworkx.digraph_eigenvector_centrality.rst", "apiref/rustworkx.digraph_find_cycle.rst", "apiref/rustworkx.digraph_floyd_warshall.rst", "apiref/rustworkx.digraph_floyd_warshall_numpy.rst", "apiref/rustworkx.digraph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.digraph_is_isomorphic.rst", "apiref/rustworkx.digraph_is_subgraph_isomorphic.rst", "apiref/rustworkx.digraph_k_shortest_path_lengths.rst", "apiref/rustworkx.digraph_katz_centrality.rst", "apiref/rustworkx.digraph_longest_simple_path.rst", "apiref/rustworkx.digraph_maximum_bisimulation.rst", "apiref/rustworkx.digraph_node_link_json.rst", "apiref/rustworkx.digraph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.digraph_random_layout.rst", "apiref/rustworkx.digraph_shell_layout.rst", "apiref/rustworkx.digraph_spiral_layout.rst", "apiref/rustworkx.digraph_spring_layout.rst", "apiref/rustworkx.digraph_tensor_product.rst", "apiref/rustworkx.digraph_transitivity.rst", "apiref/rustworkx.digraph_union.rst", "apiref/rustworkx.digraph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.digraph_vf2_mapping.rst", "apiref/rustworkx.dijkstra_search.rst", "apiref/rustworkx.dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.dijkstra_shortest_paths.rst", "apiref/rustworkx.directed_barabasi_albert_graph.rst", "apiref/rustworkx.directed_gnm_random_graph.rst", "apiref/rustworkx.directed_gnp_random_graph.rst", "apiref/rustworkx.directed_random_bipartite_graph.rst", "apiref/rustworkx.directed_sbm_random_graph.rst", "apiref/rustworkx.distance_matrix.rst", "apiref/rustworkx.edge_betweenness_centrality.rst", "apiref/rustworkx.eigenvector_centrality.rst", "apiref/rustworkx.find_negative_cycle.rst", "apiref/rustworkx.floyd_warshall.rst", "apiref/rustworkx.floyd_warshall_numpy.rst", "apiref/rustworkx.floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.from_node_link_json_file.rst", "apiref/rustworkx.generators.barbell_graph.rst", "apiref/rustworkx.generators.binomial_tree_graph.rst", "apiref/rustworkx.generators.complete_graph.rst", "apiref/rustworkx.generators.cycle_graph.rst", "apiref/rustworkx.generators.directed_binomial_tree_graph.rst", "apiref/rustworkx.generators.directed_complete_graph.rst", "apiref/rustworkx.generators.directed_cycle_graph.rst", "apiref/rustworkx.generators.directed_empty_graph.rst", "apiref/rustworkx.generators.directed_grid_graph.rst", "apiref/rustworkx.generators.directed_heavy_hex_graph.rst", "apiref/rustworkx.generators.directed_heavy_square_graph.rst", "apiref/rustworkx.generators.directed_hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.directed_mesh_graph.rst", "apiref/rustworkx.generators.directed_path_graph.rst", "apiref/rustworkx.generators.directed_star_graph.rst", "apiref/rustworkx.generators.dorogovtsev_goltsev_mendes_graph.rst", "apiref/rustworkx.generators.empty_graph.rst", "apiref/rustworkx.generators.full_rary_tree.rst", "apiref/rustworkx.generators.generalized_petersen_graph.rst", "apiref/rustworkx.generators.grid_graph.rst", "apiref/rustworkx.generators.heavy_hex_graph.rst", "apiref/rustworkx.generators.heavy_square_graph.rst", "apiref/rustworkx.generators.hexagonal_lattice_graph.rst", "apiref/rustworkx.generators.lollipop_graph.rst", "apiref/rustworkx.generators.mesh_graph.rst", "apiref/rustworkx.generators.path_graph.rst", "apiref/rustworkx.generators.star_graph.rst", "apiref/rustworkx.graph_adjacency_matrix.rst", "apiref/rustworkx.graph_all_pairs_all_simple_paths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_bellman_ford_shortest_paths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_path_lengths.rst", "apiref/rustworkx.graph_all_pairs_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_all_shortest_paths.rst", "apiref/rustworkx.graph_all_simple_paths.rst", "apiref/rustworkx.graph_astar_shortest_path.rst", "apiref/rustworkx.graph_bellman_ford_shortest_path_lengths.rst", "apiref/rustworkx.graph_betweenness_centrality.rst", "apiref/rustworkx.graph_bfs_search.rst", "apiref/rustworkx.graph_bipartite_edge_color.rst", "apiref/rustworkx.graph_bipartite_layout.rst", "apiref/rustworkx.graph_cartesian_product.rst", "apiref/rustworkx.graph_circular_layout.rst", "apiref/rustworkx.graph_closeness_centrality.rst", "apiref/rustworkx.graph_complement.rst", "apiref/rustworkx.graph_core_number.rst", "apiref/rustworkx.graph_dfs_edges.rst", "apiref/rustworkx.graph_dfs_search.rst", "apiref/rustworkx.graph_dijkstra_search.rst", "apiref/rustworkx.graph_dijkstra_shortest_path_lengths.rst", "apiref/rustworkx.graph_dijkstra_shortest_paths.rst", "apiref/rustworkx.graph_distance_matrix.rst", "apiref/rustworkx.graph_edge_betweenness_centrality.rst", "apiref/rustworkx.graph_eigenvector_centrality.rst", "apiref/rustworkx.graph_floyd_warshall.rst", "apiref/rustworkx.graph_floyd_warshall_numpy.rst", "apiref/rustworkx.graph_floyd_warshall_successor_and_distance.rst", "apiref/rustworkx.graph_greedy_color.rst", "apiref/rustworkx.graph_greedy_edge_color.rst", "apiref/rustworkx.graph_is_isomorphic.rst", "apiref/rustworkx.graph_is_subgraph_isomorphic.rst", "apiref/rustworkx.graph_k_shortest_path_lengths.rst", "apiref/rustworkx.graph_katz_centrality.rst", "apiref/rustworkx.graph_line_graph.rst", "apiref/rustworkx.graph_longest_simple_path.rst", "apiref/rustworkx.graph_misra_gries_edge_color.rst", "apiref/rustworkx.graph_node_link_json.rst", "apiref/rustworkx.graph_num_shortest_paths_unweighted.rst", "apiref/rustworkx.graph_random_layout.rst", "apiref/rustworkx.graph_shell_layout.rst", "apiref/rustworkx.graph_spiral_layout.rst", "apiref/rustworkx.graph_spring_layout.rst", "apiref/rustworkx.graph_tensor_product.rst", "apiref/rustworkx.graph_token_swapper.rst", "apiref/rustworkx.graph_transitivity.rst", "apiref/rustworkx.graph_union.rst", "apiref/rustworkx.graph_unweighted_average_shortest_path_length.rst", "apiref/rustworkx.graph_vf2_mapping.rst", "apiref/rustworkx.has_path.rst", "apiref/rustworkx.hits.rst", "apiref/rustworkx.hyperbolic_random_graph.rst", "apiref/rustworkx.is_bipartite.rst", "apiref/rustworkx.is_connected.rst", "apiref/rustworkx.is_directed_acyclic_graph.rst", "apiref/rustworkx.is_isomorphic.rst", "apiref/rustworkx.is_isomorphic_node_match.rst", "apiref/rustworkx.is_matching.rst", "apiref/rustworkx.is_maximal_matching.rst", "apiref/rustworkx.is_planar.rst", "apiref/rustworkx.is_subgraph_isomorphic.rst", "apiref/rustworkx.is_weakly_connected.rst", "apiref/rustworkx.isolates.rst", "apiref/rustworkx.k_shortest_path_lengths.rst", "apiref/rustworkx.katz_centrality.rst", "apiref/rustworkx.layers.rst", "apiref/rustworkx.lexicographical_topological_sort.rst", "apiref/rustworkx.longest_simple_path.rst", "apiref/rustworkx.max_weight_matching.rst", "apiref/rustworkx.metric_closure.rst", "apiref/rustworkx.minimum_spanning_edges.rst", "apiref/rustworkx.minimum_spanning_tree.rst", "apiref/rustworkx.negative_edge_cycle.rst", "apiref/rustworkx.networkx_converter.rst", "apiref/rustworkx.node_connected_component.rst", "apiref/rustworkx.node_link_json.rst", "apiref/rustworkx.num_shortest_paths_unweighted.rst", "apiref/rustworkx.number_connected_components.rst", "apiref/rustworkx.number_weakly_connected_components.rst", "apiref/rustworkx.pagerank.rst", "apiref/rustworkx.parse_node_link_json.rst", "apiref/rustworkx.random_geometric_graph.rst", "apiref/rustworkx.random_layout.rst", "apiref/rustworkx.read_graphml.rst", "apiref/rustworkx.shell_layout.rst", "apiref/rustworkx.simple_cycles.rst", "apiref/rustworkx.spiral_layout.rst", "apiref/rustworkx.spring_layout.rst", "apiref/rustworkx.steiner_tree.rst", "apiref/rustworkx.stoer_wagner_min_cut.rst", "apiref/rustworkx.strongly_connected_components.rst", "apiref/rustworkx.topological_generations.rst", "apiref/rustworkx.topological_sort.rst", "apiref/rustworkx.transitive_reduction.rst", "apiref/rustworkx.transitivity.rst", "apiref/rustworkx.two_color.rst", "apiref/rustworkx.undirected_gnm_random_graph.rst", "apiref/rustworkx.undirected_gnp_random_graph.rst", "apiref/rustworkx.undirected_random_bipartite_graph.rst", "apiref/rustworkx.undirected_sbm_random_graph.rst", "apiref/rustworkx.union.rst", "apiref/rustworkx.unweighted_average_shortest_path_length.rst", "apiref/rustworkx.vf2_mapping.rst", "apiref/rustworkx.visit.BFSVisitor.rst", "apiref/rustworkx.visit.BFSVisitor.black_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.BFSVisitor.gray_target_edge.rst", "apiref/rustworkx.visit.BFSVisitor.non_tree_edge.rst", "apiref/rustworkx.visit.BFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DFSVisitor.rst", "apiref/rustworkx.visit.DFSVisitor.back_edge.rst", "apiref/rustworkx.visit.DFSVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.finish_vertex.rst", "apiref/rustworkx.visit.DFSVisitor.forward_or_cross_edge.rst", "apiref/rustworkx.visit.DFSVisitor.tree_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.rst", "apiref/rustworkx.visit.DijkstraVisitor.discover_vertex.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_not_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.edge_relaxed.rst", "apiref/rustworkx.visit.DijkstraVisitor.examine_edge.rst", "apiref/rustworkx.visit.DijkstraVisitor.finish_vertex.rst", "apiref/rustworkx.visit.PruneSearch.rst", "apiref/rustworkx.visit.StopSearch.rst", "apiref/rustworkx.visualization.graphviz_draw.rst", "apiref/rustworkx.visualization.mpl_draw.rst", "apiref/rustworkx.weakly_connected_components.rst", "benchmarks.rst", "index.rst", "install.rst", "networkx.rst", "release_notes.rst", "tutorial/betweenness_centrality.rst", "tutorial/dags.rst", "tutorial/index.rst", "tutorial/introduction.rst", "visualization.rst"], "titles": ["Contributing", "Centrality", "Coloring", "Connectivity and Cycles", "DAG Algorithms", "Graph Operations", "Algorithm Functions", "Isomorphism", "Link Analysis", "Matching", "Other Algorithm Functions", "Shortest Paths", "Traversal", "Tree", "Converters", "Custom Return Types", "Exceptions", "Generators", "Graph Classes", "Rustworkx API Reference", "Layout Functions", "API functions for PyDigraph", "API functions for PyGraph", "Random Graph Generator Functions", "Serialization", "AllPairsPathLengthMapping", "rustworkx.AllPairsPathLengthMapping.items", "rustworkx.AllPairsPathLengthMapping.keys", "rustworkx.AllPairsPathLengthMapping.values", "AllPairsPathMapping", "rustworkx.AllPairsPathMapping.items", "rustworkx.AllPairsPathMapping.keys", "rustworkx.AllPairsPathMapping.values", "BFSPredecessors", "BFSSuccessors", "BiconnectedComponents", "rustworkx.BiconnectedComponents.items", "rustworkx.BiconnectedComponents.keys", "rustworkx.BiconnectedComponents.values", "CentralityMapping", "rustworkx.CentralityMapping.items", "rustworkx.CentralityMapping.keys", "rustworkx.CentralityMapping.values", "Chains", "ColoringStrategy", "rustworkx.DAGHasCycle", "rustworkx.DAGWouldCycle", "EdgeCentralityMapping", "rustworkx.EdgeCentralityMapping.items", "rustworkx.EdgeCentralityMapping.keys", "rustworkx.EdgeCentralityMapping.values", "EdgeIndexMap", "rustworkx.EdgeIndexMap.items", "rustworkx.EdgeIndexMap.keys", "rustworkx.EdgeIndexMap.values", "EdgeIndices", "EdgeList", "rustworkx.GraphNotBipartite", "IndexPartitionBlock", "rustworkx.InvalidMapping", "rustworkx.InvalidNode", "rustworkx.JSONSerializationError", "rustworkx.NegativeCycle", "rustworkx.NoEdgeBetweenNodes", "rustworkx.NoPathFound", "rustworkx.NoSuitableNeighbors", "NodeIndices", "NodeMap", "rustworkx.NodeMap.items", "rustworkx.NodeMap.keys", "rustworkx.NodeMap.values", "rustworkx.NullGraph", "PathLengthMapping", "rustworkx.PathLengthMapping.items", "rustworkx.PathLengthMapping.keys", "rustworkx.PathLengthMapping.values", "PathMapping", "rustworkx.PathMapping.items", "rustworkx.PathMapping.keys", "rustworkx.PathMapping.values", "Pos2DMapping", "rustworkx.Pos2DMapping.items", "rustworkx.Pos2DMapping.keys", "rustworkx.Pos2DMapping.values", "ProductNodeMap", "rustworkx.ProductNodeMap.items", "rustworkx.ProductNodeMap.keys", "rustworkx.ProductNodeMap.values", "PyDAG", "rustworkx.PyDAG.add_child", "rustworkx.PyDAG.add_edge", "rustworkx.PyDAG.add_edges_from", "rustworkx.PyDAG.add_edges_from_no_data", "rustworkx.PyDAG.add_node", "rustworkx.PyDAG.add_nodes_from", "rustworkx.PyDAG.add_parent", "rustworkx.PyDAG.adj", "rustworkx.PyDAG.adj_direction", "rustworkx.PyDAG.clear", "rustworkx.PyDAG.clear_edges", "rustworkx.PyDAG.compose", "rustworkx.PyDAG.contract_nodes", "rustworkx.PyDAG.copy", "rustworkx.PyDAG.edge_index_map", "rustworkx.PyDAG.edge_indices", "rustworkx.PyDAG.edge_indices_from_endpoints", "rustworkx.PyDAG.edge_list", "rustworkx.PyDAG.edge_subgraph", "rustworkx.PyDAG.edges", "rustworkx.PyDAG.extend_from_edge_list", "rustworkx.PyDAG.extend_from_weighted_edge_list", "rustworkx.PyDAG.filter_edges", "rustworkx.PyDAG.filter_nodes", "rustworkx.PyDAG.find_adjacent_node_by_edge", "rustworkx.PyDAG.find_node_by_weight", "rustworkx.PyDAG.find_predecessor_node_by_edge", "rustworkx.PyDAG.find_predecessors_by_edge", "rustworkx.PyDAG.find_successors_by_edge", "rustworkx.PyDAG.from_adjacency_matrix", "rustworkx.PyDAG.from_complex_adjacency_matrix", "rustworkx.PyDAG.get_all_edge_data", "rustworkx.PyDAG.get_edge_data", "rustworkx.PyDAG.get_edge_data_by_index", "rustworkx.PyDAG.get_edge_endpoints_by_index", "rustworkx.PyDAG.get_node_data", "rustworkx.PyDAG.has_edge", "rustworkx.PyDAG.has_node", "rustworkx.PyDAG.has_parallel_edges", "rustworkx.PyDAG.in_degree", "rustworkx.PyDAG.in_edges", "rustworkx.PyDAG.incident_edge_index_map", "rustworkx.PyDAG.incident_edges", "rustworkx.PyDAG.insert_node_on_in_edges", "rustworkx.PyDAG.insert_node_on_in_edges_multiple", "rustworkx.PyDAG.insert_node_on_out_edges", "rustworkx.PyDAG.insert_node_on_out_edges_multiple", "rustworkx.PyDAG.is_symmetric", "rustworkx.PyDAG.make_symmetric", "rustworkx.PyDAG.merge_nodes", "rustworkx.PyDAG.neighbors", "rustworkx.PyDAG.neighbors_undirected", "rustworkx.PyDAG.node_indexes", "rustworkx.PyDAG.node_indices", "rustworkx.PyDAG.nodes", "rustworkx.PyDAG.num_edges", "rustworkx.PyDAG.num_nodes", "rustworkx.PyDAG.out_degree", "rustworkx.PyDAG.out_edges", "rustworkx.PyDAG.predecessor_indices", "rustworkx.PyDAG.predecessors", "rustworkx.PyDAG.read_edge_list", "rustworkx.PyDAG.remove_edge", "rustworkx.PyDAG.remove_edge_from_index", "rustworkx.PyDAG.remove_edges_from", "rustworkx.PyDAG.remove_node", "rustworkx.PyDAG.remove_node_retain_edges", "rustworkx.PyDAG.remove_node_retain_edges_by_id", "rustworkx.PyDAG.remove_node_retain_edges_by_key", "rustworkx.PyDAG.remove_nodes_from", "rustworkx.PyDAG.reverse", "rustworkx.PyDAG.subgraph", "rustworkx.PyDAG.substitute_node_with_subgraph", "rustworkx.PyDAG.successor_indices", "rustworkx.PyDAG.successors", "rustworkx.PyDAG.to_dot", "rustworkx.PyDAG.to_undirected", "rustworkx.PyDAG.update_edge", "rustworkx.PyDAG.update_edge_by_index", "rustworkx.PyDAG.weighted_edge_list", "rustworkx.PyDAG.write_edge_list", "PyDiGraph", "rustworkx.PyDiGraph.add_child", "rustworkx.PyDiGraph.add_edge", "rustworkx.PyDiGraph.add_edges_from", "rustworkx.PyDiGraph.add_edges_from_no_data", "rustworkx.PyDiGraph.add_node", "rustworkx.PyDiGraph.add_nodes_from", "rustworkx.PyDiGraph.add_parent", "rustworkx.PyDiGraph.adj", "rustworkx.PyDiGraph.adj_direction", "rustworkx.PyDiGraph.clear", "rustworkx.PyDiGraph.clear_edges", "rustworkx.PyDiGraph.compose", "rustworkx.PyDiGraph.contract_nodes", "rustworkx.PyDiGraph.copy", "rustworkx.PyDiGraph.edge_index_map", "rustworkx.PyDiGraph.edge_indices", "rustworkx.PyDiGraph.edge_indices_from_endpoints", "rustworkx.PyDiGraph.edge_list", "rustworkx.PyDiGraph.edge_subgraph", "rustworkx.PyDiGraph.edges", "rustworkx.PyDiGraph.extend_from_edge_list", "rustworkx.PyDiGraph.extend_from_weighted_edge_list", "rustworkx.PyDiGraph.filter_edges", "rustworkx.PyDiGraph.filter_nodes", "rustworkx.PyDiGraph.find_adjacent_node_by_edge", "rustworkx.PyDiGraph.find_node_by_weight", "rustworkx.PyDiGraph.find_predecessor_node_by_edge", "rustworkx.PyDiGraph.find_predecessors_by_edge", "rustworkx.PyDiGraph.find_successors_by_edge", "rustworkx.PyDiGraph.from_adjacency_matrix", "rustworkx.PyDiGraph.from_complex_adjacency_matrix", "rustworkx.PyDiGraph.get_all_edge_data", "rustworkx.PyDiGraph.get_edge_data", "rustworkx.PyDiGraph.get_edge_data_by_index", "rustworkx.PyDiGraph.get_edge_endpoints_by_index", "rustworkx.PyDiGraph.get_node_data", "rustworkx.PyDiGraph.has_edge", "rustworkx.PyDiGraph.has_node", "rustworkx.PyDiGraph.has_parallel_edges", "rustworkx.PyDiGraph.in_degree", "rustworkx.PyDiGraph.in_edges", "rustworkx.PyDiGraph.incident_edge_index_map", "rustworkx.PyDiGraph.incident_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges", "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple", "rustworkx.PyDiGraph.insert_node_on_out_edges", "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple", "rustworkx.PyDiGraph.is_symmetric", "rustworkx.PyDiGraph.make_symmetric", "rustworkx.PyDiGraph.merge_nodes", "rustworkx.PyDiGraph.neighbors", "rustworkx.PyDiGraph.neighbors_undirected", "rustworkx.PyDiGraph.node_indexes", "rustworkx.PyDiGraph.node_indices", "rustworkx.PyDiGraph.nodes", "rustworkx.PyDiGraph.num_edges", "rustworkx.PyDiGraph.num_nodes", "rustworkx.PyDiGraph.out_degree", "rustworkx.PyDiGraph.out_edges", "rustworkx.PyDiGraph.predecessor_indices", "rustworkx.PyDiGraph.predecessors", "rustworkx.PyDiGraph.read_edge_list", "rustworkx.PyDiGraph.remove_edge", "rustworkx.PyDiGraph.remove_edge_from_index", "rustworkx.PyDiGraph.remove_edges_from", "rustworkx.PyDiGraph.remove_node", "rustworkx.PyDiGraph.remove_node_retain_edges", "rustworkx.PyDiGraph.remove_node_retain_edges_by_id", "rustworkx.PyDiGraph.remove_node_retain_edges_by_key", "rustworkx.PyDiGraph.remove_nodes_from", "rustworkx.PyDiGraph.reverse", "rustworkx.PyDiGraph.subgraph", "rustworkx.PyDiGraph.substitute_node_with_subgraph", "rustworkx.PyDiGraph.successor_indices", "rustworkx.PyDiGraph.successors", "rustworkx.PyDiGraph.to_dot", "rustworkx.PyDiGraph.to_undirected", "rustworkx.PyDiGraph.update_edge", "rustworkx.PyDiGraph.update_edge_by_index", "rustworkx.PyDiGraph.weighted_edge_list", "rustworkx.PyDiGraph.write_edge_list", "PyGraph", "rustworkx.PyGraph.add_edge", "rustworkx.PyGraph.add_edges_from", "rustworkx.PyGraph.add_edges_from_no_data", "rustworkx.PyGraph.add_node", "rustworkx.PyGraph.add_nodes_from", "rustworkx.PyGraph.adj", "rustworkx.PyGraph.clear", "rustworkx.PyGraph.clear_edges", "rustworkx.PyGraph.compose", "rustworkx.PyGraph.contract_nodes", "rustworkx.PyGraph.copy", "rustworkx.PyGraph.degree", "rustworkx.PyGraph.edge_index_map", "rustworkx.PyGraph.edge_indices", "rustworkx.PyGraph.edge_indices_from_endpoints", "rustworkx.PyGraph.edge_list", "rustworkx.PyGraph.edge_subgraph", "rustworkx.PyGraph.edges", "rustworkx.PyGraph.extend_from_edge_list", "rustworkx.PyGraph.extend_from_weighted_edge_list", "rustworkx.PyGraph.filter_edges", "rustworkx.PyGraph.filter_nodes", "rustworkx.PyGraph.find_node_by_weight", "rustworkx.PyGraph.from_adjacency_matrix", "rustworkx.PyGraph.from_complex_adjacency_matrix", "rustworkx.PyGraph.get_all_edge_data", "rustworkx.PyGraph.get_edge_data", "rustworkx.PyGraph.get_edge_data_by_index", "rustworkx.PyGraph.get_edge_endpoints_by_index", "rustworkx.PyGraph.get_node_data", "rustworkx.PyGraph.has_edge", "rustworkx.PyGraph.has_node", "rustworkx.PyGraph.has_parallel_edges", "rustworkx.PyGraph.in_edges", "rustworkx.PyGraph.incident_edge_index_map", "rustworkx.PyGraph.incident_edges", "rustworkx.PyGraph.neighbors", "rustworkx.PyGraph.node_indexes", "rustworkx.PyGraph.node_indices", "rustworkx.PyGraph.nodes", "rustworkx.PyGraph.num_edges", "rustworkx.PyGraph.num_nodes", "rustworkx.PyGraph.out_edges", "rustworkx.PyGraph.read_edge_list", "rustworkx.PyGraph.remove_edge", "rustworkx.PyGraph.remove_edge_from_index", "rustworkx.PyGraph.remove_edges_from", "rustworkx.PyGraph.remove_node", "rustworkx.PyGraph.remove_nodes_from", "rustworkx.PyGraph.subgraph", "rustworkx.PyGraph.substitute_node_with_subgraph", "rustworkx.PyGraph.to_directed", "rustworkx.PyGraph.to_dot", "rustworkx.PyGraph.update_edge", "rustworkx.PyGraph.update_edge_by_index", "rustworkx.PyGraph.weighted_edge_list", "rustworkx.PyGraph.write_edge_list", "RelationalCoarsestPartition", "TopologicalSorter", "rustworkx.TopologicalSorter.done", "rustworkx.TopologicalSorter.get_ready", "rustworkx.TopologicalSorter.is_active", "WeightedEdgeList", "rustworkx.adjacency_matrix", "rustworkx.all_pairs_all_simple_paths", "rustworkx.all_pairs_bellman_ford_path_lengths", "rustworkx.all_pairs_bellman_ford_shortest_paths", "rustworkx.all_pairs_dijkstra_path_lengths", "rustworkx.all_pairs_dijkstra_shortest_paths", "rustworkx.all_shortest_paths", "rustworkx.all_simple_paths", "rustworkx.ancestors", "rustworkx.articulation_points", "rustworkx.astar_shortest_path", "rustworkx.barabasi_albert_graph", "rustworkx.bellman_ford_shortest_path_lengths", "rustworkx.bellman_ford_shortest_paths", "rustworkx.betweenness_centrality", "rustworkx.bfs_predecessors", "rustworkx.bfs_search", "rustworkx.bfs_successors", "rustworkx.biconnected_components", "rustworkx.bipartite_layout", "rustworkx.bridges", "rustworkx.cartesian_product", "rustworkx.chain_decomposition", "rustworkx.circular_layout", "rustworkx.closeness_centrality", "rustworkx.collect_bicolor_runs", "rustworkx.collect_runs", "rustworkx.complement", "rustworkx.connected_components", "rustworkx.connected_subgraphs", "rustworkx.core_number", "rustworkx.cycle_basis", "rustworkx.dag_longest_path", "rustworkx.dag_longest_path_length", "rustworkx.dag_weighted_longest_path", "rustworkx.dag_weighted_longest_path_length", "rustworkx.descendants", "rustworkx.dfs_edges", "rustworkx.dfs_search", "rustworkx.digraph_adjacency_matrix", "rustworkx.digraph_all_pairs_all_simple_paths", "rustworkx.digraph_all_pairs_bellman_ford_path_lengths", "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths", "rustworkx.digraph_all_pairs_dijkstra_path_lengths", "rustworkx.digraph_all_pairs_dijkstra_shortest_paths", "rustworkx.digraph_all_shortest_paths", "rustworkx.digraph_all_simple_paths", "rustworkx.digraph_astar_shortest_path", "rustworkx.digraph_bellman_ford_shortest_path_lengths", "rustworkx.digraph_betweenness_centrality", "rustworkx.digraph_bfs_search", "rustworkx.digraph_bipartite_layout", "rustworkx.digraph_cartesian_product", "rustworkx.digraph_circular_layout", "rustworkx.digraph_closeness_centrality", "rustworkx.digraph_complement", "rustworkx.digraph_core_number", "rustworkx.digraph_dfs_edges", "rustworkx.digraph_dfs_search", "rustworkx.digraph_dijkstra_search", "rustworkx.digraph_dijkstra_shortest_path_lengths", "rustworkx.digraph_dijkstra_shortest_paths", "rustworkx.digraph_distance_matrix", "rustworkx.digraph_edge_betweenness_centrality", "rustworkx.digraph_eigenvector_centrality", "rustworkx.digraph_find_cycle", "rustworkx.digraph_floyd_warshall", "rustworkx.digraph_floyd_warshall_numpy", "rustworkx.digraph_floyd_warshall_successor_and_distance", "rustworkx.digraph_is_isomorphic", "rustworkx.digraph_is_subgraph_isomorphic", "rustworkx.digraph_k_shortest_path_lengths", "rustworkx.digraph_katz_centrality", "rustworkx.digraph_longest_simple_path", "rustworkx.digraph_maximum_bisimulation", "rustworkx.digraph_node_link_json", "rustworkx.digraph_num_shortest_paths_unweighted", "rustworkx.digraph_random_layout", "rustworkx.digraph_shell_layout", "rustworkx.digraph_spiral_layout", "rustworkx.digraph_spring_layout", "rustworkx.digraph_tensor_product", "rustworkx.digraph_transitivity", "rustworkx.digraph_union", "rustworkx.digraph_unweighted_average_shortest_path_length", "rustworkx.digraph_vf2_mapping", "rustworkx.dijkstra_search", "rustworkx.dijkstra_shortest_path_lengths", "rustworkx.dijkstra_shortest_paths", "rustworkx.directed_barabasi_albert_graph", "rustworkx.directed_gnm_random_graph", "rustworkx.directed_gnp_random_graph", "rustworkx.directed_random_bipartite_graph", "rustworkx.directed_sbm_random_graph", "rustworkx.distance_matrix", "rustworkx.edge_betweenness_centrality", "rustworkx.eigenvector_centrality", "rustworkx.find_negative_cycle", "rustworkx.floyd_warshall", "rustworkx.floyd_warshall_numpy", "rustworkx.floyd_warshall_successor_and_distance", "rustworkx.from_node_link_json_file", "rustworkx.generators.barbell_graph", "rustworkx.generators.binomial_tree_graph", "rustworkx.generators.complete_graph", "rustworkx.generators.cycle_graph", "rustworkx.generators.directed_binomial_tree_graph", "rustworkx.generators.directed_complete_graph", "rustworkx.generators.directed_cycle_graph", "rustworkx.generators.directed_empty_graph", "rustworkx.generators.directed_grid_graph", "rustworkx.generators.directed_heavy_hex_graph", "rustworkx.generators.directed_heavy_square_graph", "rustworkx.generators.directed_hexagonal_lattice_graph", "rustworkx.generators.directed_mesh_graph", "rustworkx.generators.directed_path_graph", "rustworkx.generators.directed_star_graph", "rustworkx.generators.dorogovtsev_goltsev_mendes_graph", "rustworkx.generators.empty_graph", "rustworkx.generators.full_rary_tree", "rustworkx.generators.generalized_petersen_graph", "rustworkx.generators.grid_graph", "rustworkx.generators.heavy_hex_graph", "rustworkx.generators.heavy_square_graph", "rustworkx.generators.hexagonal_lattice_graph", "rustworkx.generators.lollipop_graph", "rustworkx.generators.mesh_graph", "rustworkx.generators.path_graph", "rustworkx.generators.star_graph", "rustworkx.graph_adjacency_matrix", "rustworkx.graph_all_pairs_all_simple_paths", "rustworkx.graph_all_pairs_bellman_ford_path_lengths", "rustworkx.graph_all_pairs_bellman_ford_shortest_paths", "rustworkx.graph_all_pairs_dijkstra_path_lengths", "rustworkx.graph_all_pairs_dijkstra_shortest_paths", "rustworkx.graph_all_shortest_paths", "rustworkx.graph_all_simple_paths", "rustworkx.graph_astar_shortest_path", "rustworkx.graph_bellman_ford_shortest_path_lengths", "rustworkx.graph_betweenness_centrality", "rustworkx.graph_bfs_search", "rustworkx.graph_bipartite_edge_color", "rustworkx.graph_bipartite_layout", "rustworkx.graph_cartesian_product", "rustworkx.graph_circular_layout", "rustworkx.graph_closeness_centrality", "rustworkx.graph_complement", "rustworkx.graph_core_number", "rustworkx.graph_dfs_edges", "rustworkx.graph_dfs_search", "rustworkx.graph_dijkstra_search", "rustworkx.graph_dijkstra_shortest_path_lengths", "rustworkx.graph_dijkstra_shortest_paths", "rustworkx.graph_distance_matrix", "rustworkx.graph_edge_betweenness_centrality", "rustworkx.graph_eigenvector_centrality", "rustworkx.graph_floyd_warshall", "rustworkx.graph_floyd_warshall_numpy", "rustworkx.graph_floyd_warshall_successor_and_distance", "rustworkx.graph_greedy_color", "rustworkx.graph_greedy_edge_color", "rustworkx.graph_is_isomorphic", "rustworkx.graph_is_subgraph_isomorphic", "rustworkx.graph_k_shortest_path_lengths", "rustworkx.graph_katz_centrality", "rustworkx.graph_line_graph", "rustworkx.graph_longest_simple_path", "rustworkx.graph_misra_gries_edge_color", "rustworkx.graph_node_link_json", "rustworkx.graph_num_shortest_paths_unweighted", "rustworkx.graph_random_layout", "rustworkx.graph_shell_layout", "rustworkx.graph_spiral_layout", "rustworkx.graph_spring_layout", "rustworkx.graph_tensor_product", "rustworkx.graph_token_swapper", "rustworkx.graph_transitivity", "rustworkx.graph_union", "rustworkx.graph_unweighted_average_shortest_path_length", "rustworkx.graph_vf2_mapping", "rustworkx.has_path", "rustworkx.hits", "rustworkx.hyperbolic_random_graph", "rustworkx.is_bipartite", "rustworkx.is_connected", "rustworkx.is_directed_acyclic_graph", "rustworkx.is_isomorphic", "rustworkx.is_isomorphic_node_match", "rustworkx.is_matching", "rustworkx.is_maximal_matching", "rustworkx.is_planar", "rustworkx.is_subgraph_isomorphic", "rustworkx.is_weakly_connected", "rustworkx.isolates", "rustworkx.k_shortest_path_lengths", "rustworkx.katz_centrality", "rustworkx.layers", "rustworkx.lexicographical_topological_sort", "rustworkx.longest_simple_path", "rustworkx.max_weight_matching", "rustworkx.metric_closure", "rustworkx.minimum_spanning_edges", "rustworkx.minimum_spanning_tree", "rustworkx.negative_edge_cycle", "rustworkx.networkx_converter", "rustworkx.node_connected_component", "rustworkx.node_link_json", "rustworkx.num_shortest_paths_unweighted", "rustworkx.number_connected_components", "rustworkx.number_weakly_connected_components", "rustworkx.pagerank", "rustworkx.parse_node_link_json", "rustworkx.random_geometric_graph", "rustworkx.random_layout", "rustworkx.read_graphml", "rustworkx.shell_layout", "rustworkx.simple_cycles", "rustworkx.spiral_layout", "rustworkx.spring_layout", "rustworkx.steiner_tree", "rustworkx.stoer_wagner_min_cut", "rustworkx.strongly_connected_components", "rustworkx.topological_generations", "rustworkx.topological_sort", "rustworkx.transitive_reduction", "rustworkx.transitivity", "rustworkx.two_color", "rustworkx.undirected_gnm_random_graph", "rustworkx.undirected_gnp_random_graph", "rustworkx.undirected_random_bipartite_graph", "rustworkx.undirected_sbm_random_graph", "rustworkx.union", "rustworkx.unweighted_average_shortest_path_length", "rustworkx.vf2_mapping", "BFSVisitor", "rustworkx.visit.BFSVisitor.black_target_edge", "rustworkx.visit.BFSVisitor.discover_vertex", "rustworkx.visit.BFSVisitor.finish_vertex", "rustworkx.visit.BFSVisitor.gray_target_edge", "rustworkx.visit.BFSVisitor.non_tree_edge", "rustworkx.visit.BFSVisitor.tree_edge", "DFSVisitor", "rustworkx.visit.DFSVisitor.back_edge", "rustworkx.visit.DFSVisitor.discover_vertex", "rustworkx.visit.DFSVisitor.finish_vertex", "rustworkx.visit.DFSVisitor.forward_or_cross_edge", "rustworkx.visit.DFSVisitor.tree_edge", "DijkstraVisitor", "rustworkx.visit.DijkstraVisitor.discover_vertex", "rustworkx.visit.DijkstraVisitor.edge_not_relaxed", "rustworkx.visit.DijkstraVisitor.edge_relaxed", "rustworkx.visit.DijkstraVisitor.examine_edge", "rustworkx.visit.DijkstraVisitor.finish_vertex", "rustworkx.visit.PruneSearch", "rustworkx.visit.StopSearch", "rustworkx.visualization.graphviz_draw", "rustworkx.visualization.mpl_draw", "rustworkx.weakly_connected_components", "Rustworkx Comparison Benchmarks With Other Libraries", "rustworkx Documentation", "Getting Started", "rustworkx for NetworkX users", "Release Notes", "Working with Betweenness Centrality", "Directed Acyclic Graphs", "rustworkx Tutorials and Guides", "Introduction to rustworkx", "Visualization"], "terms": {"first": [0, 44, 100, 114, 120, 121, 150, 166, 182, 196, 202, 203, 232, 248, 261, 275, 278, 279, 283, 295, 296, 306, 311, 331, 332, 333, 337, 338, 353, 354, 366, 368, 373, 374, 381, 384, 385, 386, 397, 399, 401, 416, 421, 424, 431, 432, 443, 444, 456, 459, 464, 465, 474, 475, 476, 477, 478, 490, 493, 495, 497, 502, 503, 507, 512, 547, 549, 552, 559, 564, 574, 578, 579, 580, 582], "read": [0, 25, 29, 33, 34, 35, 39, 43, 47, 51, 55, 56, 58, 66, 72, 76, 84, 103, 150, 169, 185, 232, 251, 265, 296, 309, 310, 315, 318, 319, 320, 321, 328, 329, 337, 357, 358, 359, 360, 364, 365, 368, 379, 380, 382, 388, 397, 411, 412, 414, 447, 448, 449, 450, 454, 455, 459, 470, 471, 472, 480, 490, 497, 511, 526, 530, 577, 578, 582], "overal": 0, "qiskit": [0, 575, 577, 578], "project": [0, 526, 577, 578], "guidelin": 0, "These": [0, 21, 22, 88, 170, 252, 576, 577, 578, 582], "ar": [0, 21, 22, 33, 34, 56, 76, 88, 91, 92, 96, 97, 100, 101, 106, 109, 110, 118, 119, 132, 133, 134, 135, 137, 150, 151, 153, 155, 156, 157, 160, 166, 168, 170, 173, 174, 178, 179, 182, 183, 188, 191, 192, 200, 201, 214, 215, 216, 217, 219, 232, 233, 235, 237, 238, 239, 242, 248, 250, 252, 254, 255, 258, 261, 262, 268, 271, 272, 276, 277, 279, 296, 297, 299, 302, 304, 306, 308, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 327, 329, 332, 334, 336, 337, 338, 340, 343, 346, 347, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 368, 370, 371, 372, 373, 374, 375, 377, 379, 380, 382, 383, 384, 385, 386, 388, 389, 396, 397, 398, 399, 401, 402, 404, 405, 406, 409, 411, 412, 414, 415, 416, 418, 420, 421, 423, 424, 426, 429, 430, 431, 432, 436, 437, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 459, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 489, 490, 491, 492, 493, 495, 497, 498, 501, 502, 503, 507, 509, 511, 512, 513, 514, 515, 517, 518, 526, 528, 530, 534, 538, 541, 543, 546, 547, 549, 558, 571, 572, 574, 575, 576, 577, 578, 579, 580, 582], "all": [0, 25, 29, 96, 97, 98, 99, 102, 104, 105, 107, 108, 116, 117, 120, 129, 132, 133, 134, 135, 137, 138, 141, 142, 143, 147, 149, 155, 156, 157, 159, 163, 165, 166, 178, 179, 180, 181, 184, 186, 187, 189, 190, 198, 199, 202, 211, 214, 215, 216, 217, 219, 220, 223, 224, 225, 229, 231, 237, 238, 239, 241, 245, 247, 248, 258, 259, 260, 263, 266, 267, 269, 270, 278, 279, 286, 290, 291, 292, 295, 304, 306, 311, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 330, 332, 334, 338, 340, 341, 342, 345, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 370, 373, 374, 375, 379, 380, 382, 383, 384, 388, 389, 398, 399, 400, 401, 402, 405, 406, 407, 408, 411, 412, 414, 415, 416, 426, 437, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 461, 464, 465, 466, 470, 471, 472, 473, 474, 480, 482, 493, 494, 495, 498, 511, 513, 514, 515, 517, 518, 532, 535, 536, 540, 543, 544, 545, 547, 548, 549, 553, 560, 568, 571, 572, 575, 576, 578, 580, 582], "includ": [0, 116, 117, 160, 161, 198, 199, 242, 243, 302, 303, 317, 323, 330, 356, 362, 365, 391, 400, 446, 452, 455, 484, 494, 522, 548, 575, 576, 577, 578, 580, 582], "http": [0, 338, 380, 388, 407, 412, 427, 428, 433, 436, 438, 439, 457, 471, 480, 483, 491, 497, 506, 511, 526, 530, 532, 535, 544, 575, 577, 578], "github": [0, 407, 532, 544, 574, 575, 577, 578], "com": [0, 388, 407, 480, 511, 532, 535, 544, 575, 577, 578], "blob": [0, 407, 532, 544], "main": [0, 578], "md": 0, "while": [0, 118, 119, 200, 201, 276, 277, 311, 324, 332, 352, 353, 354, 366, 373, 374, 375, 384, 385, 386, 396, 400, 401, 402, 416, 456, 464, 465, 466, 474, 477, 478, 489, 495, 502, 507, 530, 534, 538, 539, 548, 549, 569, 571, 575, 577, 578, 580], "": [0, 88, 101, 111, 112, 161, 166, 167, 169, 170, 183, 193, 194, 243, 248, 249, 251, 252, 262, 273, 274, 303, 306, 307, 309, 311, 318, 319, 320, 321, 322, 326, 328, 329, 330, 331, 332, 333, 337, 340, 346, 348, 349, 350, 351, 353, 354, 357, 358, 359, 360, 361, 363, 364, 365, 366, 368, 370, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 386, 388, 396, 399, 400, 402, 403, 404, 411, 412, 413, 414, 415, 416, 419, 422, 427, 428, 433, 438, 439, 447, 448, 449, 450, 451, 453, 454, 455, 456, 459, 461, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 478, 480, 483, 489, 491, 493, 494, 497, 499, 507, 511, 513, 516, 517, 518, 519, 526, 532, 534, 535, 536, 537, 541, 547, 548, 564, 571, 572, 575, 576, 577, 578, 579, 582], "directli": [0, 157, 239, 577, 578, 582], "applic": [0, 340, 436, 530, 575, 576, 578], "sinc": [0, 114, 196, 275, 386, 478, 507, 558, 575, 577, 578, 580, 582], "most": [0, 483, 528, 577, 578, 582], "about": [0, 574, 575, 576, 578], "itself": [0, 436, 577], "an": [0, 33, 34, 43, 51, 55, 56, 58, 66, 72, 76, 88, 89, 90, 91, 92, 95, 96, 97, 100, 101, 103, 106, 107, 109, 111, 112, 113, 115, 118, 119, 121, 124, 125, 130, 131, 137, 140, 150, 151, 152, 155, 156, 157, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 182, 183, 185, 188, 189, 191, 193, 194, 195, 197, 200, 201, 203, 206, 207, 212, 213, 219, 222, 232, 233, 234, 237, 238, 239, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 261, 262, 265, 268, 269, 271, 272, 273, 274, 276, 277, 282, 283, 287, 288, 296, 297, 298, 302, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 332, 334, 335, 336, 338, 339, 340, 344, 347, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 366, 367, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 381, 385, 386, 387, 388, 390, 391, 393, 394, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 417, 418, 419, 420, 421, 422, 427, 428, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 456, 458, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 484, 486, 487, 488, 489, 491, 492, 495, 497, 498, 500, 502, 506, 507, 508, 509, 510, 511, 513, 515, 516, 519, 521, 522, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 542, 543, 544, 545, 546, 549, 558, 561, 571, 572, 574, 575, 576, 577, 578, 580, 582], "independ": [0, 407, 408, 475, 476, 520, 544, 545, 575, 578], "librari": [0, 526, 571, 575, 576, 577, 578, 582], "develop": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "tandem": 0, "advic": 0, "still": [0, 314, 406, 515, 543, 575, 576, 577, 578], "appli": [0, 491, 578, 582], "here": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "In": [0, 107, 189, 269, 316, 332, 340, 341, 354, 355, 366, 370, 374, 380, 388, 389, 407, 412, 445, 456, 461, 465, 471, 480, 482, 497, 511, 514, 526, 544, 561, 575, 577, 578, 580, 582], "addit": [0, 88, 170, 252, 341, 575, 576, 577, 578, 582], "detail": [0, 157, 239, 380, 388, 412, 436, 471, 480, 497, 511, 526, 571, 572, 575, 576, 577, 578, 582], "below": [0, 332, 353, 354, 366, 373, 374, 375, 396, 402, 418, 441, 456, 464, 465, 466, 489, 534, 577], "implement": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 157, 170, 239, 252, 310, 315, 331, 333, 380, 388, 407, 412, 428, 439, 457, 471, 480, 491, 511, 526, 530, 532, 535, 537, 544, 574, 575, 577, 578, 582], "primarili": [0, 577, 578], "thin": 0, "layer": [0, 6, 578], "becaus": [0, 164, 246, 305, 513, 577, 578, 579, 582], "your": [0, 155, 237, 419, 422, 576, 577, 578, 582], "involv": [0, 582], "modif": [0, 311], "src": 0, "To": [0, 279, 384, 416, 474, 576, 578, 579, 580, 582], "understand": 0, "which": [0, 88, 101, 111, 112, 113, 115, 116, 117, 137, 141, 156, 157, 161, 170, 183, 193, 194, 195, 197, 198, 199, 219, 223, 238, 239, 243, 252, 262, 273, 274, 290, 303, 311, 312, 316, 318, 319, 320, 321, 322, 326, 329, 332, 338, 347, 354, 355, 357, 358, 359, 360, 361, 363, 366, 374, 375, 377, 381, 382, 383, 384, 389, 390, 394, 396, 402, 404, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 456, 465, 466, 468, 472, 473, 474, 475, 482, 487, 489, 491, 498, 504, 505, 513, 514, 515, 516, 517, 518, 528, 531, 534, 535, 536, 538, 575, 576, 577, 578, 579, 580, 582], "you": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 67, 72, 76, 84, 88, 130, 131, 160, 164, 165, 166, 170, 212, 213, 242, 246, 247, 248, 252, 287, 288, 302, 305, 306, 310, 315, 317, 318, 319, 320, 321, 332, 354, 356, 357, 358, 359, 360, 366, 374, 375, 382, 383, 384, 389, 398, 402, 414, 415, 416, 446, 456, 465, 466, 472, 473, 474, 475, 476, 482, 491, 492, 514, 515, 516, 520, 535, 541, 571, 572, 575, 576, 577, 578, 579, 580, 582], "need": [0, 166, 170, 248, 252, 306, 426, 437, 571, 575, 576, 577, 578, 579, 580, 582], "we": [0, 311, 332, 354, 366, 374, 386, 456, 465, 478, 507, 559, 560, 564, 574, 577, 578, 579, 580, 582], "invit": 0, "overview": 0, "our": [0, 578, 580, 582], "simplifi": [0, 578, 580], "sourc": [0, 88, 101, 106, 107, 109, 110, 113, 115, 125, 130, 138, 161, 166, 168, 183, 188, 189, 191, 192, 195, 197, 207, 212, 220, 243, 248, 250, 268, 269, 271, 272, 287, 303, 306, 308, 316, 317, 318, 319, 320, 321, 322, 323, 326, 328, 329, 330, 331, 332, 333, 335, 337, 338, 339, 340, 343, 346, 348, 349, 350, 351, 353, 354, 356, 357, 358, 359, 360, 361, 364, 366, 373, 374, 375, 376, 377, 381, 382, 384, 392, 402, 403, 404, 410, 411, 412, 414, 415, 416, 446, 447, 448, 449, 450, 451, 454, 456, 464, 465, 466, 467, 468, 472, 474, 485, 496, 497, 499, 502, 503, 507, 509, 510, 511, 514, 520, 522, 523, 529, 531, 533, 534, 535, 541, 542, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 575, 576, 578, 580], "tree": [0, 6, 19, 332, 338, 353, 354, 366, 373, 374, 375, 402, 419, 422, 435, 456, 464, 465, 466, 517, 518, 535, 551, 554, 556, 558, 560, 562, 569, 578], "tini": [0, 578], "larg": [0, 385, 386, 407, 477, 478, 502, 503, 544, 574, 577, 578, 580], "mod": 0, "pure_rust_cod": 0, "more_pure_rust_cod": 0, "add": [0, 88, 89, 90, 91, 92, 93, 94, 95, 100, 109, 110, 132, 133, 134, 135, 155, 156, 157, 170, 171, 172, 173, 174, 175, 176, 177, 182, 191, 192, 214, 215, 216, 217, 237, 238, 239, 252, 253, 254, 255, 256, 257, 261, 271, 272, 399, 424, 431, 432, 493, 515, 520, 530, 547, 576, 577, 578, 580, 582], "them": [0, 165, 247, 311, 385, 386, 477, 478, 502, 503, 507, 578, 582], "import": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 111, 112, 140, 150, 159, 164, 169, 170, 182, 193, 194, 222, 232, 241, 246, 251, 252, 261, 273, 274, 296, 305, 309, 310, 311, 315, 332, 354, 366, 368, 374, 389, 397, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 456, 459, 465, 475, 476, 481, 482, 483, 490, 514, 571, 572, 576, 577, 578, 579, 580], "defin": [0, 318, 319, 328, 329, 340, 347, 357, 358, 364, 370, 398, 426, 437, 447, 448, 454, 461, 492, 536, 578, 579, 580], "see": [0, 338, 409, 436, 530, 546, 572, 574, 575, 578, 582], "next": [0, 33, 34, 43, 55, 56, 58, 66, 72, 76, 310, 315, 326, 353, 363, 373, 384, 401, 416, 453, 464, 474, 491, 495, 549, 578], "section": [0, 44, 581, 582], "us": [0, 33, 34, 43, 51, 55, 56, 58, 66, 72, 76, 80, 88, 90, 92, 96, 97, 100, 101, 113, 115, 116, 117, 118, 119, 129, 137, 147, 150, 155, 157, 160, 161, 164, 165, 166, 169, 170, 172, 174, 178, 179, 182, 183, 195, 197, 198, 199, 200, 201, 211, 219, 229, 232, 237, 239, 242, 243, 246, 247, 248, 251, 252, 254, 255, 261, 262, 272, 276, 277, 279, 286, 295, 296, 302, 303, 305, 306, 309, 310, 311, 315, 316, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 338, 340, 341, 342, 343, 348, 349, 350, 351, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 396, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 423, 424, 430, 431, 432, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 483, 484, 489, 491, 492, 494, 495, 496, 497, 498, 502, 503, 506, 507, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 526, 527, 528, 530, 534, 535, 536, 537, 541, 543, 544, 545, 546, 548, 549, 550, 557, 563, 571, 572, 574, 575, 577, 578, 579, 580, 581], "m": [0, 327, 338, 405, 406, 407, 408, 435, 457, 543, 544, 545, 574, 578, 580], "add_wrap": 0, "wrap_pyfunct": 0, "your_new_funct": 0, "modifi": [0, 101, 159, 170, 183, 241, 252, 327, 405, 578], "contain": [0, 25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 88, 107, 170, 189, 252, 269, 310, 311, 315, 331, 333, 338, 346, 353, 372, 373, 388, 409, 426, 437, 463, 464, 480, 481, 497, 511, 513, 520, 521, 536, 540, 546, 577, 578, 580, 581, 582], "pyfunct": 0, "can": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "either": [0, 97, 161, 165, 179, 243, 247, 303, 314, 316, 318, 319, 320, 321, 323, 326, 328, 329, 335, 339, 340, 343, 346, 353, 355, 370, 391, 401, 403, 404, 410, 412, 414, 415, 429, 436, 440, 445, 461, 475, 476, 484, 495, 496, 502, 503, 507, 510, 511, 520, 522, 531, 533, 534, 541, 548, 549, 572, 577, 578, 580], "The": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "give": [0, 311, 341, 513, 578, 580], "power": [0, 380, 388, 412, 471, 480, 497, 511, 526, 582], "interact": [0, 572, 575, 577, 578], "both": [0, 21, 22, 130, 131, 212, 213, 385, 386, 418, 420, 421, 422, 423, 424, 426, 428, 429, 430, 431, 432, 438, 441, 442, 443, 444, 477, 478, 502, 503, 507, 509, 515, 520, 558, 577, 578, 580, 582], "interpret": [0, 578], "pure": [0, 575], "exist": [0, 88, 107, 141, 170, 189, 223, 252, 253, 254, 255, 269, 271, 272, 290, 327, 386, 401, 405, 413, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 478, 495, 496, 507, 519, 549, 577, 578, 582], "search": [0, 113, 114, 115, 195, 196, 197, 275, 311, 331, 332, 333, 338, 353, 354, 366, 373, 374, 375, 385, 386, 389, 401, 402, 456, 464, 465, 466, 477, 478, 482, 495, 502, 507, 514, 549, 556, 562, 569, 578], "its": [0, 122, 123, 131, 132, 134, 204, 205, 213, 214, 216, 280, 281, 288, 325, 330, 340, 370, 461, 475, 476, 515, 540, 553, 568, 574, 578, 579, 580, 582], "name": [0, 150, 232, 296, 575, 577, 578, 582], "edit": 0, "alreadi": [0, 137, 219, 253, 254, 255, 271, 272, 311, 312, 313, 475, 476, 558, 577, 578, 582], "If": [0, 33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 88, 101, 109, 110, 114, 116, 117, 118, 119, 130, 131, 137, 138, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 166, 169, 170, 183, 191, 192, 196, 198, 199, 200, 201, 212, 213, 219, 220, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 246, 247, 248, 251, 252, 253, 254, 255, 262, 271, 272, 275, 276, 277, 287, 288, 296, 297, 299, 300, 301, 302, 303, 305, 306, 309, 310, 311, 312, 315, 316, 322, 327, 329, 330, 332, 338, 340, 341, 342, 345, 348, 349, 350, 351, 353, 354, 355, 356, 361, 365, 366, 370, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 391, 392, 395, 396, 399, 400, 401, 402, 404, 405, 406, 407, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 451, 455, 456, 457, 461, 464, 465, 466, 468, 469, 470, 471, 473, 474, 475, 476, 477, 478, 480, 482, 484, 485, 488, 489, 491, 493, 494, 495, 496, 497, 498, 500, 502, 503, 507, 508, 511, 512, 513, 514, 515, 517, 518, 520, 522, 523, 526, 527, 528, 533, 534, 536, 542, 543, 544, 547, 548, 549, 560, 571, 572, 576, 577, 578, 579, 580, 582], "want": [0, 33, 34, 43, 55, 56, 58, 66, 72, 76, 310, 315, 578, 582], "find": [0, 97, 113, 114, 115, 128, 146, 179, 195, 196, 197, 210, 228, 264, 275, 317, 319, 321, 322, 323, 326, 328, 329, 341, 342, 344, 345, 347, 348, 349, 350, 351, 356, 358, 360, 361, 362, 363, 364, 376, 377, 381, 382, 383, 384, 387, 389, 390, 392, 400, 401, 403, 404, 413, 414, 415, 416, 446, 448, 450, 451, 452, 453, 454, 457, 467, 468, 472, 473, 474, 475, 476, 479, 482, 485, 495, 496, 509, 510, 514, 515, 516, 517, 518, 523, 524, 525, 532, 537, 542, 548, 549, 573, 575, 578, 580, 582], "d": [0, 100, 182, 261, 340, 370, 375, 400, 402, 427, 428, 438, 439, 461, 466, 481, 483, 494, 498, 548, 572, 574, 578, 580], "like": [0, 101, 130, 131, 183, 212, 213, 262, 317, 323, 356, 362, 365, 378, 379, 380, 388, 389, 410, 411, 412, 446, 452, 455, 469, 470, 471, 480, 482, 497, 511, 514, 526, 572, 576, 577, 578, 580, 582], "insert": [0, 132, 133, 134, 135, 137, 214, 215, 216, 217, 219, 375, 402, 466, 578], "creat": [0, 88, 89, 90, 91, 92, 93, 94, 95, 101, 118, 119, 132, 133, 134, 135, 137, 150, 156, 157, 161, 165, 170, 171, 172, 173, 174, 175, 176, 177, 183, 200, 201, 214, 215, 216, 217, 219, 232, 238, 239, 243, 247, 252, 253, 254, 255, 256, 257, 262, 276, 277, 296, 303, 304, 311, 327, 343, 371, 405, 406, 407, 408, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 462, 528, 543, 544, 545, 572, 574, 575, 577, 578, 580], "one": [0, 96, 97, 100, 101, 114, 116, 117, 132, 133, 134, 135, 137, 151, 153, 155, 157, 166, 178, 179, 182, 183, 196, 198, 199, 214, 215, 216, 217, 219, 233, 235, 237, 239, 248, 261, 262, 275, 279, 297, 299, 306, 312, 334, 340, 341, 342, 370, 384, 385, 386, 389, 401, 416, 433, 461, 474, 475, 476, 477, 478, 482, 495, 502, 503, 507, 514, 526, 536, 549, 572, 575, 577, 578, 580, 582], "your_modul": 0, "Then": [0, 100, 182, 261, 578], "start": [0, 100, 105, 182, 187, 261, 267, 311, 312, 322, 327, 332, 347, 353, 354, 361, 366, 373, 374, 375, 387, 394, 402, 405, 433, 451, 456, 464, 465, 466, 479, 487, 497, 510, 513, 526, 531, 575, 578, 579, 580, 582], "boilerpl": 0, "bellow": 0, "docstr": [0, 577], "descript": 0, "pyo3": [0, 164, 246, 305, 578], "text_signatur": 0, "graph": [0, 6, 19, 21, 22, 25, 29, 33, 34, 43, 44, 51, 55, 56, 58, 66, 72, 76, 80, 88, 89, 91, 92, 93, 94, 100, 101, 102, 104, 107, 108, 109, 110, 111, 112, 114, 118, 119, 126, 127, 130, 131, 136, 137, 138, 140, 141, 142, 143, 144, 145, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 164, 165, 166, 169, 170, 171, 173, 174, 175, 176, 182, 183, 184, 186, 189, 190, 191, 192, 193, 194, 196, 200, 201, 208, 209, 212, 213, 218, 219, 220, 222, 223, 224, 225, 226, 227, 232, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 251, 252, 254, 255, 256, 257, 261, 262, 263, 266, 269, 270, 271, 272, 273, 274, 275, 276, 277, 285, 287, 288, 290, 291, 292, 293, 294, 296, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 555, 558, 561, 569, 570, 571, 572, 573, 575, 576, 578, 581], "pub": [0, 526], "fn": 0, "py": [0, 407, 532, 544], "pygraph": [0, 19, 88, 111, 160, 165, 170, 193, 242, 247, 316, 317, 318, 319, 320, 321, 323, 325, 326, 327, 328, 329, 332, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 346, 347, 353, 354, 370, 374, 379, 387, 396, 397, 402, 403, 404, 410, 411, 412, 414, 415, 417, 418, 419, 420, 421, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 500, 502, 503, 506, 507, 510, 511, 514, 515, 516, 517, 518, 520, 521, 522, 524, 527, 528, 529, 530, 531, 533, 534, 535, 536, 540, 541, 543, 544, 545, 546, 547, 548, 571, 572, 575, 576, 577, 578, 582], "pyresult": 0, "goe": [0, 407, 544], "rememb": 0, "declar": 0, "sometim": [0, 396, 435, 489, 534], "hard": [0, 475, 491, 578], "organ": 0, "those": [0, 107, 111, 112, 132, 133, 134, 135, 189, 193, 194, 214, 215, 216, 217, 269, 273, 274, 313, 330, 334, 337, 365, 368, 379, 397, 411, 455, 459, 470, 490, 535, 577, 578, 579, 580, 582], "case": [0, 96, 97, 107, 114, 156, 157, 178, 179, 189, 196, 238, 239, 253, 258, 269, 275, 316, 332, 340, 355, 366, 370, 375, 380, 388, 389, 402, 412, 445, 456, 461, 466, 471, 475, 476, 480, 482, 497, 511, 514, 526, 577, 578, 580, 582], "suggest": 0, "move": [0, 396, 489, 534, 578], "split": 0, "follow": [0, 88, 170, 252, 311, 332, 338, 354, 366, 374, 433, 456, 457, 465, 538, 578, 580, 582], "structur": [0, 340, 385, 386, 477, 478, 502, 503, 507, 530, 575, 577, 578, 582], "have": [0, 51, 67, 80, 88, 101, 102, 137, 138, 154, 155, 156, 157, 161, 165, 170, 183, 184, 219, 220, 236, 237, 238, 239, 243, 247, 252, 263, 300, 303, 304, 311, 313, 314, 324, 327, 328, 352, 364, 376, 386, 403, 405, 406, 409, 454, 467, 478, 481, 501, 507, 513, 515, 526, 536, 543, 546, 553, 560, 568, 576, 577, 578, 580, 582], "deleg": 0, "logic": [0, 311], "call": [0, 21, 22, 88, 129, 140, 147, 157, 170, 211, 222, 229, 239, 252, 286, 295, 311, 312, 313, 332, 338, 354, 366, 374, 375, 396, 402, 408, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 456, 457, 465, 466, 489, 498, 532, 534, 545, 560, 561, 575, 576, 577, 578, 580, 582], "from": [0, 21, 22, 25, 29, 33, 34, 88, 89, 95, 100, 101, 103, 107, 109, 110, 111, 112, 113, 115, 118, 119, 125, 130, 131, 132, 133, 134, 135, 137, 138, 150, 153, 154, 155, 156, 157, 158, 160, 161, 164, 165, 169, 170, 171, 177, 182, 183, 185, 189, 191, 192, 193, 194, 195, 197, 200, 201, 207, 212, 213, 214, 215, 216, 217, 219, 220, 232, 235, 236, 237, 238, 239, 240, 242, 243, 246, 247, 251, 252, 254, 261, 262, 265, 269, 271, 272, 273, 274, 276, 277, 287, 288, 296, 299, 300, 301, 302, 303, 304, 305, 309, 311, 316, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 331, 332, 333, 337, 338, 347, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 373, 374, 375, 376, 377, 378, 381, 387, 388, 389, 392, 395, 397, 399, 400, 401, 403, 404, 405, 408, 409, 410, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 459, 464, 465, 466, 467, 468, 469, 475, 479, 480, 482, 485, 488, 490, 493, 494, 495, 496, 498, 510, 511, 512, 513, 514, 516, 520, 523, 530, 533, 538, 539, 540, 546, 547, 548, 549, 551, 564, 571, 572, 574, 575, 576, 578, 579, 580], "do": [0, 88, 165, 170, 247, 311, 386, 475, 476, 478, 507, 577, 578, 582], "question": 0, "contact": 0, "u": [0, 138, 220, 332, 340, 354, 366, 370, 374, 375, 402, 409, 456, 461, 465, 466, 482, 498, 513, 546, 558, 576, 578, 580], "channel": 0, "slack": 0, "re": [0, 88, 164, 170, 246, 305, 385, 386, 396, 477, 478, 489, 502, 503, 507, 534, 577, 578, 582], "work": [0, 21, 22, 329, 404, 476, 496, 520, 571, 575, 577, 578, 580, 581, 582], "write": [0, 150, 164, 169, 232, 246, 251, 296, 305, 309, 391, 484, 522, 571, 577, 578, 582], "made": [0, 88, 138, 170, 220, 252, 313, 314, 578, 580, 582], "ani": [0, 88, 90, 101, 107, 116, 117, 118, 119, 150, 156, 157, 164, 170, 172, 183, 189, 198, 199, 200, 201, 232, 238, 239, 246, 252, 253, 262, 269, 276, 277, 296, 305, 311, 312, 325, 336, 338, 347, 380, 388, 400, 407, 412, 419, 422, 471, 475, 476, 480, 494, 497, 505, 506, 509, 511, 513, 526, 538, 544, 548, 571, 575, 576, 577, 578, 580, 582], "petgraph": [0, 578], "ha": [0, 88, 113, 114, 115, 116, 117, 127, 155, 156, 157, 170, 195, 196, 197, 198, 199, 209, 237, 238, 239, 252, 275, 285, 311, 312, 325, 332, 334, 336, 338, 346, 347, 348, 349, 350, 351, 366, 372, 374, 375, 398, 406, 407, 409, 456, 463, 465, 466, 475, 476, 492, 498, 509, 512, 513, 528, 535, 541, 543, 544, 546, 551, 560, 575, 577, 578], "depend": [0, 156, 157, 238, 239, 409, 520, 546, 572, 576, 577, 578, 580], "probabl": [0, 407, 408, 409, 498, 544, 545, 546, 576, 578], "sens": 0, "standalon": [0, 575, 578], "provid": [0, 96, 97, 101, 113, 115, 122, 123, 124, 130, 131, 152, 161, 165, 167, 178, 179, 183, 195, 197, 204, 205, 206, 212, 213, 234, 243, 247, 249, 258, 279, 280, 281, 282, 287, 288, 298, 303, 307, 311, 322, 324, 328, 331, 333, 352, 359, 360, 361, 363, 364, 376, 377, 385, 386, 387, 388, 389, 403, 406, 413, 449, 450, 451, 453, 454, 457, 467, 468, 477, 478, 479, 480, 482, 502, 503, 504, 505, 506, 507, 511, 513, 514, 516, 520, 521, 528, 535, 539, 543, 575, 576, 577, 578, 582], "api": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582], "other": [0, 6, 19, 100, 132, 133, 134, 135, 155, 157, 160, 161, 182, 214, 215, 216, 217, 237, 239, 242, 243, 261, 302, 303, 318, 319, 320, 321, 330, 357, 358, 359, 360, 365, 391, 395, 407, 430, 442, 447, 448, 449, 450, 455, 484, 488, 492, 498, 513, 522, 533, 544, 576, 577, 579, 580, 582], "unlik": [0, 67, 92, 174, 255, 577], "design": [0, 576, 577, 578], "top": [0, 335, 367, 458, 578], "algorithm": [0, 19, 21, 22, 114, 196, 275, 318, 319, 320, 321, 322, 326, 327, 328, 329, 330, 332, 334, 347, 353, 354, 357, 358, 359, 360, 361, 363, 364, 365, 366, 373, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 388, 390, 396, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 483, 489, 491, 493, 495, 497, 498, 502, 506, 507, 511, 512, 515, 517, 518, 519, 526, 532, 534, 535, 536, 537, 543, 544, 545, 546, 547, 549, 550, 557, 563, 574, 575, 577, 578, 582], "kei": [0, 96, 97, 100, 157, 164, 178, 179, 182, 239, 246, 258, 261, 305, 318, 319, 320, 321, 328, 329, 334, 337, 346, 357, 358, 359, 360, 364, 365, 368, 372, 375, 376, 377, 379, 380, 382, 387, 388, 389, 391, 396, 397, 402, 403, 404, 411, 412, 414, 417, 447, 448, 449, 450, 454, 455, 457, 459, 463, 466, 467, 468, 470, 471, 472, 475, 476, 479, 480, 481, 482, 483, 484, 489, 490, 497, 510, 511, 513, 514, 520, 522, 526, 527, 534, 571, 572, 575, 578], "differ": [0, 67, 109, 110, 118, 119, 165, 191, 192, 200, 201, 247, 271, 272, 276, 277, 304, 324, 350, 351, 352, 378, 398, 409, 410, 469, 475, 476, 513, 518, 546, 571, 575, 576, 578, 580, 582], "keep": [0, 332, 354, 366, 374, 396, 456, 465, 489, 518, 534, 577, 578, 582], "mind": [0, 577], "public": [0, 577, 578], "interfac": [0, 575, 577, 578, 582], "treat": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 118, 119, 150, 200, 201, 232, 276, 277, 296, 310, 315, 316, 329, 355, 377, 378, 382, 383, 384, 396, 400, 404, 405, 410, 416, 445, 468, 469, 489, 496, 513, 534, 548, 577, 578], "where": [0, 33, 34, 56, 76, 91, 92, 96, 97, 106, 109, 110, 155, 156, 157, 168, 173, 174, 178, 179, 188, 191, 192, 237, 238, 239, 250, 254, 255, 258, 268, 271, 272, 308, 311, 315, 316, 323, 328, 330, 337, 338, 340, 341, 342, 344, 355, 362, 364, 365, 368, 370, 376, 379, 382, 383, 384, 387, 396, 397, 400, 403, 407, 409, 411, 414, 415, 416, 418, 430, 441, 442, 445, 452, 454, 455, 457, 459, 461, 467, 470, 472, 473, 474, 475, 476, 479, 481, 483, 489, 490, 494, 498, 510, 513, 515, 517, 520, 532, 534, 535, 544, 546, 548, 573, 575, 577, 578, 579, 580, 582], "compat": [0, 88, 141, 223, 290, 366, 374, 375, 456, 465, 466, 576, 578], "doesn": [0, 107, 169, 189, 251, 269, 309, 428, 439, 501, 577, 578, 580, 582], "t": [0, 107, 138, 169, 189, 220, 251, 269, 309, 314, 322, 329, 330, 348, 349, 350, 351, 361, 365, 377, 379, 396, 400, 404, 405, 411, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 451, 455, 468, 470, 489, 494, 501, 517, 518, 526, 534, 535, 548, 559, 560, 577, 578, 579, 580, 582], "matter": 0, "onli": [0, 25, 29, 33, 34, 35, 39, 43, 47, 51, 55, 56, 58, 66, 72, 76, 84, 88, 96, 97, 103, 114, 130, 131, 151, 153, 155, 156, 157, 166, 170, 178, 179, 185, 196, 212, 213, 233, 235, 237, 238, 239, 248, 252, 258, 265, 275, 279, 297, 299, 306, 310, 311, 312, 315, 318, 319, 320, 321, 324, 328, 329, 337, 338, 341, 342, 348, 349, 350, 351, 352, 353, 357, 358, 359, 360, 364, 365, 368, 373, 376, 379, 380, 382, 388, 389, 397, 400, 403, 404, 411, 412, 414, 447, 448, 449, 450, 454, 455, 459, 464, 467, 470, 471, 472, 480, 482, 490, 494, 496, 497, 511, 513, 514, 515, 526, 540, 548, 572, 576, 577, 578, 580, 582], "addition": [0, 88, 170, 252, 577, 578, 582], "should": [0, 67, 91, 92, 155, 157, 161, 166, 173, 174, 237, 239, 243, 248, 254, 255, 303, 306, 326, 332, 354, 363, 366, 374, 375, 402, 422, 426, 428, 429, 438, 453, 456, 465, 466, 497, 502, 503, 507, 550, 557, 563, 576, 577, 578], "done": [0, 311, 313, 314, 577, 578, 580], "via": [0, 571, 577, 578, 582], "cargo": [0, 576, 578], "doc": [0, 526, 575], "It": [0, 25, 29, 33, 34, 39, 43, 47, 51, 55, 56, 58, 66, 72, 76, 80, 88, 90, 116, 117, 118, 119, 157, 159, 160, 170, 172, 198, 199, 200, 201, 239, 241, 242, 252, 253, 276, 277, 302, 310, 311, 315, 318, 319, 320, 321, 322, 325, 326, 328, 329, 334, 336, 337, 338, 341, 342, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 363, 364, 368, 372, 375, 376, 377, 378, 382, 383, 384, 389, 396, 398, 399, 400, 402, 403, 404, 410, 414, 415, 416, 447, 448, 449, 450, 451, 453, 454, 459, 463, 466, 467, 468, 469, 472, 473, 474, 482, 489, 491, 492, 493, 494, 502, 503, 507, 513, 514, 515, 526, 530, 534, 535, 541, 547, 548, 571, 575, 576, 577, 578, 580, 582], "expect": [0, 150, 161, 169, 232, 243, 251, 296, 303, 309, 316, 348, 349, 350, 351, 355, 380, 382, 383, 384, 388, 391, 407, 412, 414, 415, 416, 417, 445, 471, 472, 473, 474, 475, 476, 480, 484, 497, 511, 513, 515, 516, 517, 518, 522, 526, 527, 535, 536, 544, 571, 576, 577, 578], "also": [0, 88, 160, 170, 242, 252, 302, 304, 316, 332, 337, 348, 349, 350, 351, 354, 355, 366, 368, 374, 375, 378, 382, 383, 384, 385, 386, 397, 400, 402, 406, 407, 410, 414, 415, 416, 426, 437, 445, 456, 459, 465, 466, 469, 472, 473, 474, 477, 478, 490, 494, 498, 502, 503, 507, 517, 518, 532, 543, 544, 548, 574, 575, 576, 577, 578, 580, 582], "being": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "so": [0, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 159, 160, 161, 170, 241, 242, 243, 252, 254, 272, 302, 303, 310, 315, 408, 429, 440, 457, 545, 576, 577, 578, 579, 580, 582], "coverag": 0, "onc": [0, 157, 239, 313, 515, 532, 576, 577, 578, 582], "ve": [0, 100, 182, 261, 579, 580], "verifi": 0, "doe": [0, 88, 159, 161, 170, 241, 243, 252, 262, 303, 513, 530, 575, 577, 578, 580], "break": [0, 578], "successfulli": 0, "befor": [0, 101, 170, 183, 252, 389, 482, 513, 514, 578, 580], "open": [0, 150, 164, 169, 232, 246, 251, 296, 305, 309, 577, 578], "ll": [0, 576, 578, 579, 580], "suit": 0, "easiest": 0, "wai": [0, 558, 577, 582], "nox": [0, 578], "instal": [0, 520, 571, 572, 575, 577, 578], "pip": [0, 571, 572, 576, 578, 582], "sever": [0, 475, 476, 577, 578, 582], "advantag": [0, 575, 576, 578], "biggest": [0, 577, 578], "isol": [0, 6, 578], "virtualenv": 0, "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "mean": [0, 88, 97, 170, 179, 252, 326, 363, 386, 405, 453, 478, 492, 507, 509, 542, 575, 577, 578, 582], "pollut": 0, "system": [0, 419, 422, 575, 576, 578], "howev": [0, 88, 170, 252, 571, 575, 576, 577, 578, 582], "default": [0, 88, 118, 119, 130, 131, 137, 150, 155, 157, 160, 165, 170, 200, 201, 212, 213, 219, 232, 237, 239, 242, 247, 252, 276, 277, 296, 302, 311, 316, 317, 318, 319, 320, 321, 323, 330, 340, 355, 356, 357, 358, 359, 360, 362, 365, 366, 370, 374, 375, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 396, 398, 399, 400, 401, 402, 410, 411, 412, 414, 415, 416, 422, 424, 426, 428, 429, 431, 432, 438, 445, 446, 452, 455, 456, 461, 465, 466, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 489, 491, 492, 493, 494, 495, 497, 502, 503, 507, 511, 513, 514, 515, 526, 528, 534, 536, 541, 547, 548, 549, 550, 557, 563, 571, 572, 577, 578, 582], "recompil": [0, 578], "everi": [0, 165, 247, 311, 380, 387, 388, 408, 412, 430, 442, 471, 479, 480, 481, 497, 510, 511, 513, 516, 526, 535, 545, 567, 571, 578, 579], "time": [0, 88, 90, 155, 156, 157, 161, 170, 172, 237, 238, 239, 243, 303, 354, 374, 387, 398, 406, 407, 409, 433, 457, 465, 479, 492, 498, 510, 515, 543, 544, 546, 551, 552, 554, 559, 560, 564, 574, 576, 577, 578, 580, 582], "even": [0, 311, 312, 343, 371, 427, 428, 429, 438, 439, 440, 462, 513, 577, 578], "avoid": [0, 88, 170, 535, 580], "packag": [0, 575, 576, 578], "rerun": 0, "without": [0, 92, 106, 164, 174, 188, 246, 255, 268, 305, 325, 332, 348, 349, 350, 351, 366, 375, 402, 456, 466, 506, 509, 526, 578, 580, 582], "flag": [0, 515, 577, 582], "recent": 0, "ran": [0, 582], "repo": 0, "otherwis": [0, 127, 209, 285, 314, 385, 386, 390, 401, 477, 478, 495, 502, 503, 507, 519, 549, 578], "out": [0, 134, 135, 138, 216, 217, 220, 352, 406, 509, 543, 553, 560, 567, 568, 578], "date": 0, "miss": [0, 491, 577, 578], "outsid": [0, 576, 578, 580], "root": [0, 338, 347, 560, 576], "shim": 0, "conflict": 0, "compil": [0, 575, 576, 578], "extens": [0, 405, 530, 577, 578], "test_with_vers": 0, "target": [0, 25, 29, 39, 47, 72, 76, 101, 106, 107, 109, 110, 113, 130, 138, 161, 166, 168, 183, 188, 189, 191, 192, 195, 212, 220, 243, 248, 250, 268, 269, 271, 272, 287, 303, 306, 308, 317, 318, 319, 320, 321, 322, 329, 332, 348, 349, 350, 351, 353, 356, 357, 358, 359, 360, 361, 366, 373, 377, 382, 384, 392, 404, 414, 416, 446, 447, 448, 449, 450, 451, 456, 464, 468, 472, 474, 485, 496, 523, 551, 554, 566, 578, 580, 582], "For": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 111, 112, 140, 150, 155, 159, 164, 165, 169, 170, 182, 193, 194, 222, 232, 237, 241, 246, 247, 251, 252, 261, 273, 274, 296, 305, 309, 310, 311, 315, 317, 318, 319, 320, 321, 326, 337, 338, 348, 349, 350, 351, 356, 357, 358, 359, 360, 363, 368, 372, 380, 382, 383, 384, 385, 386, 388, 389, 397, 398, 405, 406, 407, 408, 412, 414, 415, 416, 446, 447, 448, 449, 450, 453, 459, 471, 472, 473, 474, 477, 478, 480, 482, 490, 491, 492, 497, 502, 503, 509, 511, 514, 515, 516, 526, 530, 535, 536, 541, 543, 544, 545, 558, 572, 576, 577, 578, 579, 580, 582], "exampl": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 111, 112, 140, 150, 155, 159, 164, 169, 170, 182, 193, 194, 222, 232, 237, 241, 246, 251, 252, 261, 273, 274, 296, 305, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 332, 337, 348, 349, 350, 351, 354, 355, 356, 357, 358, 359, 360, 366, 368, 374, 382, 383, 384, 385, 386, 389, 397, 398, 401, 414, 415, 416, 445, 446, 447, 448, 449, 450, 456, 459, 465, 472, 473, 474, 477, 478, 482, 490, 491, 492, 495, 502, 503, 507, 514, 515, 516, 517, 518, 535, 541, 549, 572, 576, 577, 578, 580, 582], "launch": [0, 317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 389, 398, 414, 415, 416, 446, 472, 473, 474, 482, 491, 492, 514, 541], "3": [0, 29, 51, 67, 80, 88, 103, 111, 112, 140, 150, 159, 161, 169, 170, 185, 193, 194, 222, 232, 241, 243, 251, 252, 265, 273, 274, 296, 303, 309, 311, 332, 348, 349, 350, 351, 354, 366, 368, 374, 397, 398, 401, 426, 427, 428, 429, 433, 436, 437, 438, 439, 456, 459, 465, 475, 476, 481, 483, 490, 492, 495, 515, 532, 549, 574, 577, 578, 579, 580, 582], "11": [0, 436, 575, 576], "command": [0, 571], "e": [0, 100, 139, 140, 182, 221, 222, 261, 262, 379, 387, 398, 407, 411, 433, 436, 470, 479, 491, 498, 510, 512, 526, 536, 540, 544, 551, 554, 555, 556, 558, 561, 562, 578, 580, 582], "just": [0, 88, 338, 348, 349, 350, 351, 385, 386, 477, 478, 502, 503, 507, 572, 575, 576, 577, 578, 582], "pass": [0, 111, 112, 137, 155, 157, 160, 165, 169, 193, 194, 219, 237, 239, 242, 247, 251, 273, 274, 302, 309, 316, 330, 337, 348, 349, 350, 351, 355, 365, 368, 379, 380, 382, 383, 384, 385, 386, 388, 391, 399, 401, 406, 411, 412, 414, 415, 416, 417, 445, 455, 459, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 484, 493, 495, 497, 500, 502, 503, 507, 508, 511, 513, 515, 516, 517, 518, 522, 526, 527, 535, 536, 543, 547, 549, 571, 572, 577, 578, 579, 580], "select": [0, 381, 491, 526, 582], "regex": 0, "runner": [0, 578], "dag": [0, 6, 19, 88, 91, 92, 95, 140, 164, 170, 173, 174, 177, 222, 246, 305, 311, 316, 331, 333, 348, 349, 350, 351, 355, 512, 513, 538, 539, 540, 578], "id": [0, 88, 150, 170, 232, 252, 296, 347, 381, 385, 386, 396, 401, 477, 478, 489, 495, 502, 503, 507, 512, 534, 537, 549, 578], "argument": [0, 111, 112, 116, 117, 137, 157, 170, 193, 194, 198, 199, 219, 239, 252, 273, 274, 311, 318, 319, 320, 321, 322, 329, 340, 341, 342, 348, 349, 350, 351, 355, 357, 358, 359, 360, 361, 366, 370, 374, 375, 377, 386, 396, 401, 402, 404, 409, 445, 447, 448, 449, 450, 451, 456, 461, 465, 466, 468, 478, 489, 495, 507, 513, 515, 528, 534, 546, 549, 578, 582], "after": [0, 88, 100, 161, 170, 182, 243, 252, 261, 303, 553, 560, 567, 568, 577, 578, 580, 582], "bare": 0, "option": [0, 88, 100, 101, 118, 119, 137, 150, 161, 164, 165, 169, 170, 182, 183, 200, 201, 219, 232, 243, 246, 247, 251, 252, 261, 262, 276, 277, 296, 303, 305, 309, 316, 322, 327, 328, 329, 332, 335, 338, 339, 340, 347, 353, 354, 355, 361, 364, 366, 367, 369, 370, 373, 374, 375, 376, 377, 378, 380, 381, 385, 386, 387, 388, 391, 393, 394, 395, 396, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 414, 415, 417, 445, 451, 454, 456, 458, 460, 461, 464, 465, 466, 467, 468, 469, 471, 475, 476, 477, 478, 479, 480, 484, 486, 487, 488, 489, 495, 497, 498, 502, 507, 510, 511, 515, 517, 518, 522, 526, 527, 528, 529, 531, 533, 534, 536, 543, 544, 545, 546, 549, 571, 572, 577, 578], "refer": [0, 44, 102, 132, 133, 134, 135, 160, 161, 165, 184, 214, 215, 216, 217, 242, 243, 247, 263, 302, 303, 304, 337, 368, 380, 388, 399, 412, 459, 471, 480, 493, 497, 511, 526, 532, 547, 571, 576, 577, 578, 582], "stestr": 0, "readthedoc": 0, "io": [0, 575, 578], "en": [0, 526, 578], "html": [0, 532], "class": [0, 19, 25, 29, 33, 34, 35, 39, 43, 44, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 170, 252, 310, 311, 315, 323, 331, 332, 333, 354, 366, 374, 445, 456, 465, 550, 557, 563, 575, 576, 578, 582], "individu": 0, "method": [0, 25, 29, 35, 39, 47, 51, 67, 72, 76, 80, 84, 88, 90, 101, 109, 110, 113, 115, 118, 119, 130, 131, 137, 141, 159, 164, 170, 172, 183, 191, 192, 195, 197, 200, 201, 212, 213, 219, 223, 241, 246, 252, 262, 271, 272, 276, 277, 287, 288, 290, 305, 311, 312, 324, 332, 340, 352, 354, 366, 374, 375, 380, 388, 402, 412, 456, 465, 466, 471, 480, 497, 511, 515, 520, 526, 550, 557, 561, 563, 571, 576, 577, 578, 579, 580, 582], "faster": [0, 330, 365, 455, 535, 577, 578], "n": [0, 114, 150, 196, 232, 275, 296, 327, 340, 370, 396, 400, 405, 406, 407, 408, 409, 419, 420, 422, 423, 425, 433, 434, 435, 436, 457, 461, 489, 494, 498, 515, 517, 534, 543, 544, 545, 546, 548, 578, 582], "discov": [0, 332, 353, 354, 366, 373, 374, 375, 402, 456, 464, 465, 466, 559, 567], "test_max_weight_match": 0, "same": [0, 67, 88, 90, 101, 114, 155, 156, 157, 159, 161, 170, 172, 183, 196, 237, 238, 239, 241, 243, 275, 303, 311, 384, 389, 399, 416, 474, 482, 493, 502, 503, 507, 514, 518, 526, 547, 558, 572, 575, 578, 580], "path": [0, 6, 19, 25, 29, 72, 76, 150, 159, 164, 169, 232, 241, 246, 251, 296, 305, 309, 317, 318, 319, 320, 321, 322, 323, 324, 326, 328, 329, 330, 338, 340, 342, 348, 349, 350, 351, 352, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 370, 376, 377, 378, 379, 382, 383, 384, 387, 389, 391, 392, 400, 403, 404, 411, 414, 415, 416, 417, 418, 431, 441, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 461, 467, 468, 469, 470, 472, 473, 474, 479, 482, 484, 485, 494, 496, 510, 514, 515, 516, 522, 523, 530, 532, 535, 540, 548, 571, 575, 576, 578, 579, 580, 582], "test_nod": 0, "testnod": 0, "test_no_nod": 0, "rel": [0, 394, 396, 487, 489, 531, 534], "each": [0, 88, 107, 116, 117, 137, 157, 159, 169, 170, 189, 198, 199, 219, 239, 241, 251, 252, 269, 304, 309, 311, 312, 318, 319, 320, 321, 322, 323, 327, 329, 330, 332, 334, 336, 338, 340, 341, 342, 344, 346, 347, 348, 349, 350, 351, 354, 357, 358, 359, 360, 361, 362, 365, 366, 370, 372, 374, 375, 377, 378, 379, 382, 383, 384, 385, 386, 391, 394, 395, 396, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 416, 417, 420, 423, 429, 435, 440, 447, 448, 449, 450, 451, 452, 455, 456, 461, 463, 465, 466, 468, 469, 470, 475, 476, 477, 478, 484, 487, 488, 489, 495, 497, 502, 503, 504, 505, 507, 512, 515, 516, 517, 518, 522, 526, 527, 528, 531, 533, 534, 535, 538, 544, 545, 546, 548, 549, 556, 562, 567, 571, 573, 576, 577, 578, 579, 580, 582], "fail": [0, 382, 383, 384, 414, 415, 416, 472, 473, 474, 578], "except": [0, 19, 45, 46, 57, 59, 60, 61, 62, 63, 64, 65, 71, 88, 170, 252, 332, 348, 349, 350, 351, 354, 366, 374, 375, 391, 401, 402, 456, 465, 466, 484, 495, 515, 522, 549, 569, 570, 575, 577, 578], "rais": [0, 88, 90, 101, 120, 121, 122, 123, 124, 138, 151, 153, 164, 166, 167, 169, 170, 172, 183, 202, 203, 204, 205, 206, 220, 233, 235, 246, 248, 249, 251, 252, 278, 279, 280, 281, 282, 297, 299, 305, 306, 307, 309, 311, 312, 318, 319, 322, 328, 329, 332, 345, 346, 348, 349, 350, 351, 354, 356, 357, 358, 359, 360, 361, 363, 364, 366, 374, 375, 376, 377, 387, 391, 396, 402, 413, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 456, 465, 466, 467, 468, 479, 484, 489, 500, 508, 512, 515, 516, 521, 522, 530, 534, 535, 538, 539, 540, 541, 577, 578, 580], "save": [0, 571], "output": [0, 118, 119, 156, 157, 160, 164, 165, 169, 200, 201, 238, 239, 242, 246, 247, 251, 276, 277, 302, 304, 305, 309, 311, 316, 317, 323, 328, 353, 355, 356, 362, 364, 373, 376, 378, 387, 391, 392, 403, 410, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 452, 454, 464, 467, 479, 484, 485, 510, 512, 513, 515, 520, 522, 523, 527, 571, 578, 579, 580], "imag": [0, 164, 246, 261, 305, 427, 428, 438, 439, 571, 577, 578, 579, 580, 582], "current": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "ensur": [0, 88, 166, 170, 248, 287, 306, 576, 578], "usabl": [0, 578], "clutter": 0, "clean": 0, "up": [0, 311, 358, 360, 448, 450, 580, 582], "view": [0, 401, 495, 502, 507, 549, 577, 580], "inspect": [0, 580], "common": [0, 481, 504, 526, 578, 580], "set": [0, 88, 90, 101, 121, 124, 130, 131, 150, 155, 160, 165, 169, 170, 172, 183, 203, 206, 212, 213, 232, 237, 242, 247, 251, 252, 253, 262, 279, 282, 296, 302, 309, 311, 312, 317, 318, 319, 320, 321, 323, 324, 325, 329, 330, 335, 336, 338, 343, 344, 347, 348, 349, 352, 356, 357, 358, 359, 360, 362, 365, 367, 371, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 393, 396, 398, 399, 400, 401, 404, 408, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 452, 455, 458, 462, 468, 470, 471, 472, 473, 474, 477, 478, 480, 482, 486, 489, 491, 492, 493, 494, 495, 496, 502, 503, 504, 505, 507, 511, 512, 513, 514, 515, 520, 521, 529, 534, 535, 541, 545, 547, 548, 549, 572, 573, 577, 578, 579, 580, 582], "rustworkx_test_preserve_imag": 0, "environ": [0, 317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 389, 398, 400, 414, 415, 416, 446, 472, 473, 474, 482, 491, 492, 494, 497, 514, 541, 548, 576, 578, 582], "variabl": [0, 317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 389, 398, 400, 414, 415, 416, 446, 472, 473, 474, 482, 491, 492, 494, 514, 541, 548, 578], "valu": [0, 96, 97, 100, 101, 111, 112, 118, 119, 137, 161, 164, 178, 179, 182, 183, 193, 194, 200, 201, 219, 243, 246, 258, 261, 273, 274, 276, 277, 303, 305, 311, 316, 318, 319, 320, 321, 322, 328, 329, 330, 334, 335, 337, 339, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 387, 388, 389, 391, 393, 394, 395, 396, 397, 400, 402, 403, 404, 410, 411, 412, 414, 415, 416, 417, 419, 422, 424, 426, 431, 432, 437, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 494, 497, 510, 511, 514, 515, 516, 517, 518, 522, 526, 527, 528, 529, 531, 533, 534, 535, 536, 548, 571, 572, 578, 579, 582], "skip": [0, 101, 161, 183, 243, 303, 341, 342, 578], "cleanup": 0, "enabl": [0, 88, 101, 164, 170, 183, 246, 305, 382, 383, 384, 414, 415, 416, 472, 473, 474, 575, 577, 578], "look": [0, 114, 196, 275, 577, 578, 580, 582], "correct": [0, 578], "1": [0, 25, 29, 35, 44, 51, 67, 72, 80, 84, 88, 100, 103, 111, 150, 159, 169, 170, 182, 185, 193, 232, 241, 251, 252, 261, 265, 273, 296, 309, 311, 316, 318, 319, 320, 321, 322, 326, 328, 329, 330, 332, 335, 337, 339, 340, 347, 354, 355, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 374, 375, 376, 378, 380, 382, 383, 384, 388, 394, 395, 396, 397, 400, 402, 403, 404, 406, 407, 410, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 455, 456, 458, 459, 460, 461, 465, 466, 467, 469, 471, 472, 473, 474, 475, 476, 480, 481, 483, 487, 488, 489, 490, 494, 497, 498, 506, 511, 512, 515, 517, 518, 519, 528, 531, 532, 533, 534, 535, 536, 540, 542, 543, 544, 547, 548, 572, 575, 577, 579, 580, 582], "preserv": [0, 101, 183, 262, 366, 374, 375, 456, 465, 466, 578], "finish": [0, 311, 326, 332, 354, 363, 366, 374, 375, 402, 453, 456, 465, 466, 560], "As": [0, 156, 157, 238, 239, 286, 295, 580], "crate": [0, 575, 578], "own": 0, "combin": [0, 100, 101, 165, 182, 183, 247, 261, 262, 578], "embed": 0, "book": 0, "how": [0, 316, 330, 334, 355, 365, 378, 379, 382, 383, 384, 400, 410, 411, 414, 415, 416, 445, 455, 469, 470, 472, 473, 474, 494, 517, 518, 548, 571, 577, 578, 580], "lang": [0, 526], "org": [0, 338, 380, 412, 427, 428, 433, 436, 438, 439, 471, 491, 530, 532, 535, 578], "ch11": 0, "01": [0, 338, 578], "primari": 0, "languag": [0, 530, 575, 578], "written": [0, 347, 571, 575, 576, 577, 578, 580], "rustfmt": 0, "enforc": [0, 580], "consist": [0, 67, 137, 161, 219, 243, 303, 530, 574, 578, 580], "job": [0, 578, 580], "configur": 0, "check": [0, 88, 101, 125, 126, 136, 157, 164, 170, 183, 207, 208, 218, 239, 246, 305, 311, 348, 349, 350, 351, 380, 385, 386, 388, 401, 412, 457, 471, 477, 478, 480, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 511, 515, 519, 526, 549, 578, 580], "luckili": 0, "adapt": [0, 347, 396, 489, 534, 577], "simpl": [0, 316, 317, 323, 338, 355, 356, 362, 382, 383, 384, 385, 386, 389, 401, 414, 415, 416, 420, 445, 446, 452, 457, 472, 473, 474, 477, 478, 482, 495, 502, 503, 507, 514, 517, 518, 532, 536, 549, 576, 578, 580], "fmt": 0, "automat": 0, "restyl": 0, "match": [0, 6, 19, 111, 112, 113, 114, 115, 116, 117, 193, 194, 195, 196, 197, 198, 199, 273, 274, 275, 341, 342, 385, 386, 401, 477, 478, 495, 502, 503, 504, 505, 507, 515, 526, 549, 578], "what": [0, 577, 578], "step": [0, 311], "clippi": 0, "some": [0, 111, 112, 193, 194, 273, 274, 311, 316, 330, 355, 365, 382, 383, 384, 408, 414, 415, 416, 445, 455, 472, 473, 474, 517, 518, 545, 558, 575, 578, 579], "small": [0, 578], "piec": 0, "namespac": 0, "actual": [0, 326, 363, 453, 577, 580], "black": [0, 164, 246, 305, 332, 354, 366, 374, 427, 428, 438, 439, 456, 465, 551, 572, 578, 582], "flake8": 0, "repositori": 0, "mode": [0, 164, 246, 305, 427, 428, 438, 439, 571, 578, 579, 580, 582], "conform": 0, "rule": 0, "return": [0, 19, 25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 155, 157, 160, 161, 162, 163, 164, 165, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 218, 219, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 237, 239, 242, 243, 244, 245, 246, 247, 250, 251, 253, 254, 255, 256, 257, 258, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 302, 303, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 571, 572, 573, 575, 576, 577, 578, 579, 580, 582], "format": [0, 150, 232, 296, 331, 333, 391, 417, 484, 522, 526, 527, 530, 571, 577, 578, 582], "error": [0, 130, 131, 138, 164, 212, 213, 220, 246, 287, 288, 305, 311, 348, 349, 350, 351, 380, 388, 396, 412, 471, 480, 489, 497, 511, 526, 530, 534, 576, 578, 580], "updat": [0, 88, 160, 166, 167, 170, 242, 248, 249, 252, 253, 254, 255, 271, 272, 302, 306, 307, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 578, 582], "handl": [0, 355, 445, 577, 578, 582], "venv": 0, "render": [0, 582], "web": [0, 433, 526], "browser": 0, "built": [0, 576, 578], "locat": [0, 578], "rustworkx_cor": [0, 575, 578], "off": [0, 576, 578, 582], "dir": [0, 483], "signatur": 0, "anot": 0, "requir": [0, 67, 111, 112, 193, 194, 273, 274, 311, 350, 351, 366, 374, 375, 389, 429, 440, 456, 465, 466, 482, 514, 571, 576, 577, 578], "stub": 0, "tool": [0, 574, 577, 578, 582], "pyi": 0, "thei": [0, 100, 157, 164, 182, 239, 246, 261, 305, 385, 386, 399, 477, 478, 493, 502, 503, 507, 513, 538, 547, 572, 576, 577, 578, 582], "strip": 0, "more": [0, 88, 114, 150, 170, 196, 232, 252, 275, 296, 311, 313, 314, 334, 338, 340, 346, 370, 372, 389, 395, 436, 461, 463, 482, 488, 514, 515, 530, 532, 533, 571, 572, 574, 575, 576, 577, 578, 582], "mypi": [0, 578], "latest": [0, 578], "veri": [0, 577, 582], "help": 0, "end": [0, 105, 187, 267, 322, 328, 332, 353, 354, 361, 364, 366, 373, 374, 375, 376, 402, 403, 451, 454, 456, 464, 465, 466, 467, 578, 580], "user": [0, 88, 483, 520, 575, 578, 582], "let": [0, 353, 373, 464, 578, 579, 580], "bug": 0, "One": [0, 558, 582], "thing": [0, 577, 582], "necessari": [0, 578, 580], "line": [0, 150, 232, 296, 476, 481, 572, 578], "__init__": [0, 332, 354, 366, 374, 456, 465, 577, 578, 582], "form": [0, 25, 29, 33, 34, 35, 51, 56, 67, 72, 76, 80, 84, 91, 92, 103, 106, 109, 110, 129, 147, 168, 173, 174, 185, 188, 191, 192, 211, 229, 250, 254, 255, 265, 268, 271, 272, 286, 295, 308, 315, 337, 340, 347, 353, 368, 370, 373, 381, 397, 399, 429, 440, 459, 461, 464, 490, 493, 547, 556, 562, 578], "foo": 0, "abl": [0, 576, 578], "access": [0, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 130, 131, 170, 212, 213, 252, 310, 315, 331, 333, 577, 578], "pattern": [0, 574, 578], "face": 0, "must": [0, 118, 119, 164, 200, 201, 246, 276, 277, 305, 326, 341, 348, 349, 350, 351, 363, 376, 388, 403, 427, 428, 438, 439, 453, 467, 480, 511, 526, 536, 571, 572, 577, 578, 580], "explain": 0, "wa": [0, 88, 375, 378, 382, 383, 384, 400, 402, 410, 414, 415, 416, 466, 472, 473, 474, 528, 548, 571, 575, 576, 577, 578, 580], "why": 0, "idea": 0, "behind": 0, "naiv": 0, "limit": [0, 164, 246, 305, 317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 385, 386, 389, 398, 401, 414, 415, 416, 446, 472, 473, 474, 477, 478, 482, 491, 492, 495, 502, 507, 514, 541, 549, 576, 577, 578], "intern": [0, 21, 22, 101, 183, 262, 436, 575, 578, 580], "knowledg": 0, "upgrad": [0, 576], "previou": [0, 312, 338, 394, 487, 531, 538, 578, 582], "program": [0, 575, 576, 578], "would": [0, 88, 101, 130, 131, 155, 170, 183, 212, 213, 237, 252, 317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 385, 386, 389, 398, 401, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 472, 473, 474, 477, 478, 482, 491, 492, 495, 502, 503, 505, 507, 513, 514, 541, 549, 576, 577, 578, 580, 582], "go": [0, 138, 220, 577], "ideal": 0, "too": [0, 118, 119, 200, 201, 276, 277, 576, 578, 579], "context": [0, 578], "sure": [0, 572, 578], "don": [0, 138, 220, 580, 582], "forget": 0, "over": [0, 67, 132, 133, 134, 135, 137, 159, 161, 214, 215, 216, 217, 219, 241, 243, 303, 311, 340, 370, 399, 401, 461, 491, 493, 495, 547, 549, 578, 580], "cycl": [0, 6, 19, 88, 90, 101, 170, 172, 183, 311, 318, 319, 328, 329, 338, 347, 348, 349, 350, 351, 357, 358, 364, 381, 413, 421, 424, 447, 448, 454, 501, 519, 532, 538, 539, 578, 580], "accomplish": [0, 577], "reno": 0, "git": 0, "base": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 44, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 101, 170, 183, 252, 262, 310, 311, 315, 330, 331, 333, 355, 365, 379, 380, 385, 386, 388, 401, 407, 411, 412, 445, 455, 457, 470, 471, 477, 478, 480, 483, 491, 495, 502, 503, 506, 507, 511, 515, 520, 532, 544, 549, 550, 557, 563, 577, 578, 579, 580], "workflow": 0, "quit": [0, 582], "straightforward": [0, 577], "checkout": 0, "short": 0, "string": [0, 150, 164, 169, 232, 246, 251, 296, 305, 309, 355, 391, 417, 445, 484, 513, 522, 527, 571, 572, 578, 582], "brief": 0, "space": [0, 498, 528, 578], "describ": [0, 91, 92, 173, 174, 254, 255, 327, 381, 390, 405, 418, 441, 475, 476, 530, 577, 578], "becom": [0, 556, 562, 578], "prefix": [0, 577], "yaml": 0, "releasenot": 0, "text": [0, 398, 492, 498, 572], "editor": 0, "basic": [0, 577, 578], "restructur": 0, "list": [0, 33, 34, 43, 55, 56, 58, 66, 76, 88, 91, 92, 94, 101, 104, 105, 106, 107, 108, 109, 110, 112, 116, 117, 120, 129, 130, 131, 133, 135, 139, 140, 141, 142, 143, 147, 148, 149, 150, 153, 158, 160, 162, 163, 168, 169, 170, 173, 174, 176, 183, 186, 187, 188, 189, 190, 191, 192, 194, 198, 199, 202, 211, 212, 213, 215, 217, 221, 222, 223, 224, 225, 229, 230, 231, 232, 235, 240, 242, 244, 245, 250, 251, 252, 254, 255, 257, 262, 266, 267, 268, 269, 270, 271, 272, 274, 278, 286, 288, 289, 290, 291, 292, 295, 296, 299, 301, 302, 308, 309, 310, 312, 313, 315, 317, 319, 321, 322, 323, 326, 329, 331, 332, 333, 338, 341, 342, 344, 345, 347, 353, 354, 356, 358, 360, 361, 362, 363, 366, 373, 374, 375, 377, 381, 394, 396, 402, 404, 409, 413, 418, 419, 420, 421, 422, 423, 424, 426, 430, 431, 432, 435, 437, 441, 442, 443, 444, 446, 448, 450, 451, 452, 453, 456, 464, 465, 466, 468, 487, 489, 491, 498, 509, 512, 513, 515, 528, 530, 531, 534, 535, 536, 537, 538, 539, 546, 571, 572, 573, 577, 578, 579, 582], "under": [0, 575, 578], "categori": 0, "item": [0, 579, 582], "group": [0, 340, 341, 370, 461], "A": [0, 25, 29, 33, 34, 35, 39, 43, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 91, 92, 94, 96, 97, 100, 101, 104, 105, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 129, 130, 131, 139, 140, 141, 142, 143, 147, 148, 149, 153, 155, 157, 158, 160, 161, 162, 163, 164, 165, 170, 173, 174, 176, 178, 179, 182, 183, 186, 187, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 211, 212, 213, 221, 222, 223, 224, 225, 229, 230, 231, 235, 237, 239, 240, 242, 243, 244, 245, 246, 247, 252, 254, 255, 257, 258, 261, 262, 266, 267, 269, 270, 271, 272, 273, 276, 277, 278, 286, 287, 288, 289, 290, 291, 292, 295, 299, 301, 302, 303, 304, 305, 310, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 392, 396, 397, 398, 399, 401, 402, 403, 405, 406, 407, 408, 409, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 428, 429, 430, 431, 432, 433, 435, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 461, 463, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 485, 489, 490, 491, 492, 493, 495, 498, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 523, 528, 530, 532, 534, 535, 536, 537, 538, 539, 540, 543, 544, 545, 546, 547, 549, 550, 557, 563, 571, 572, 573, 574, 575, 576, 578, 580, 582], "mani": [0, 170, 252, 311, 330, 334, 365, 378, 379, 400, 410, 411, 455, 469, 470, 494, 548, 576, 577, 578], "entri": [0, 254, 272, 328, 364, 376, 383, 384, 403, 415, 416, 454, 467, 473, 474, 526, 578], "potenti": [0, 170, 252, 580], "newli": [0, 89, 91, 92, 93, 94, 95, 101, 132, 133, 134, 135, 161, 171, 173, 174, 175, 176, 177, 183, 214, 215, 216, 217, 243, 253, 254, 255, 256, 257, 262, 303, 577], "full": [0, 156, 157, 238, 239, 435, 578], "templat": 0, "delet": [0, 88, 170, 252, 578], "aren": [0, 580], "content": [0, 67, 150, 164, 169, 232, 246, 251, 296, 305, 309, 388, 480, 511, 575, 578], "result": [0, 25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 88, 170, 252, 304, 310, 311, 315, 325, 334, 336, 338, 346, 347, 372, 395, 398, 406, 463, 488, 492, 526, 533, 540, 541, 543, 574, 578, 582], "someth": [0, 389, 482, 514, 572, 577, 578, 580], "featur": [0, 88, 170, 577], "func": [0, 572], "support": [0, 355, 428, 439, 445, 491, 530, 571, 575, 577, 578, 580, 582], "pydigraph": [0, 19, 88, 100, 101, 107, 112, 118, 119, 150, 159, 160, 161, 164, 169, 304, 311, 316, 317, 318, 319, 320, 321, 323, 324, 326, 328, 329, 330, 331, 332, 333, 335, 337, 339, 340, 341, 342, 343, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 461, 496, 497, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 519, 520, 522, 523, 525, 526, 527, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 547, 548, 571, 572, 573, 575, 577, 578, 580, 582], "object": [0, 21, 22, 25, 29, 33, 34, 35, 39, 43, 44, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 89, 90, 91, 93, 94, 95, 96, 97, 100, 101, 107, 108, 113, 115, 116, 117, 118, 119, 120, 121, 122, 124, 138, 143, 150, 155, 156, 157, 160, 161, 164, 165, 167, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 182, 183, 189, 190, 195, 197, 198, 199, 200, 201, 202, 203, 204, 206, 220, 225, 232, 237, 238, 239, 242, 243, 246, 247, 249, 251, 252, 253, 254, 256, 257, 258, 261, 262, 269, 270, 276, 277, 278, 279, 280, 282, 292, 296, 302, 303, 304, 305, 307, 309, 310, 311, 315, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 332, 337, 340, 341, 342, 348, 349, 350, 351, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 368, 370, 374, 375, 376, 377, 379, 380, 382, 383, 384, 385, 386, 388, 391, 396, 397, 399, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 459, 461, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 489, 490, 493, 495, 497, 498, 502, 503, 507, 509, 511, 515, 516, 517, 518, 519, 520, 522, 526, 527, 528, 534, 535, 536, 543, 544, 545, 546, 547, 549, 550, 557, 563, 571, 572, 577, 578, 580, 582], "meth": 0, "equival": [0, 51, 67, 80, 139, 140, 161, 221, 222, 243, 261, 303, 389, 418, 441, 482, 514, 540, 575, 578, 580], "conveni": [0, 520], "nativ": [0, 577, 578, 580], "g": [0, 262, 332, 353, 354, 366, 373, 374, 375, 398, 402, 409, 436, 456, 464, 465, 466, 481, 540, 546, 572, 578, 580, 582], "deprec": 0, "bar": 0, "been": [0, 100, 165, 182, 247, 261, 304, 312, 314, 513, 551, 553, 560, 568, 575, 578], "remov": [0, 88, 101, 132, 133, 134, 135, 138, 151, 152, 153, 154, 155, 156, 157, 158, 159, 164, 165, 170, 183, 214, 215, 216, 217, 220, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 252, 262, 297, 298, 299, 300, 301, 304, 305, 325, 334, 336, 551, 577, 578, 579], "futur": [0, 312, 578], "supersed": 0, "similar": [0, 355, 445, 577, 578, 582], "accur": 0, "better": [0, 90, 172, 385, 386, 477, 478, 502, 503, 578, 582], "perform": [0, 88, 90, 170, 172, 252, 311, 327, 385, 386, 389, 396, 405, 433, 477, 478, 482, 489, 491, 502, 503, 513, 514, 534, 550, 557, 563, 575, 576, 577, 578, 580], "instead": [0, 88, 150, 155, 157, 165, 166, 170, 232, 237, 239, 247, 248, 252, 296, 306, 338, 389, 391, 401, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 482, 484, 495, 514, 522, 549, 577, 578, 582], "sphinx": 0, "tabl": 0, "enumer": [0, 578], "bullet": 0, "etc": [0, 316, 355, 382, 383, 384, 414, 415, 416, 445, 472, 473, 474, 517, 518, 536, 582], "express": [0, 340, 370, 461, 578], "much": [0, 577, 578], "commit": [0, 578], "pr": 0, "artifact": [0, 366, 374, 375, 456, 465, 466], "part": [0, 332, 334, 354, 366, 374, 375, 402, 456, 465, 466, 536, 569, 575, 576, 578, 582], "inlin": 0, "number": [0, 35, 88, 144, 145, 155, 156, 157, 170, 226, 227, 237, 238, 239, 252, 293, 294, 314, 317, 318, 319, 320, 321, 325, 327, 330, 334, 335, 336, 340, 345, 346, 356, 357, 358, 359, 360, 365, 367, 370, 372, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 392, 393, 396, 398, 399, 400, 401, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 455, 457, 458, 461, 463, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 485, 486, 489, 491, 492, 493, 494, 495, 497, 498, 502, 507, 511, 514, 515, 517, 523, 524, 525, 526, 528, 529, 534, 535, 541, 543, 544, 545, 546, 547, 548, 549, 578, 579], "12345": 0, "fix": [0, 137, 219, 396, 489, 534], "race": 0, "condit": [0, 111, 112, 113, 115, 116, 117, 155, 193, 194, 195, 197, 198, 199, 237, 273, 274, 341, 342, 528, 578, 580], "__": [0, 348, 349, 350, 351, 578], "rst": 0, "restructuredtext": 0, "report": [0, 559, 560, 564, 574], "dure": [0, 311, 381, 578], "0": [0, 25, 29, 33, 34, 35, 44, 51, 58, 67, 72, 76, 80, 84, 88, 103, 111, 118, 119, 150, 159, 164, 169, 170, 185, 193, 200, 201, 232, 241, 246, 251, 252, 265, 273, 276, 277, 296, 305, 309, 310, 311, 316, 317, 318, 319, 320, 321, 322, 323, 329, 330, 332, 337, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 368, 374, 375, 378, 380, 382, 383, 384, 388, 395, 396, 397, 402, 404, 406, 407, 410, 412, 414, 415, 416, 420, 423, 436, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 459, 465, 466, 469, 471, 472, 473, 474, 475, 476, 480, 481, 483, 488, 489, 490, 497, 498, 509, 511, 515, 517, 518, 526, 528, 533, 534, 536, 542, 543, 544, 571, 572, 575, 576, 577, 579, 580, 582], "8": [0, 44, 398, 436, 475, 497, 532, 572, 574, 575, 577, 582], "tag": 0, "standard": [0, 575, 578], "state": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "_build": 0, "particular": [0, 475, 476, 578], "release_not": 0, "submit": 0, "approv": 0, "team": 0, "get": [0, 96, 97, 103, 106, 116, 117, 122, 123, 128, 129, 130, 131, 132, 133, 134, 135, 139, 140, 141, 146, 147, 148, 149, 162, 163, 166, 168, 178, 179, 185, 188, 198, 199, 204, 205, 210, 211, 212, 213, 214, 215, 216, 217, 221, 222, 223, 228, 229, 230, 231, 244, 245, 248, 250, 258, 264, 265, 268, 279, 280, 281, 286, 287, 288, 289, 290, 295, 306, 308, 324, 326, 331, 333, 346, 352, 353, 363, 372, 373, 378, 392, 410, 453, 463, 464, 469, 485, 512, 513, 523, 538, 539, 575, 578, 582], "trigger": [0, 491], "subsequ": [0, 578, 582], "mai": [0, 157, 165, 239, 247, 304, 311, 325, 334, 336, 338, 346, 347, 372, 398, 463, 475, 492, 526, 541, 576, 578, 580], "take": [0, 100, 111, 112, 113, 115, 116, 117, 137, 161, 164, 165, 182, 193, 194, 195, 197, 198, 199, 219, 243, 246, 247, 261, 273, 274, 303, 305, 326, 328, 338, 341, 342, 363, 364, 376, 385, 386, 401, 403, 413, 453, 454, 467, 475, 476, 477, 478, 495, 502, 503, 507, 515, 519, 549, 576, 577, 578, 579, 582], "week": 0, "month": 0, "dai": [0, 577, 578, 582], "avail": [0, 44, 400, 494, 548, 571, 574, 576, 577, 578, 582], "propos": [0, 576, 578], "valuabl": 0, "everyth": [0, 577], "highest": 0, "prioriti": [0, 578], "process": [0, 311, 312, 313, 338, 457, 491, 576, 578, 579], "quickli": [0, 578, 582], "activ": 0, "member": [0, 556, 562], "permiss": 0, "final": [0, 100, 182, 261, 578], "mark": [0, 312, 313, 314, 436, 558, 578], "readi": [0, 311, 313, 314, 578], "everyon": 0, "welcom": 0, "extrem": 0, "reduc": [0, 407, 535, 544, 566, 578], "burden": 0, "bit": [0, 576, 580], "back": [0, 332, 354, 366, 374, 375, 402, 456, 465, 466, 555, 558, 577], "forth": [0, 577], "receiv": [0, 161, 243, 303, 387, 479, 510, 578], "feedback": 0, "multipl": [0, 67, 88, 101, 151, 153, 157, 161, 165, 170, 183, 233, 235, 239, 243, 247, 252, 254, 272, 279, 297, 299, 303, 316, 355, 389, 445, 482, 514, 577, 578, 582], "round": [0, 572], "pleas": [0, 577, 578], "discourag": 0, "normal": [0, 330, 365, 379, 411, 455, 470, 497, 572, 576, 577, 578, 579], "qualiti": 0, "appear": [0, 156, 157, 238, 239, 311, 341, 342, 532, 580], "might": [0, 67, 311, 518], "larger": [0, 345, 578, 582], "implic": 0, "obviou": 0, "feel": 0, "free": [0, 433, 578], "adjust": [0, 88, 170, 252, 330, 365, 378, 379, 400, 410, 411, 455, 469, 470, 494, 548, 578], "comment": [0, 150, 232, 296], "anoth": [0, 100, 182, 261, 574, 578, 580, 582], "constrain": 0, "resourc": [0, 576], "infinit": [0, 578], "wait": 0, "period": [0, 429, 440, 578], "fine": 0, "regress": [0, 578], "codebas": 0, "often": [0, 580, 582], "needlessli": 0, "wast": 0, "starvat": 0, "slow": 0, "down": 0, "total": 0, "throughput": 0, "possibl": [0, 311, 322, 361, 398, 401, 406, 407, 408, 451, 495, 538, 542, 543, 544, 545, 549, 576, 578, 582], "try": [0, 401, 495, 549, 576, 578], "bundl": 0, "head": [0, 572, 580, 582], "automerg": 0, "signal": 0, "mergifi": 0, "bot": 0, "enqueu": 0, "onto": [0, 100, 182, 261], "At": [0, 526], "point": [0, 325, 327, 332, 334, 354, 366, 374, 375, 402, 405, 456, 465, 466, 513, 526, 550, 557, 558, 563, 578, 580, 582], "fulli": [0, 576, 578], "autom": [0, 578], "effort": [0, 576], "conserv": 0, "maxim": [0, 334, 346, 372, 463, 505, 515, 578], "idl": 0, "deep": 0, "backlog": 0, "unless": [0, 137, 219, 396, 489, 520, 534, 577, 578], "delai": [0, 578], "intend": [0, 572], "safe": 0, "high": [0, 327, 405, 575, 576, 578], "impact": [0, 578], "secur": 0, "balanc": 0, "risk": 0, "given": [0, 113, 114, 115, 122, 123, 124, 157, 195, 196, 197, 204, 205, 206, 239, 275, 280, 281, 282, 287, 311, 312, 332, 338, 341, 342, 347, 354, 355, 366, 374, 375, 381, 384, 399, 402, 408, 409, 416, 427, 428, 438, 439, 445, 456, 465, 466, 474, 476, 493, 498, 499, 513, 526, 545, 546, 547, 578, 579, 582], "patch": [0, 572, 578], "appropri": [0, 332, 354, 366, 374, 375, 402, 456, 465, 466, 577, 578], "inclus": 0, "riski": 0, "major": [0, 578], "trivial": 0, "fairli": [0, 582], "obscur": 0, "factor": [0, 335, 339, 367, 369, 388, 394, 395, 396, 435, 458, 460, 480, 487, 488, 489, 511, 531, 533, 534, 535, 578], "weigh": 0, "consid": [0, 155, 237, 338, 385, 386, 389, 405, 477, 478, 482, 502, 503, 514], "tiniest": 0, "carri": 0, "realli": 0, "visibl": 0, "benefit": 0, "notic": [0, 578, 580], "self": [0, 303, 325, 332, 334, 336, 338, 343, 346, 354, 366, 371, 372, 374, 398, 406, 456, 462, 463, 465, 492, 541, 543, 577, 578, 582], "signific": 0, "refactor": 0, "lot": [0, 577], "worth": [0, 160, 242, 302, 337, 348, 349, 350, 351, 368, 399, 459, 493, 547, 571, 578], "think": 0, "less": [0, 314, 330, 365, 379, 411, 419, 422, 426, 435, 437, 455, 470, 491, 536], "whether": [0, 88, 111, 112, 116, 117, 155, 170, 193, 194, 198, 199, 237, 252, 273, 274, 330, 341, 342, 365, 379, 409, 411, 455, 457, 470, 500, 504, 505, 506, 508, 520, 546, 577, 578], "simpli": [0, 578, 582], "non": [0, 326, 332, 338, 341, 363, 366, 376, 386, 403, 436, 453, 456, 467, 478, 507, 526, 532, 551, 554, 577, 580], "allow": [0, 88, 90, 165, 170, 172, 247, 252, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 577, 578, 580, 582], "accept": [0, 318, 319, 320, 321, 322, 329, 357, 358, 359, 360, 361, 375, 377, 396, 402, 404, 447, 448, 449, 450, 451, 466, 468, 489, 534, 577, 578], "least": [0, 116, 117, 198, 199, 526, 578, 579], "until": [0, 311, 332, 338, 353, 354, 366, 373, 374, 375, 396, 402, 456, 464, 465, 466, 489, 534, 578], "mainta": 0, "minor": 0, "approach": [0, 476, 578, 582], "reason": 0, "cherri": 0, "pick": [0, 311], "x": [0, 316, 355, 382, 383, 384, 385, 386, 389, 409, 414, 415, 429, 436, 440, 445, 472, 473, 474, 477, 478, 482, 502, 503, 507, 514, 515, 517, 518, 535, 546, 577, 578, 579, 580], "main_commit_id": 0, "squash": 0, "track": [0, 311, 332, 354, 366, 374, 456, 465], "strict": 0, "cleanli": 0, "resolv": [0, 513, 558, 578], "yourself": [0, 578], "messag": [0, 164, 246, 305, 578], "i": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583], "branch": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "rustworkx": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 29, 33, 34, 35, 39, 43, 44, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 170, 252, 310, 311, 315, 550, 557, 563, 578, 579, 580, 583], "chang": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "prior": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583], "releas": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583], "central": [6, 19, 39, 47, 330, 340, 365, 370, 379, 380, 388, 411, 412, 455, 461, 470, 471, 480, 511, 575, 578, 581], "betweenness_centr": [6, 411, 578, 579], "edge_betweenness_centr": [6, 330, 578], "eigenvector_centr": [6, 380, 471, 578], "katz_centr": [6, 388, 480, 578], "closeness_centr": [6, 578], "color": [6, 19, 44, 164, 246, 305, 332, 341, 354, 366, 374, 427, 428, 436, 438, 439, 456, 457, 465, 475, 476, 483, 542, 551, 554, 571, 572, 578, 579, 582], "coloringstrategi": [6, 578], "graph_greedy_color": [6, 44, 578], "graph_bipartite_edge_color": [6, 578], "graph_greedy_edge_color": [6, 578], "graph_misra_gries_edge_color": [6, 578], "two_color": [6, 578], "connect": [6, 19, 105, 157, 165, 187, 239, 247, 267, 325, 336, 338, 340, 341, 344, 345, 353, 370, 398, 400, 408, 409, 418, 420, 423, 430, 441, 442, 461, 464, 492, 494, 498, 500, 508, 517, 518, 524, 525, 537, 545, 546, 548, 573, 578, 579, 580, 582], "number_connected_compon": [6, 578], "connected_compon": [6, 578, 582], "node_connected_compon": [6, 578], "is_connect": [6, 578], "strongly_connected_compon": [6, 578], "number_weakly_connected_compon": [6, 578], "weakly_connected_compon": [6, 578], "is_weakly_connect": [6, 578], "cycle_basi": [6, 578], "simple_cycl": [6, 578], "digraph_find_cycl": [6, 578], "articulation_point": [6, 578], "bridg": [6, 578], "biconnected_compon": [6, 578], "chain_decomposit": [6, 43, 578], "all_simple_path": [6, 578], "all_pairs_all_simple_path": [6, 389, 482, 514, 578], "stoer_wagner_min_cut": [6, 578], "longest_simple_path": [6, 578], "is_bipartit": [6, 578], "has_path": [6, 578], "connected_subgraph": [6, 578], "dag_longest_path": [6, 349, 350, 351, 578], "dag_longest_path_length": [6, 351, 578], "dag_weighted_longest_path": [6, 578], "dag_weighted_longest_path_length": [6, 578], "is_directed_acyclic_graph": 6, "transitive_reduct": [6, 578], "topological_gener": [6, 578], "oper": [6, 19, 399, 493, 547, 576, 577, 578, 580], "complement": [6, 371, 462, 578], "union": [6, 337, 399, 493, 530, 578], "cartesian_product": [6, 578, 582], "isomorph": [6, 19, 385, 386, 401, 477, 478, 495, 502, 503, 507, 549, 575, 578], "is_isomorph": [6, 385, 401, 477, 495, 549, 578], "is_subgraph_isomorph": [6, 386, 401, 478, 495, 549, 574, 578], "is_isomorphic_node_match": [6, 578], "vf2_map": [6, 578], "link": [6, 19, 388, 391, 417, 480, 484, 511, 522, 527, 535, 577, 578, 582], "analysi": [6, 19, 340, 578, 580], "pagerank": [6, 578], "hit": [6, 578], "max_weight_match": [6, 578], "is_match": [6, 578], "is_maximal_match": 6, "adjacency_matrix": [6, 577, 578], "transit": [6, 398, 492, 526, 540, 578, 582], "core_numb": [6, 578], "graph_line_graph": [6, 578], "metric_closur": [6, 578], "is_planar": [6, 578], "digraph_maximum_bisimul": [6, 58, 310, 578], "shortest": [6, 19, 318, 319, 320, 321, 322, 326, 328, 329, 330, 340, 357, 358, 359, 360, 361, 363, 364, 365, 370, 376, 377, 379, 382, 383, 384, 387, 392, 400, 403, 404, 411, 414, 415, 416, 447, 448, 449, 450, 451, 453, 454, 455, 461, 467, 468, 470, 472, 473, 474, 479, 485, 494, 510, 516, 523, 535, 548, 575, 576, 578, 579], "dijkstra_shortest_path": [6, 76, 576, 578], "dijkstra_shortest_path_length": [6, 72, 574, 578], "all_pairs_dijkstra_shortest_path": [6, 29, 578], "all_pairs_dijkstra_path_length": [6, 574, 578], "bellman_ford_shortest_path": [6, 578], "bellman_ford_shortest_path_length": [6, 578], "all_pairs_bellman_ford_shortest_path": [6, 578], "all_pairs_bellman_ford_path_length": [6, 578], "negative_edge_cycl": [6, 578], "find_negative_cycl": [6, 578], "distance_matrix": [6, 578], "floyd_warshal": [6, 578], "floyd_warshall_numpi": [6, 410, 577, 578], "floyd_warshall_successor_and_dist": [6, 578], "astar_shortest_path": [6, 578], "k_shortest_path_length": [6, 578], "num_shortest_paths_unweight": [6, 578], "unweighted_average_shortest_path_length": [6, 578], "all_shortest_path": [6, 578], "digraph_all_shortest_path": [6, 578], "travers": [6, 19, 332, 348, 349, 350, 351, 353, 354, 366, 373, 374, 375, 376, 402, 403, 456, 464, 465, 466, 467, 569, 570, 578], "dfs_edg": [6, 578], "dfs_search": [6, 374, 465, 557, 578], "bfs_successor": [6, 34, 578], "bfs_predecessor": [6, 33, 578], "bfs_search": [6, 366, 456, 550, 578], "dijkstra_search": [6, 563, 578], "topological_sort": [6, 513, 578, 580], "lexicographical_topological_sort": [6, 578], "descend": [6, 538, 578], "ancestor": [6, 538, 578], "collect_run": [6, 578, 580], "collect_bicolor_run": [6, 578], "dfsvisitor": [6, 354, 374, 465, 578], "bfsvisitor": [6, 332, 366, 456, 578], "dijkstravisitor": [6, 375, 402, 466, 578], "topologicalsort": [6, 578], "minimum_spanning_edg": [6, 578], "minimum_spanning_tre": [6, 578], "steiner_tre": [6, 578], "pydag": [19, 21, 182, 261, 501, 503, 578], "function": [19, 25, 29, 33, 34, 39, 43, 47, 55, 56, 66, 72, 76, 111, 112, 116, 117, 137, 139, 140, 154, 155, 156, 157, 164, 165, 169, 193, 194, 198, 199, 219, 221, 222, 236, 237, 238, 239, 246, 247, 251, 273, 274, 300, 305, 309, 311, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 327, 329, 330, 332, 334, 336, 338, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 366, 372, 374, 375, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 391, 396, 398, 399, 400, 401, 402, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 428, 439, 445, 446, 447, 448, 449, 450, 451, 455, 456, 463, 464, 465, 466, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 482, 484, 489, 491, 492, 493, 494, 495, 497, 498, 502, 503, 507, 511, 513, 514, 515, 517, 518, 519, 520, 522, 526, 528, 532, 534, 536, 537, 541, 544, 547, 548, 549, 558, 560, 571, 572, 574, 575, 576, 578, 579, 580, 582], "gener": [19, 25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 80, 107, 111, 118, 119, 140, 157, 159, 160, 164, 165, 169, 189, 193, 200, 201, 222, 239, 241, 242, 246, 247, 251, 269, 273, 276, 277, 302, 304, 305, 309, 310, 311, 315, 316, 318, 319, 320, 321, 322, 327, 329, 335, 339, 340, 355, 358, 360, 361, 367, 368, 369, 370, 377, 379, 391, 393, 394, 395, 396, 397, 401, 404, 405, 406, 407, 408, 409, 411, 417, 445, 447, 448, 449, 450, 451, 458, 459, 460, 461, 468, 470, 475, 476, 483, 484, 486, 487, 488, 489, 490, 495, 498, 522, 527, 528, 529, 531, 532, 533, 534, 538, 543, 544, 545, 546, 549, 571, 572, 575, 576, 577, 578, 580], "random": [19, 327, 393, 396, 405, 406, 407, 408, 409, 486, 489, 491, 498, 528, 529, 534, 543, 544, 545, 546, 575, 578, 582], "layout": [19, 80, 335, 339, 367, 369, 393, 394, 395, 396, 436, 458, 460, 475, 486, 487, 488, 489, 529, 531, 533, 534, 571, 572, 575, 577, 578, 582], "serial": [19, 575, 577, 578], "convert": [19, 140, 222, 520, 575, 578], "custom": [19, 25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 310, 315, 331, 333, 575, 577, 578, 579, 582], "type": [19, 21, 22, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 103, 104, 105, 106, 107, 108, 111, 112, 114, 116, 117, 118, 119, 120, 123, 125, 126, 127, 128, 129, 130, 131, 136, 139, 140, 141, 142, 143, 146, 147, 148, 149, 160, 161, 162, 163, 164, 165, 168, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 185, 186, 187, 188, 189, 190, 193, 194, 196, 198, 199, 200, 201, 202, 205, 207, 208, 209, 210, 211, 212, 213, 218, 221, 222, 223, 224, 225, 228, 229, 230, 231, 242, 243, 244, 245, 246, 247, 250, 253, 254, 255, 256, 257, 258, 261, 264, 265, 266, 267, 268, 269, 270, 273, 274, 275, 276, 277, 278, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 295, 302, 303, 304, 305, 308, 313, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 353, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 571, 572, 573, 575, 577, 578, 579, 582], "specif": [21, 22, 113, 114, 115, 118, 119, 166, 195, 196, 197, 200, 201, 248, 275, 276, 277, 306, 530, 572, 576, 577, 578, 580], "univers": [21, 22, 340, 578], "retworkx": [21, 575, 578], "explicitli": [21, 22, 475, 476, 577, 578], "data": [21, 22, 33, 34, 51, 88, 90, 91, 92, 96, 97, 100, 101, 102, 108, 111, 112, 116, 117, 118, 119, 120, 121, 122, 124, 129, 130, 131, 137, 143, 147, 149, 155, 160, 161, 163, 164, 165, 167, 169, 170, 172, 173, 174, 178, 179, 182, 183, 184, 190, 193, 194, 198, 199, 200, 201, 202, 203, 204, 206, 211, 212, 213, 219, 225, 229, 231, 237, 242, 243, 245, 246, 247, 249, 251, 252, 253, 254, 255, 258, 261, 262, 263, 270, 273, 274, 276, 277, 278, 279, 280, 282, 286, 287, 288, 292, 295, 302, 303, 304, 305, 307, 309, 315, 326, 328, 331, 333, 337, 341, 342, 363, 364, 368, 376, 378, 385, 386, 391, 399, 401, 403, 410, 413, 417, 453, 454, 459, 467, 469, 477, 478, 484, 493, 495, 502, 503, 507, 512, 513, 516, 519, 520, 522, 527, 530, 535, 547, 549, 571, 572, 575, 578, 579, 580], "length": [25, 72, 318, 320, 328, 330, 349, 351, 357, 359, 364, 376, 382, 383, 384, 387, 389, 400, 403, 414, 415, 416, 419, 426, 429, 437, 440, 447, 449, 454, 467, 472, 473, 474, 479, 482, 494, 510, 514, 540, 548, 572, 578], "node": [25, 29, 33, 34, 39, 51, 56, 58, 66, 67, 72, 76, 80, 84, 88, 89, 90, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 105, 106, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 142, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 250, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 267, 268, 269, 271, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 286, 287, 288, 289, 290, 291, 294, 295, 296, 297, 299, 300, 301, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 484, 485, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 502, 503, 504, 505, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 520, 521, 522, 523, 526, 527, 528, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 564, 571, 572, 574, 576, 578, 579, 580], "map": [25, 29, 35, 39, 47, 51, 67, 72, 76, 80, 84, 88, 100, 103, 130, 161, 170, 182, 185, 212, 243, 252, 261, 265, 287, 303, 317, 330, 337, 340, 356, 368, 370, 392, 397, 401, 446, 459, 461, 485, 490, 491, 495, 523, 540, 549, 572, 577, 578, 579, 582], "integ": [25, 29, 33, 34, 39, 43, 47, 55, 56, 58, 66, 72, 76, 88, 91, 92, 109, 110, 170, 173, 174, 191, 192, 252, 254, 255, 271, 272, 310, 315, 334, 341, 348, 349, 436, 475, 476, 512, 515, 542, 577, 578, 582], "indic": [25, 29, 39, 47, 51, 55, 56, 58, 66, 67, 72, 76, 80, 84, 88, 91, 92, 94, 96, 97, 100, 103, 104, 105, 106, 109, 110, 111, 112, 114, 130, 131, 135, 137, 139, 140, 141, 142, 148, 150, 160, 161, 162, 165, 168, 170, 173, 174, 176, 178, 179, 182, 185, 186, 187, 188, 191, 192, 193, 194, 196, 212, 213, 217, 219, 221, 222, 223, 224, 230, 232, 242, 243, 244, 247, 250, 252, 254, 255, 257, 258, 261, 265, 266, 267, 268, 271, 272, 273, 274, 275, 286, 287, 288, 289, 290, 291, 295, 296, 302, 303, 304, 308, 310, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 332, 335, 337, 338, 345, 348, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 367, 368, 374, 375, 377, 380, 382, 388, 389, 392, 394, 397, 401, 402, 404, 410, 412, 414, 422, 426, 428, 429, 438, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 465, 466, 468, 470, 471, 472, 475, 476, 480, 481, 482, 483, 485, 487, 490, 495, 497, 509, 511, 512, 513, 514, 518, 523, 526, 531, 535, 539, 542, 549, 551, 554, 572, 576, 577, 578, 579, 582], "pathlengthmap": [25, 328, 364, 376, 387, 454, 467, 479, 578], "234": 25, "2": [25, 29, 33, 34, 43, 44, 51, 55, 56, 58, 66, 72, 76, 80, 88, 90, 100, 103, 107, 111, 112, 118, 119, 120, 121, 132, 133, 134, 135, 150, 151, 155, 159, 169, 170, 172, 182, 185, 189, 193, 194, 200, 201, 202, 203, 214, 215, 216, 217, 232, 233, 237, 241, 251, 252, 253, 261, 265, 269, 273, 274, 276, 277, 278, 279, 296, 297, 309, 310, 311, 315, 316, 318, 319, 320, 321, 323, 330, 332, 335, 338, 339, 354, 355, 356, 357, 358, 359, 360, 362, 365, 366, 367, 368, 369, 374, 379, 382, 385, 386, 393, 394, 395, 396, 397, 398, 401, 407, 409, 410, 411, 414, 418, 419, 420, 422, 426, 427, 429, 433, 436, 437, 438, 440, 441, 445, 446, 447, 448, 449, 450, 452, 455, 456, 458, 459, 460, 465, 470, 472, 475, 476, 477, 478, 481, 483, 486, 487, 488, 489, 490, 495, 498, 502, 503, 507, 528, 529, 531, 532, 533, 534, 535, 543, 544, 546, 547, 549, 571, 572, 575, 577, 579, 580, 582], "34": 25, "python": [25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 113, 115, 156, 157, 165, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 195, 197, 238, 239, 247, 252, 253, 254, 255, 256, 257, 261, 262, 310, 315, 326, 328, 331, 333, 348, 349, 350, 351, 363, 364, 376, 385, 386, 387, 389, 401, 403, 413, 417, 453, 454, 467, 477, 478, 479, 482, 495, 502, 503, 507, 510, 513, 514, 519, 527, 549, 574, 575, 576, 577, 578, 582], "protocol": [25, 29, 33, 34, 35, 39, 43, 47, 55, 56, 58, 66, 72, 76, 84, 88, 170, 252, 310, 315, 331, 333, 577, 578, 582], "dict": [25, 29, 35, 39, 47, 51, 67, 72, 76, 80, 84, 96, 97, 100, 164, 170, 178, 179, 182, 246, 252, 258, 261, 305, 318, 319, 320, 321, 329, 330, 334, 340, 346, 357, 358, 359, 360, 365, 372, 377, 379, 380, 382, 387, 388, 396, 403, 404, 411, 412, 414, 427, 428, 438, 439, 447, 448, 449, 450, 455, 457, 463, 468, 470, 471, 472, 475, 476, 479, 480, 481, 483, 489, 491, 497, 510, 511, 526, 534, 540, 542, 571, 572, 577, 578, 582], "rx": [25, 29, 33, 34, 43, 55, 56, 58, 66, 72, 76, 88, 100, 150, 159, 164, 169, 170, 182, 232, 241, 246, 251, 252, 261, 296, 305, 309, 310, 311, 315, 332, 354, 366, 374, 456, 465, 475, 476, 481, 482, 483, 571, 572, 576, 577, 578, 579, 580, 582], "directed_path_graph": [25, 29, 33, 34, 55, 56, 58, 66, 72, 76, 169, 251, 310, 311, 315, 368, 397, 401, 572, 578, 580, 582], "5": [25, 29, 33, 34, 55, 56, 66, 72, 76, 80, 88, 112, 159, 169, 170, 194, 241, 251, 252, 274, 309, 311, 315, 380, 412, 420, 421, 423, 424, 425, 434, 435, 436, 471, 475, 476, 483, 497, 498, 575, 576, 579, 580, 582], "edg": [25, 29, 35, 43, 47, 51, 55, 56, 72, 76, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 144, 146, 147, 150, 151, 152, 153, 155, 156, 157, 159, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 203, 204, 205, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 226, 228, 229, 232, 233, 234, 235, 237, 238, 239, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 276, 277, 278, 279, 280, 281, 283, 285, 286, 287, 288, 293, 295, 296, 297, 298, 299, 302, 303, 304, 305, 306, 307, 308, 309, 311, 315, 316, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 332, 334, 336, 338, 341, 343, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 358, 359, 360, 361, 363, 364, 366, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 387, 388, 391, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 456, 457, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 483, 484, 489, 492, 493, 494, 495, 497, 502, 504, 505, 506, 507, 510, 511, 513, 515, 516, 517, 518, 519, 522, 526, 527, 528, 530, 534, 535, 536, 540, 541, 543, 544, 545, 547, 548, 549, 551, 553, 554, 555, 556, 558, 560, 561, 562, 565, 566, 567, 568, 571, 572, 574, 576, 578, 579, 580], "all_pairs_dijkstra_shortest_path_length": 25, "third_node_shortest_path_length": 25, "pathmap": [29, 329, 578], "third_node_shortest_path": 29, "sequenc": [33, 34, 43, 55, 56, 58, 66, 310, 315, 331, 333, 389, 482, 514, 572, 577, 578, 579, 580, 582], "tupl": [33, 34, 51, 56, 84, 91, 92, 100, 103, 106, 107, 109, 110, 123, 129, 130, 147, 168, 173, 174, 182, 185, 188, 189, 191, 192, 205, 211, 212, 229, 250, 254, 255, 261, 262, 265, 268, 269, 271, 272, 281, 286, 287, 295, 308, 315, 335, 337, 339, 353, 367, 368, 369, 373, 384, 393, 394, 395, 397, 416, 458, 459, 460, 464, 474, 481, 486, 487, 488, 490, 491, 497, 504, 505, 515, 529, 531, 533, 536, 540, 572, 576, 577, 578], "predecessor_a": 33, "predecessor_b": 33, "payload": [33, 34, 51, 88, 92, 102, 111, 112, 116, 117, 131, 132, 133, 134, 135, 137, 155, 160, 161, 165, 166, 167, 168, 169, 170, 174, 184, 193, 194, 198, 199, 213, 214, 215, 216, 217, 219, 237, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 263, 271, 272, 273, 274, 288, 302, 303, 304, 306, 307, 308, 309, 315, 337, 341, 342, 368, 378, 380, 387, 388, 391, 399, 410, 412, 417, 429, 459, 469, 471, 479, 480, 484, 493, 497, 510, 511, 516, 520, 522, 526, 527, 535, 547, 571, 572, 577, 578, 579, 580], "index": [33, 34, 43, 51, 55, 56, 58, 66, 88, 89, 90, 93, 95, 96, 97, 100, 101, 103, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 139, 140, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 167, 170, 171, 172, 175, 177, 178, 179, 182, 183, 185, 191, 192, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 221, 222, 228, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 247, 248, 249, 252, 253, 256, 258, 261, 262, 264, 265, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 295, 297, 298, 299, 300, 301, 302, 303, 306, 307, 310, 312, 315, 322, 323, 324, 326, 328, 329, 330, 331, 333, 336, 338, 340, 346, 347, 352, 353, 361, 362, 363, 364, 370, 372, 373, 376, 377, 381, 387, 388, 403, 404, 451, 452, 453, 454, 461, 463, 464, 467, 468, 475, 476, 479, 480, 496, 504, 505, 510, 511, 512, 521, 536, 540, 576, 577, 578, 579, 580, 582], "iter": [33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 101, 132, 133, 134, 135, 137, 159, 161, 183, 214, 215, 216, 217, 219, 241, 243, 262, 303, 310, 311, 315, 353, 373, 380, 388, 390, 396, 401, 412, 433, 464, 471, 480, 489, 495, 497, 511, 513, 526, 534, 549, 577, 578, 580], "wrap": [33, 34, 43, 55, 56, 58, 66, 72, 76, 310, 315, 578], "yield": [33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 310, 315, 578], "order": [33, 34, 43, 55, 56, 58, 66, 67, 72, 76, 101, 114, 161, 183, 196, 243, 254, 262, 272, 275, 303, 310, 311, 312, 315, 331, 333, 348, 349, 350, 351, 353, 366, 373, 374, 375, 385, 386, 389, 401, 419, 422, 456, 464, 465, 466, 477, 478, 482, 495, 502, 503, 507, 513, 514, 526, 549, 550, 557, 563, 578, 580, 582], "bfs_succ": [33, 34], "third_el": [33, 34, 55, 56, 66, 72, 76, 315], "bfs_iter": [33, 34], "first_el": [33, 34, 55, 56, 58, 66, 315], "second_el": [33, 34, 55, 56, 66, 315], "successor_a": 34, "successor_b": 34, "repres": [35, 51, 56, 67, 76, 80, 84, 88, 160, 161, 170, 242, 243, 302, 303, 315, 318, 319, 320, 321, 322, 326, 328, 329, 336, 338, 345, 357, 358, 359, 360, 361, 363, 364, 375, 376, 377, 378, 389, 391, 394, 396, 401, 402, 403, 404, 413, 417, 447, 448, 449, 450, 451, 453, 454, 466, 467, 468, 469, 475, 476, 481, 482, 484, 487, 489, 491, 495, 514, 519, 522, 526, 527, 531, 534, 540, 549, 574, 578, 580], "endpoint": [35, 56, 123, 131, 205, 213, 262, 281, 286, 287, 288, 295, 315, 330, 334, 365, 455, 504, 578, 582], "biconnect": [35, 325, 334, 578], "compon": [35, 325, 332, 334, 336, 338, 340, 344, 353, 354, 366, 370, 373, 374, 375, 402, 456, 461, 464, 465, 466, 517, 521, 524, 525, 537, 573, 578], "belong": [35, 334, 538, 578], "float": [39, 47, 72, 118, 119, 200, 201, 276, 277, 316, 318, 319, 320, 321, 322, 326, 328, 329, 335, 339, 350, 351, 355, 357, 358, 359, 360, 361, 363, 364, 367, 369, 375, 376, 377, 378, 380, 382, 383, 384, 387, 388, 393, 394, 395, 396, 398, 400, 402, 403, 404, 407, 408, 410, 412, 413, 414, 415, 416, 445, 447, 448, 449, 450, 451, 453, 454, 458, 460, 466, 467, 468, 469, 471, 472, 473, 474, 479, 480, 486, 487, 488, 489, 492, 494, 497, 498, 510, 511, 516, 517, 518, 519, 526, 528, 529, 531, 533, 534, 535, 536, 541, 544, 545, 548, 572, 576, 577, 578, 579], "between": [39, 47, 88, 90, 96, 97, 105, 107, 120, 121, 132, 133, 134, 135, 137, 151, 153, 155, 156, 157, 161, 165, 166, 170, 172, 178, 179, 187, 189, 202, 203, 214, 215, 216, 217, 219, 233, 235, 237, 238, 239, 243, 247, 248, 252, 253, 254, 255, 258, 262, 267, 269, 271, 272, 278, 279, 283, 297, 299, 303, 306, 311, 316, 317, 322, 323, 326, 330, 340, 355, 356, 361, 362, 363, 365, 370, 379, 380, 383, 384, 388, 396, 399, 400, 401, 407, 408, 409, 410, 411, 412, 415, 416, 422, 424, 426, 428, 429, 431, 432, 438, 445, 446, 451, 452, 453, 455, 461, 470, 471, 473, 474, 480, 481, 489, 493, 494, 495, 496, 497, 498, 511, 513, 516, 526, 528, 534, 535, 544, 545, 546, 547, 548, 549, 558, 574, 575, 576, 577, 578, 580, 581, 582], "score": [39, 47, 330, 365, 379, 380, 388, 411, 412, 455, 470, 471, 480, 497, 511, 526, 564, 578], "edgelist": [43, 106, 188, 268, 338, 353, 373, 381, 464, 491, 577, 578], "instanc": [43, 58, 101, 159, 170, 183, 241, 252, 262, 310, 311, 578, 580], "hexagonal_lattice_graph": [43, 578, 579], "third_chain": 43, "chains_it": 43, "first_chain": 43, "second_chain": 43, "greedi": [44, 475, 476, 512, 578], "degre": [44, 128, 146, 210, 228, 311, 327, 346, 372, 405, 463, 475, 476, 483, 509, 513, 577, 578, 582], "largest": [44, 165, 247, 475, 476, 578], "satur": [44, 475, 476, 578], "dsatur": [44, 475, 476], "independentset": [44, 475, 476, 578], "gi": 44, "9": [44, 347, 436, 475, 575, 582], "adrian": [44, 475, 476], "kosowski": [44, 475, 476], "krzysztof": [44, 475, 476], "manuszewski": [44, 475, 476], "classic": [44, 475, 476, 580], "19": [44, 475, 476, 576, 578], "2004": [44, 475, 476], "isbn": [44, 475, 476], "8218": [44, 475, 476], "3458": [44, 475, 476], "4": [44, 88, 100, 112, 169, 170, 182, 194, 251, 252, 261, 274, 309, 311, 317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 389, 398, 407, 414, 415, 416, 418, 419, 422, 430, 436, 441, 442, 446, 472, 473, 474, 475, 476, 482, 483, 491, 492, 514, 532, 536, 541, 544, 575, 577, 579, 582], "attribut": [44, 88, 90, 160, 164, 170, 172, 242, 246, 252, 302, 305, 371, 391, 417, 462, 484, 520, 522, 527, 528, 530, 571, 572, 575, 578, 580], "weight": [51, 88, 100, 101, 102, 103, 106, 109, 110, 114, 116, 117, 118, 119, 138, 150, 155, 156, 157, 159, 160, 161, 165, 166, 167, 168, 169, 170, 182, 183, 184, 185, 188, 191, 192, 196, 198, 199, 200, 201, 220, 232, 237, 238, 239, 241, 242, 243, 247, 248, 249, 250, 251, 252, 253, 254, 255, 261, 262, 263, 265, 268, 271, 272, 275, 276, 277, 296, 302, 303, 304, 306, 307, 308, 309, 315, 316, 318, 319, 320, 321, 322, 327, 328, 329, 337, 341, 342, 348, 349, 350, 351, 355, 357, 358, 359, 360, 361, 363, 364, 368, 375, 376, 377, 378, 380, 382, 383, 384, 387, 388, 396, 399, 402, 403, 404, 405, 410, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 430, 431, 432, 435, 437, 440, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 453, 454, 459, 466, 467, 468, 469, 471, 472, 473, 474, 479, 480, 489, 493, 497, 511, 515, 516, 517, 518, 526, 534, 535, 536, 547, 571, 572, 574, 576, 577, 578, 580, 582], "effici": [51, 80, 389, 407, 482, 514, 515, 544, 578], "behav": [51, 80, 88, 101, 183, 262, 317, 323, 356, 362, 446, 452, 582], "drop": [51, 80, 575, 578], "replac": [51, 80, 101, 160, 161, 183, 242, 243, 262, 302, 303, 575, 578, 580, 582], "readonli": [51, 80], "edge_indic": [55, 578, 582], "edges_it": [55, 56, 72, 76, 315], "node_index_a": [56, 315], "node_index_b": [56, 315], "edge_list": [56, 107, 109, 110, 169, 189, 191, 192, 251, 262, 269, 271, 272, 309, 481, 572, 577, 578], "block": [58, 311, 409, 546, 578], "funtion": [58, 310], "partit": [58, 310, 390, 536, 578], "a_partition_block": [58, 310], "block_it": 58, "another_el": 58, "the_second_el": 58, "node_indic": [66, 88, 141, 170, 223, 252, 290, 475, 481, 578, 579, 582], "nodes_it": 66, "though": [67, 311], "unord": [67, 161, 243, 303, 492, 582], "when": [67, 88, 90, 92, 100, 101, 120, 121, 122, 123, 124, 137, 161, 165, 166, 167, 170, 172, 174, 182, 183, 202, 203, 204, 205, 206, 219, 243, 247, 248, 249, 252, 255, 261, 262, 278, 279, 280, 281, 282, 303, 306, 307, 311, 318, 319, 322, 328, 329, 357, 358, 359, 360, 361, 363, 364, 376, 377, 380, 387, 388, 403, 406, 407, 412, 413, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 447, 448, 449, 450, 451, 453, 454, 467, 468, 471, 475, 476, 479, 480, 497, 498, 511, 512, 513, 516, 520, 521, 526, 530, 535, 543, 544, 552, 559, 564, 571, 575, 577, 578, 582], "sort": [67, 140, 222, 311, 513, 538, 539, 578, 580], "24": [72, 574, 578], "first_target": [72, 76], "first_path": [72, 76], "second_target": [72, 76], "second_path": [72, 76], "node_c": [76, 100, 182, 261, 481, 578], "node_a": [76, 100, 105, 120, 121, 125, 182, 187, 202, 203, 207, 253, 254, 255, 261, 267, 271, 272, 278, 279, 283, 297, 481, 577, 578], "node_b": [76, 100, 105, 120, 121, 125, 182, 187, 202, 203, 207, 253, 254, 255, 261, 267, 271, 272, 278, 279, 283, 297, 481, 577, 578], "2d": 80, "posit": [80, 137, 161, 219, 243, 303, 318, 319, 320, 321, 335, 339, 348, 349, 350, 351, 357, 358, 359, 360, 367, 369, 385, 386, 393, 394, 395, 396, 401, 447, 448, 449, 450, 458, 460, 477, 478, 486, 487, 488, 489, 495, 502, 503, 507, 528, 529, 531, 533, 534, 549, 572, 578], "direct": [88, 97, 105, 140, 159, 165, 170, 179, 187, 222, 241, 247, 311, 312, 324, 332, 352, 354, 355, 366, 371, 372, 374, 375, 378, 382, 383, 384, 385, 386, 396, 398, 399, 400, 406, 407, 408, 409, 410, 416, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 438, 489, 509, 513, 515, 520, 525, 530, 534, 537, 540, 542, 548, 555, 572, 573, 575, 577, 578, 581], "acycl": [88, 170, 540, 575, 578, 581], "alia": [88, 578], "ident": [88, 137, 141, 155, 156, 219, 223, 237, 238, 290, 418, 577, 578, 582], "interchang": 88, "sole": [88, 578], "backward": [88, 141, 223, 290, 366, 374, 375, 456, 465, 466, 578], "multigraph": [88, 90, 96, 97, 101, 107, 165, 170, 172, 178, 179, 183, 189, 247, 252, 253, 254, 255, 258, 262, 269, 271, 272, 343, 371, 380, 388, 406, 412, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 457, 462, 471, 480, 497, 511, 515, 526, 543, 575, 577, 578], "although": [88, 161, 170, 243, 252, 303, 578], "rare": [88, 170, 252], "stabl": [88, 170, 252, 389, 482, 514, 532, 578, 582], "lifetim": [88, 170, 252, 582], "hole": [88, 170, 252, 578, 582], "reus": [88, 170, 252, 582], "add_nodes_from": [88, 111, 112, 170, 193, 194, 252, 261, 273, 274, 577, 578, 580, 582], "rang": [88, 111, 112, 170, 193, 194, 252, 273, 274, 571, 578, 579, 580, 582], "remove_nod": [88, 170, 252, 582], "print": [88, 169, 170, 251, 252, 309, 311, 332, 354, 366, 374, 456, 465, 578, 579, 580, 582], "res_manu": [88, 170, 252], "add_par": [88, 90, 170, 172, 580], "6": [88, 170, 252, 380, 388, 396, 412, 428, 436, 439, 457, 471, 475, 476, 480, 483, 489, 511, 526, 534, 575, 580, 582], "none": [88, 92, 100, 101, 109, 110, 114, 137, 150, 155, 157, 160, 161, 164, 165, 169, 170, 174, 182, 183, 191, 192, 196, 219, 232, 237, 239, 242, 243, 246, 247, 251, 252, 255, 261, 262, 271, 272, 275, 296, 302, 303, 305, 309, 316, 317, 322, 323, 327, 328, 329, 332, 335, 338, 339, 341, 347, 348, 349, 353, 354, 355, 356, 361, 362, 364, 366, 367, 369, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 394, 395, 396, 401, 403, 404, 405, 406, 407, 408, 409, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 430, 431, 432, 435, 437, 441, 442, 443, 444, 445, 446, 451, 452, 454, 456, 457, 458, 460, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 487, 488, 489, 491, 495, 497, 498, 502, 507, 510, 511, 513, 514, 515, 517, 518, 522, 526, 527, 528, 529, 531, 533, 534, 536, 542, 543, 544, 545, 546, 549, 571, 572, 577, 578, 580, 582], "ad": [88, 90, 91, 92, 100, 109, 110, 137, 138, 156, 157, 159, 165, 170, 172, 173, 174, 182, 191, 192, 219, 220, 238, 239, 241, 247, 252, 254, 255, 261, 271, 272, 327, 405, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 505, 577, 578, 580, 582], "new": [88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 107, 118, 119, 137, 138, 150, 156, 157, 159, 160, 165, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 189, 200, 201, 219, 220, 232, 238, 239, 241, 242, 247, 252, 254, 255, 256, 257, 261, 262, 269, 276, 277, 296, 302, 304, 313, 327, 337, 368, 388, 397, 399, 405, 459, 480, 481, 490, 493, 511, 518, 547, 576, 577, 580, 582], "nodeindic": [88, 94, 112, 139, 140, 141, 142, 148, 162, 170, 176, 194, 221, 222, 223, 224, 230, 244, 252, 257, 274, 289, 290, 291, 310, 326, 348, 350, 363, 389, 390, 413, 453, 482, 509, 514, 536, 539, 578, 582], "arbitrari": [88, 170, 252, 381, 413, 578], "data_payload": [88, 170, 252], "node_index": [88, 129, 147, 170, 211, 229, 252, 286, 295, 578], "add_nod": [88, 100, 101, 170, 182, 183, 252, 262, 481, 576, 577, 578, 580, 582], "real": [88, 170, 577, 580], "introduc": [88, 101, 170, 183, 262, 578, 580, 582], "By": [88, 118, 119, 130, 131, 155, 160, 170, 200, 201, 212, 213, 237, 242, 252, 276, 277, 302, 311, 316, 317, 323, 355, 356, 362, 378, 386, 400, 410, 445, 446, 452, 469, 478, 494, 507, 526, 548, 550, 557, 563, 571, 572, 578, 582], "disabl": [88, 170, 252, 311, 578], "check_cycl": [88, 101, 170, 183, 311, 578, 580], "true": [88, 90, 97, 100, 101, 116, 117, 125, 126, 127, 130, 131, 136, 150, 155, 157, 160, 161, 165, 170, 172, 179, 182, 183, 198, 199, 207, 208, 209, 212, 213, 218, 232, 237, 239, 242, 243, 247, 261, 283, 284, 285, 296, 302, 303, 311, 314, 326, 329, 330, 335, 340, 341, 343, 363, 365, 367, 370, 371, 377, 378, 379, 382, 383, 384, 385, 386, 395, 396, 399, 400, 401, 404, 410, 411, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 453, 455, 458, 461, 462, 468, 470, 477, 478, 488, 489, 493, 494, 495, 496, 497, 499, 501, 502, 503, 507, 512, 513, 515, 519, 520, 533, 534, 547, 548, 549, 572, 577, 578, 579, 580, 582], "creation": [88, 170, 252, 575, 582], "With": [88, 170, 577, 578, 580], "add_edg": [88, 129, 147, 170, 211, 229, 261, 286, 295, 481, 577, 578, 580, 582], "truli": [88, 170], "note": [88, 96, 97, 137, 151, 153, 160, 165, 170, 178, 179, 219, 233, 235, 242, 247, 258, 279, 297, 299, 302, 334, 337, 348, 349, 350, 351, 368, 386, 399, 439, 459, 475, 476, 478, 493, 507, 515, 547, 571, 572, 575, 576, 577, 582], "add_edges_from": [88, 92, 110, 111, 170, 174, 192, 193, 255, 261, 272, 273, 576, 577, 578, 582], "add_edges_from_no_data": [88, 109, 170, 191, 271, 577, 578], "extend_from_edge_list": [88, 170, 332, 354, 366, 374, 456, 465, 577, 578, 582], "extend_from_weighted_edge_list": [88, 159, 170, 241, 577, 578], "come": [88, 170, 513, 574, 580], "penalti": [88, 170], "grow": [88, 170, 252], "leverag": [88, 164, 170, 246, 305, 575, 578, 579, 582], "add_child": [88, 90, 100, 170, 172, 182, 580], "overhead": [88, 170, 580], "parallel": [88, 101, 107, 127, 137, 165, 166, 170, 183, 189, 209, 219, 247, 248, 252, 254, 262, 269, 272, 285, 306, 325, 330, 334, 336, 338, 343, 346, 347, 355, 365, 371, 372, 378, 379, 380, 382, 383, 384, 388, 389, 398, 400, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 455, 462, 463, 469, 470, 471, 472, 473, 474, 480, 482, 491, 492, 494, 497, 511, 514, 515, 526, 541, 548, 578, 582], "kwarg": [88, 130, 131, 155, 170, 212, 213, 237, 252, 571, 572, 577, 578], "fals": [88, 97, 101, 111, 125, 126, 127, 130, 131, 140, 150, 155, 157, 160, 165, 170, 179, 183, 193, 207, 208, 209, 212, 213, 222, 232, 237, 239, 242, 247, 252, 253, 254, 255, 271, 272, 273, 283, 284, 285, 296, 302, 311, 314, 322, 329, 330, 335, 341, 342, 361, 365, 367, 378, 382, 383, 384, 385, 386, 395, 396, 399, 400, 401, 404, 410, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 458, 477, 478, 488, 489, 493, 494, 495, 496, 499, 501, 502, 503, 507, 512, 513, 515, 519, 520, 533, 534, 547, 548, 549, 572, 577, 578, 580, 582], "constructor": [88, 170, 252, 572, 578, 580, 582], "initi": [88, 170, 252, 311, 312, 313, 327, 338, 354, 374, 396, 405, 465, 489, 513, 534, 577, 578], "maximum": [88, 170, 252, 317, 323, 345, 355, 356, 362, 380, 388, 389, 390, 396, 406, 412, 419, 422, 445, 446, 452, 471, 480, 482, 483, 489, 497, 505, 511, 514, 515, 526, 534, 543, 572, 578], "32": [88, 170, 252, 571, 576, 578], "294": [88, 170, 252], "967": [88, 170, 252], "attempt": [88, 170, 252, 578, 580, 582], "than": [88, 114, 150, 170, 196, 232, 252, 275, 296, 314, 330, 334, 340, 345, 365, 370, 379, 380, 386, 388, 389, 391, 406, 411, 412, 419, 422, 426, 435, 437, 455, 461, 470, 471, 478, 480, 482, 484, 491, 497, 498, 507, 511, 514, 515, 522, 526, 532, 536, 540, 543, 577, 578, 579], "paramet": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 137, 138, 139, 140, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 189, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 261, 262, 264, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 309, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 571, 572, 573, 577, 578], "bool": [88, 97, 101, 125, 126, 127, 130, 131, 136, 150, 155, 157, 165, 170, 179, 183, 207, 208, 209, 212, 213, 218, 232, 237, 239, 247, 252, 283, 284, 285, 296, 311, 329, 330, 335, 340, 365, 367, 370, 377, 378, 379, 385, 386, 395, 396, 399, 400, 401, 404, 409, 410, 411, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 455, 458, 461, 468, 470, 477, 478, 488, 489, 493, 494, 495, 496, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 512, 513, 515, 519, 520, 533, 534, 546, 547, 548, 549, 572], "runtim": [88, 170, 389, 482, 514, 578, 580], "detect": [88, 127, 170, 209, 285, 311, 578], "multgraph": 88, "place": [88, 159, 170, 241, 252, 306, 307, 327, 405, 528, 578, 582], "attr": [88, 160, 170, 242, 252, 302, 391, 417, 484, 522, 527, 530, 577, 578, 582], "digraph": [88, 170, 355, 577], "dagwouldcycl": [88, 101, 170, 183], "parent": [89, 90, 91, 92, 95, 97, 116, 129, 149, 151, 171, 172, 173, 174, 177, 179, 198, 211, 231, 233, 253, 255, 286, 297, 331, 333, 578], "obj": [89, 91, 93, 95, 101, 114, 171, 173, 175, 177, 183, 196, 254, 256, 262, 275], "child": [89, 90, 91, 92, 95, 117, 147, 151, 163, 171, 172, 173, 174, 177, 199, 229, 233, 245, 253, 255, 295, 297], "int": [89, 90, 91, 92, 93, 94, 95, 96, 97, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 146, 147, 148, 149, 151, 152, 154, 155, 156, 157, 161, 162, 163, 166, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 195, 196, 197, 198, 199, 202, 203, 204, 205, 206, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 228, 229, 230, 231, 233, 234, 236, 237, 238, 239, 243, 244, 245, 248, 249, 252, 253, 254, 255, 256, 257, 258, 264, 275, 278, 279, 280, 281, 282, 283, 284, 286, 287, 288, 289, 295, 297, 298, 300, 303, 306, 307, 311, 312, 317, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 338, 345, 347, 349, 350, 351, 352, 353, 354, 356, 361, 362, 363, 364, 365, 366, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 392, 393, 396, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 451, 452, 453, 454, 455, 456, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 477, 478, 479, 480, 485, 486, 489, 491, 494, 495, 496, 497, 498, 502, 507, 510, 511, 513, 515, 521, 523, 524, 525, 526, 528, 529, 534, 543, 544, 545, 546, 548, 549, 572, 578], "attach": [89, 91, 92, 93, 94, 95, 171, 173, 174, 175, 176, 177, 254, 255, 256, 257, 327, 405, 577, 578], "duplic": [90, 172, 578], "obj_list": [91, 92, 94, 173, 174, 176, 254, 255, 257, 272], "neighbor": [96, 97, 116, 117, 140, 148, 149, 162, 163, 178, 179, 198, 199, 222, 230, 231, 244, 245, 258, 287, 353, 373, 464, 475, 476, 509, 577, 578], "dictionari": [96, 97, 100, 164, 178, 179, 182, 246, 258, 261, 305, 318, 319, 320, 321, 328, 329, 330, 334, 337, 340, 346, 357, 358, 359, 360, 364, 368, 370, 372, 376, 377, 382, 387, 388, 391, 396, 397, 403, 404, 414, 417, 447, 448, 449, 450, 454, 457, 459, 461, 463, 467, 468, 472, 475, 476, 479, 480, 481, 483, 484, 489, 490, 510, 511, 520, 522, 526, 527, 534, 542, 571, 572, 577, 578], "adjac": [96, 97, 113, 118, 119, 178, 179, 195, 200, 201, 258, 276, 277, 316, 355, 445, 481, 577, 578], "inbound": [96, 97, 128, 178, 179, 210, 258, 264], "outbound": [96, 97, 146, 178, 179, 228, 258, 578], "dat": [96, 178], "two": [96, 97, 138, 150, 155, 165, 178, 179, 220, 232, 237, 247, 262, 296, 322, 335, 337, 339, 341, 361, 367, 368, 369, 380, 383, 384, 388, 393, 394, 395, 397, 399, 401, 407, 408, 412, 415, 416, 418, 424, 431, 432, 433, 451, 458, 459, 460, 471, 473, 474, 480, 481, 486, 487, 488, 490, 493, 495, 497, 504, 511, 526, 528, 529, 531, 533, 536, 542, 544, 545, 547, 549, 574, 578, 582], "share": [96, 97, 102, 178, 179, 184, 258, 262, 263, 399, 493, 504, 547, 578], "specifi": [96, 97, 101, 105, 107, 128, 132, 133, 134, 135, 137, 146, 151, 153, 161, 164, 165, 169, 170, 178, 179, 183, 187, 189, 210, 214, 215, 216, 217, 219, 228, 233, 235, 243, 246, 247, 251, 252, 258, 262, 264, 267, 269, 297, 299, 303, 305, 309, 316, 322, 327, 328, 329, 332, 335, 338, 353, 354, 355, 361, 364, 366, 367, 373, 374, 375, 376, 377, 380, 381, 385, 386, 387, 388, 391, 396, 400, 401, 402, 403, 404, 405, 412, 414, 415, 417, 418, 420, 421, 423, 424, 426, 429, 430, 431, 432, 437, 440, 441, 442, 443, 444, 445, 451, 454, 456, 458, 464, 465, 466, 467, 468, 471, 475, 476, 477, 478, 479, 480, 484, 489, 494, 495, 497, 502, 503, 507, 510, 511, 515, 517, 518, 522, 526, 527, 528, 534, 536, 548, 549, 571, 572, 578, 582], "children": [97, 147, 179, 229, 331, 333, 435], "clear": [99, 181, 260, 578], "leav": [99, 101, 181, 183, 260, 262, 582], "intact": [99, 181, 260], "node_map": [100, 182, 261, 578], "node_map_func": [100, 182, 261], "edge_map_func": [100, 182, 261], "weight2": [100, 182, 261], "callabl": [100, 101, 113, 115, 137, 155, 157, 161, 164, 165, 169, 182, 183, 195, 197, 219, 237, 239, 243, 246, 247, 251, 261, 262, 303, 305, 309, 316, 318, 319, 320, 321, 326, 328, 348, 349, 350, 351, 355, 357, 358, 359, 360, 363, 364, 376, 380, 382, 383, 384, 385, 386, 387, 388, 391, 401, 403, 412, 413, 414, 415, 416, 417, 445, 447, 448, 449, 450, 453, 454, 467, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 484, 495, 497, 502, 503, 507, 510, 511, 513, 515, 516, 517, 518, 519, 522, 526, 527, 535, 536, 549, 571, 578], "singl": [100, 101, 113, 115, 137, 165, 182, 183, 195, 197, 219, 247, 258, 261, 262, 318, 319, 320, 321, 322, 328, 329, 330, 341, 342, 353, 357, 358, 359, 360, 361, 364, 365, 375, 376, 377, 379, 396, 402, 403, 404, 411, 427, 428, 438, 439, 447, 448, 449, 450, 451, 454, 455, 464, 466, 467, 468, 470, 489, 491, 492, 513, 515, 534, 535, 572, 575, 578, 579, 580, 582], "new_node_id": [100, 182, 261], "correspond": [100, 182, 383, 384, 415, 416, 473, 474, 481, 578, 582], "build": [100, 182, 261, 575, 576, 577, 578, 582], "visual": [100, 150, 164, 182, 232, 246, 261, 296, 305, 368, 397, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 459, 475, 490, 575, 578, 580, 582], "mpl_draw": [100, 150, 182, 232, 261, 296, 368, 397, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 459, 475, 490, 577, 578, 579, 580, 582], "b": [100, 111, 182, 193, 261, 273, 409, 428, 439, 481, 546, 576, 578, 580, 582], "c": [100, 111, 182, 193, 261, 273, 340, 370, 398, 461, 481, 483, 492, 497, 517, 574, 576, 577, 578, 580, 582], "with_label": [100, 182, 261, 572, 578, 582], "label": [100, 150, 182, 232, 261, 296, 334, 353, 373, 464, 572, 577, 578, 579, 580, 582], "str": [100, 150, 164, 169, 182, 232, 246, 251, 261, 296, 305, 309, 391, 417, 484, 522, 527, 530, 571, 572, 578, 580, 582], "edge_label": [100, 182, 261, 572, 577, 578, 582], "figur": [100, 150, 182, 232, 261, 296, 368, 397, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 459, 475, 490, 572, 578, 579, 580, 582], "size": [100, 150, 164, 170, 182, 232, 246, 252, 261, 296, 305, 368, 397, 409, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 459, 475, 490, 535, 546, 571, 572, 578, 579, 580, 582], "640x480": [100, 150, 182, 232, 261, 296, 368, 397, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 459, 475, 490, 572, 578, 579, 580, 582], "ax": [100, 150, 182, 232, 261, 296, 368, 397, 418, 419, 420, 421, 422, 423, 424, 425, 426, 429, 430, 431, 432, 433, 434, 435, 436, 437, 440, 441, 442, 443, 444, 459, 475, 490, 572, 578, 579, 580, 582], "second": [100, 120, 121, 166, 182, 202, 203, 248, 261, 278, 279, 283, 286, 287, 306, 337, 368, 384, 385, 386, 397, 399, 401, 416, 459, 474, 477, 478, 490, 493, 495, 497, 502, 503, 507, 547, 549, 574, 578, 582], "other_graph": [100, 182, 261, 578], "node_d": [100, 182, 261, 481, 578], "weight_combo_fn": [101, 165, 183, 247, 262, 578], "substitut": [101, 161, 183, 243, 262, 303], "ignor": [101, 107, 154, 156, 157, 158, 160, 183, 189, 236, 238, 239, 240, 242, 262, 269, 300, 301, 302, 341, 418, 420, 421, 423, 424, 426, 430, 431, 432, 437, 441, 442, 443, 444, 536, 580], "empti": [101, 130, 131, 183, 212, 213, 262, 287, 288, 313, 381, 389, 401, 406, 407, 425, 434, 482, 495, 500, 508, 514, 543, 544, 549, 578, 580, 582], "slower": [101, 183, 262], "associ": [101, 164, 183, 246, 262, 305, 571, 577, 578], "valid": [101, 183, 311, 312, 436, 475, 476, 504, 505, 572, 578], "contract": [101, 183, 262, 578], "inherit": [101, 183], "merg": [101, 138, 183, 220, 262, 399, 493, 547, 578], "occur": [101, 183, 254, 262, 272, 348, 349, 350, 351, 515, 578], "incom": [101, 130, 131, 155, 156, 157, 183, 212, 213, 237, 238, 239, 311, 348, 349, 350, 351, 578], "outgo": [101, 130, 131, 155, 156, 157, 183, 212, 213, 237, 238, 239, 578], "unspecifi": [101, 183, 262], "choos": [101, 183, 262, 475, 476, 572, 577, 578], "arbitrarili": [101, 183, 262], "subject": [101, 183, 262], "shallow": [102, 184, 263, 578], "origin": [102, 132, 133, 134, 135, 165, 184, 214, 215, 216, 217, 247, 263, 362, 375, 402, 452, 466, 540, 575, 577, 578, 580], "edgeindexmap": [103, 130, 185, 212, 265, 287, 578, 582], "edgeindic": [104, 105, 111, 131, 186, 187, 193, 213, 266, 267, 273, 288, 578, 582], "induc": [107, 189, 269, 386, 401, 478, 495, 507, 535, 549, 578], "subgraph": [107, 189, 269, 334, 345, 346, 372, 386, 401, 463, 478, 495, 502, 507, 512, 535, 549, 575, 578], "incid": [107, 130, 131, 189, 212, 213, 269, 287, 288, 325, 334, 578, 582], "silent": [107, 160, 189, 242, 269, 302], "extend": [109, 110, 191, 192, 271, 272, 327, 405, 578], "present": [109, 110, 122, 123, 130, 131, 137, 154, 155, 156, 157, 158, 160, 167, 191, 192, 204, 205, 212, 213, 219, 236, 237, 238, 239, 240, 242, 249, 271, 272, 280, 281, 287, 288, 300, 301, 302, 307, 389, 482, 514], "filter_funct": [111, 112, 193, 194, 273, 274], "filter": [111, 112, 116, 117, 193, 194, 198, 199, 273, 274, 341, 342, 578], "criteria": [111, 112, 193, 194, 273, 274, 578], "boolean": [111, 112, 113, 115, 116, 117, 193, 194, 195, 197, 198, 199, 273, 274, 326, 341, 342, 363, 401, 453, 495, 497, 515, 549, 578], "fit": [111, 112, 193, 194, 273, 274, 578], "complete_graph": [111, 193, 273, 441, 578], "def": [111, 112, 193, 194, 273, 274, 332, 354, 366, 374, 384, 416, 456, 465, 474, 571, 577, 578, 579, 580, 582], "my_filter_funct": [111, 112, 193, 194, 273, 274, 578], "assert": [111, 112, 140, 159, 193, 194, 222, 241, 273, 274, 476, 481, 483, 577, 578], "predic": [113, 115, 195, 197], "within": [114, 196, 275, 535, 578], "worst": [114, 196, 275], "o": [114, 155, 156, 157, 164, 169, 196, 237, 238, 239, 246, 251, 261, 275, 305, 309, 387, 399, 406, 407, 409, 457, 479, 493, 498, 510, 515, 543, 544, 546, 547, 572, 578], "equal": [114, 138, 155, 157, 196, 220, 237, 239, 275, 317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 385, 386, 389, 398, 399, 414, 415, 416, 446, 472, 473, 474, 477, 478, 482, 491, 492, 493, 502, 503, 507, 514, 541, 547, 578], "found": [114, 196, 275, 348, 349, 350, 351, 353, 373, 381, 389, 401, 464, 482, 495, 513, 514, 515, 532, 549, 576, 578, 579, 580], "predecessor": [115, 116, 132, 133, 140, 148, 155, 156, 157, 197, 198, 214, 215, 222, 230, 237, 238, 239, 313, 324, 331, 558, 578], "filter_fn": [116, 117, 198, 199, 341, 342, 580], "whose": [116, 117, 198, 199, 325, 336, 365, 379, 380, 388, 408, 411, 412, 455, 470, 471, 480, 497, 511, 512, 526, 535, 545, 551, 554, 578], "successor": [117, 134, 135, 139, 140, 155, 156, 157, 162, 199, 216, 217, 221, 222, 237, 238, 239, 244, 312, 333, 342, 352, 384, 416, 474, 578], "static": [118, 119, 150, 200, 201, 232, 276, 277, 296, 577, 578], "matrix": [118, 119, 200, 201, 276, 277, 316, 355, 378, 383, 384, 400, 410, 415, 416, 445, 469, 473, 474, 494, 526, 548, 578, 580], "null_valu": [118, 119, 200, 201, 276, 277, 316, 355, 378, 410, 445, 469, 578], "element": [118, 119, 150, 200, 201, 232, 276, 277, 287, 296, 337, 368, 378, 397, 421, 424, 431, 432, 443, 444, 459, 469, 490, 578], "construct": [118, 119, 170, 200, 201, 252, 276, 277, 481, 483, 512, 578, 582], "input": [118, 119, 155, 200, 201, 237, 276, 277, 312, 316, 318, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 334, 336, 337, 338, 340, 346, 347, 348, 349, 350, 351, 353, 355, 357, 358, 359, 360, 363, 364, 365, 368, 370, 372, 376, 378, 379, 380, 381, 388, 397, 398, 399, 400, 403, 404, 405, 410, 411, 412, 413, 419, 422, 445, 447, 448, 449, 450, 453, 454, 455, 457, 459, 461, 463, 464, 467, 470, 471, 475, 476, 480, 481, 483, 490, 491, 492, 493, 496, 497, 501, 509, 511, 516, 519, 520, 526, 530, 536, 537, 541, 542, 547, 548, 577, 578, 580, 582], "from_complex_adjacency_matrix": [118, 200, 276, 578], "numpi": [118, 119, 200, 201, 276, 277, 316, 355, 378, 383, 384, 410, 415, 416, 445, 469, 473, 474, 576, 577, 578], "float64": [118, 119, 200, 201, 276, 277, 577, 578], "complex": [118, 119, 155, 156, 157, 200, 201, 237, 238, 239, 276, 277, 398, 406, 409, 498, 543, 546, 575, 578], "complex128": [118, 119, 200, 201, 276, 277], "ndarrai": [118, 119, 200, 201, 276, 277, 316, 355, 378, 383, 384, 409, 410, 415, 416, 445, 469, 473, 474, 546], "arrai": [118, 119, 200, 201, 276, 277, 316, 355, 409, 445, 546, 572, 577, 578], "dimension": [118, 119, 200, 201, 276, 277, 577, 578], "np": [118, 119, 200, 201, 276, 277, 383, 384, 407, 409, 415, 416, 473, 474, 475, 544, 546, 577, 578], "null": [118, 119, 200, 201, 276, 277, 316, 355, 378, 410, 445, 469, 578], "0j": [119, 201, 277, 578], "from_adjacency_matrix": [119, 201, 277, 577, 578, 582], "noedgebetweennod": [120, 121, 151, 153, 166, 202, 203, 233, 235, 248, 278, 279, 297, 299, 306], "edge_index": [122, 123, 167, 204, 205, 249, 280, 281, 307, 578, 582], "indexerror": [122, 123, 124, 167, 204, 205, 206, 249, 280, 281, 282, 307, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 430, 431, 432, 435, 436, 437, 438, 439, 441, 442, 443, 444, 578], "invalid": [124, 206, 282, 311, 346, 475, 476, 521, 541, 578], "destin": [125, 207, 329, 377, 387, 404, 448, 450, 468, 479, 510, 578], "recreat": [129, 147, 211, 229, 286, 295, 578], "param": [129, 211, 330, 365, 379, 411, 455, 470], "parent_index": [129, 211, 286], "edge_data": [129, 147, 211, 229, 286, 295], "weightededgelist": [129, 147, 168, 211, 229, 250, 286, 295, 308, 517, 578], "all_edg": [130, 131, 212, 213], "later": [131, 213, 288], "retriev": [131, 213, 288, 401, 495, 549, 578], "get_edge_data_by_index": [131, 213, 288, 578, 582], "get_edge_endpoints_by_index": [131, 213, 288, 578, 582], "ref_nod": [132, 133, 134, 135, 214, 215, 216, 217], "essenti": [132, 133, 134, 135, 214, 215, 216, 217], "copi": [132, 133, 134, 135, 137, 160, 161, 214, 215, 216, 217, 219, 242, 243, 302, 303, 304, 577, 578], "symmetr": [136, 137, 218, 219, 546, 578], "edge_payload_fn": [137, 219], "make": [137, 219, 319, 321, 329, 358, 360, 377, 404, 448, 450, 468, 572, 576, 578, 580, 582], "revers": [137, 219, 311, 513, 577, 578], "guarante": [137, 157, 219, 239, 380, 388, 389, 412, 471, 480, 482, 497, 511, 514, 526, 538, 577, 578, 579, 582], "execut": [137, 219, 382, 383, 384, 389, 414, 415, 416, 472, 473, 474, 482, 514, 578, 580], "edge_payload": [137, 219], "typic": [137, 219, 577, 582], "lower": [137, 219, 395, 407, 488, 533, 544, 578], "v": [138, 220, 330, 332, 340, 353, 354, 365, 366, 370, 373, 374, 375, 379, 387, 400, 402, 409, 411, 433, 455, 456, 461, 464, 465, 466, 470, 479, 494, 498, 510, 513, 540, 546, 548, 552, 553, 558, 559, 560, 564, 568, 572, 578, 579, 580], "successor_indic": [139, 221, 578], "agnost": [140, 222], "undirect": [140, 165, 222, 247, 252, 286, 295, 325, 329, 332, 334, 336, 338, 344, 353, 354, 368, 377, 378, 382, 383, 384, 397, 400, 404, 410, 416, 418, 419, 420, 421, 434, 437, 438, 439, 440, 441, 442, 443, 444, 456, 459, 462, 464, 465, 466, 468, 469, 477, 478, 490, 492, 493, 496, 498, 506, 515, 517, 518, 524, 543, 544, 545, 546, 548, 555, 558, 561, 578, 580, 582], "thereon": [140, 222], "directed_cycle_graph": [140, 222, 578, 580], "num_nod": [140, 222, 406, 407, 420, 421, 423, 424, 430, 431, 432, 435, 442, 443, 444, 528, 543, 544, 578], "10": [140, 222, 338, 340, 380, 388, 412, 428, 431, 432, 436, 439, 443, 444, 471, 480, 506, 511, 532, 535, 572, 575, 576, 579], "bidirect": [140, 165, 222, 247, 304, 378, 382, 383, 384, 400, 410, 416, 422, 424, 426, 427, 428, 429, 431, 432, 438, 548, 578], "same_neighbor": [140, 222], "to_undirect": [140, 222, 578], "prefer": [141, 223, 290], "earlier": [141, 223, 290, 366, 374, 375, 456, 465, 466, 578, 580], "child_index": [147, 229, 295], "indici": [148, 158, 162, 230, 240, 244, 289, 301], "delimin": [150, 169, 232, 251, 296, 309], "file": [150, 164, 169, 232, 246, 251, 296, 305, 309, 391, 417, 484, 522, 530, 571, 577, 578, 582], "seper": [150, 232, 296], "3rd": [150, 232, 296], "charact": [150, 169, 232, 251, 296, 309, 578], "whitespac": [150, 232, 296, 578], "separ": [150, 232, 296, 571, 577, 578], "field": [150, 232, 296, 391, 484, 522, 530], "uniqu": [150, 232, 296, 420, 423, 577, 578, 582], "identifi": [150, 152, 232, 234, 287, 296, 298, 578, 582], "tempfil": [150, 164, 169, 232, 246, 251, 261, 296, 305, 309, 578, 582], "namedtemporaryfil": [150, 232, 296, 578, 582], "wt": [150, 232, 296, 578, 582], "fd": [150, 232, 296, 578, 582], "flush": [150, 232, 296, 578, 582], "index_list": [153, 158, 235, 240, 299, 301], "pair": [153, 156, 157, 235, 238, 239, 299, 304, 317, 330, 336, 356, 365, 379, 382, 383, 384, 389, 396, 400, 411, 414, 415, 416, 420, 423, 429, 440, 446, 455, 470, 472, 473, 474, 482, 489, 492, 494, 498, 514, 534, 535, 548, 575, 578, 579, 582], "effect": [154, 155, 156, 157, 236, 237, 238, 239, 300, 406, 543], "use_outgo": [155, 157, 237, 239], "retain": [155, 237, 578], "minimum": [155, 156, 157, 237, 238, 239, 317, 323, 355, 356, 362, 445, 446, 452, 517, 518, 535, 536, 572, 578], "mathcal": [155, 156, 157, 237, 238, 239, 399, 493, 547, 578], "e_i": [155, 156, 157, 237, 238, 239], "e_o": [155, 156, 157, 237, 238, 239], "respect": [155, 237, 338, 399, 406, 407, 493, 543, 544, 547, 574, 577, 578, 580], "cast": [155, 237, 316, 355, 382, 383, 384, 414, 415, 416, 445, 472, 473, 474, 516, 517, 518, 535, 572, 578], "hashabl": [155, 157, 237, 239, 577, 578, 582], "quantiti": [155, 237], "remove_node_retain_edges_by_kei": [155, 237, 578], "referenti": [155, 237, 578], "remove_node_retain_edges_by_id": [155, 237, 578], "ingor": [155, 237, 578], "willl": [155, 237], "lambda": [155, 164, 237, 246, 305, 316, 348, 349, 350, 351, 355, 382, 383, 384, 385, 386, 389, 414, 415, 416, 427, 428, 438, 439, 445, 472, 473, 474, 477, 478, 482, 502, 503, 507, 514, 515, 517, 518, 536, 572, 577, 578, 580], "in_edg": [155, 237, 578], "out_edg": [155, 237, 578, 580], "had": [155, 237, 311, 312, 578], "consequ": [156, 157, 238, 239], "exact": [157, 239, 578], "determinist": [157, 161, 239, 243, 303, 578], "drawn": [157, 239, 506, 572], "exactli": [157, 239, 341, 345, 578], "position": [157, 239], "relev": [157, 239, 578, 579], "opposit": [159, 241, 513], "weighted_edge_list": [159, 241, 315, 577, 578], "preserve_attr": [160, 242, 302], "edge_map_fn": [161, 243, 303, 578], "node_filt": [161, 243, 303], "edge_weight_map": [161, 243, 303], "nodemap": [161, 243, 303, 401, 495, 549, 578], "succesor": [162, 244], "node_attr": [164, 246, 305, 391, 417, 484, 522, 527, 571, 578], "edge_attr": [164, 246, 305, 391, 417, 484, 522, 527, 578], "graph_attr": [164, 246, 305, 391, 417, 484, 522, 527, 571], "filenam": [164, 246, 305, 571], "dot": [164, 246, 305, 571, 578], "typeerror": [164, 169, 246, 251, 305, 309, 346, 366, 374, 375, 429, 436, 440, 456, 465, 466, 541, 578], "unfortun": [164, 246, 305], "graphviz": [164, 246, 305, 571, 577, 578, 579, 582], "pydot": [164, 246, 261, 305, 571, 577, 578], "pil": [164, 246, 261, 305, 427, 428, 438, 439, 571, 578, 579, 580, 582], "directed_gnp_random_graph": [164, 246, 409, 578], "15": [164, 246, 305, 435, 436, 535, 575, 579], "25": [164, 246, 305, 330, 365, 455, 572, 578], "dot_str": [164, 246, 305, 578], "fillcolor": [164, 246, 305, 427, 428, 438, 439, 571, 578, 579], "lightblu": [164, 246, 305, 427, 428, 438, 439, 578], "style": [164, 246, 305, 427, 428, 438, 439, 571, 572, 578, 579, 582], "fill": [164, 246, 305, 426, 427, 428, 437, 438, 439, 571, 578, 579, 582], "graph_from_dot_data": [164, 246, 305, 578], "temporarydirectori": [164, 246, 305, 578], "tmpdirnam": [164, 246, 305, 578], "tmp_path": [164, 246, 305, 578], "join": [164, 169, 246, 251, 305, 309, 418, 429, 440, 528, 578], "png": [164, 246, 305, 571, 578], "write_png": [164, 246, 305, 578], "pngimageplugin": [164, 246, 305, 427, 428, 438, 439, 571, 578, 579, 580, 582], "pngimagefil": [164, 246, 305, 427, 428, 438, 439, 571, 578, 579, 580, 582], "rgba": [164, 246, 305, 427, 428, 438, 439, 572, 578, 579, 580, 582], "939x1115": 164, "condens": [165, 247, 578], "kept": [165, 247], "inplac": [166, 248, 578], "update_edge_by_index": [166, 248, 306, 578, 582], "weight_fn": [169, 251, 309, 316, 322, 329, 348, 349, 350, 351, 355, 361, 375, 377, 380, 382, 383, 384, 388, 396, 402, 404, 412, 414, 415, 416, 445, 451, 466, 468, 471, 472, 473, 474, 480, 489, 497, 511, 515, 516, 517, 518, 526, 534, 535, 536, 576, 577, 578], "callback": [169, 251, 309, 332, 354, 366, 374, 375, 402, 456, 465, 466, 475, 476, 572, 577, 578], "gettempdir": [169, 251, 309], "rt": [169, 251, 309], "edge_fil": [169, 251, 309], "metadata": [170, 252, 582], "keyword": [170, 252, 528, 578], "source_path": [170, 252], "tmp": [170, 252], "csv": [170, 252], "new_path": [170, 252], "old_path": [170, 252], "assign": [170, 252, 334, 355, 429, 440, 445, 475, 476, 526, 577, 578, 579, 582], "node_count_hint": [170, 252, 578], "hint": [170, 252, 578], "alloc": [170, 252, 578], "enough": [170, 252], "capac": [170, 252], "store": [170, 252, 528, 530, 580, 582], "prepopul": [170, 252], "optim": [170, 252, 396, 475, 489, 491, 505, 534, 535, 564, 578, 580], "complet": [170, 252, 406, 407, 418, 420, 423, 430, 441, 442, 516, 535, 543, 544, 578, 580], "known": [170, 252, 390, 406, 407, 543, 544, 578, 580], "advanc": [170, 252], "edge_count_hint": [170, 252, 578], "885x1115": 246, "last": [254, 272, 353, 373, 464, 574, 578, 580], "callabbl": 261, "node_": 261, "represent": [262, 396, 489, 534, 578, 580], "rest": [262, 578], "get_all_edge_data": 279, "alwai": [286, 287, 295, 406, 407, 543, 544, 577, 578], "easili": [287, 578, 582], "undirected_gnp_random_graph": [305, 546, 578], "550x539": 305, "path_graph": [309, 459, 490, 495, 549, 578, 580, 582], "partition_it": 310, "another_block": 310, "parititon_it": 310, "the_second_block": 310, "topolog": [311, 312, 348, 349, 350, 351, 513, 538, 539, 578, 580], "is_act": 311, "get_readi": [311, 312, 314], "sorter": [311, 578], "underli": 311, "mutat": [311, 332, 354, 366, 374, 375, 402, 456, 465, 466, 578, 582], "recommend": 311, "daghascycl": [311, 348, 349, 350, 351, 538, 539], "progress": [311, 313, 314], "regular": [311, 429, 436, 440, 513], "flip": 311, "ones": 311, "certainli": [311, 513], "domin": [311, 513, 578], "notabl": [311, 513], "natur": [311, 513], "zero": [311, 407, 513, 526, 536, 544, 578], "valueerror": [311, 312, 322, 345, 356, 359, 360, 361, 363, 376, 377, 387, 413, 446, 449, 450, 451, 453, 467, 468, 479, 513, 516, 535, 578], "partial": [311, 312, 491, 513, 578], "themselv": [311, 312, 513], "check_arg": [311, 578], "were": [311, 513, 578, 580, 582], "circuit": [311, 532, 580], "meaning": [311, 578], "memori": [311, 578], "improv": [311, 340, 370, 389, 461, 482, 502, 514, 575, 578], "undefin": [311, 578], "unblock": 312, "yet": [312, 314, 578], "happen": 312, "amongst": 312, "further": [313, 578], "haven": 314, "default_weight": [316, 322, 329, 355, 361, 377, 380, 382, 383, 384, 388, 396, 404, 412, 414, 415, 416, 445, 451, 468, 471, 472, 473, 474, 480, 489, 511, 515, 517, 518, 526, 534], "sum": [316, 328, 330, 347, 355, 364, 365, 376, 379, 380, 388, 403, 411, 412, 445, 454, 455, 467, 470, 471, 480, 497, 511, 515, 526, 535, 578], "tell": [316, 355, 382, 383, 384, 414, 415, 416, 445, 472, 473, 474, 517, 518], "rust": [316, 355, 382, 383, 384, 414, 415, 416, 445, 472, 473, 474, 517, 518, 575, 576, 577, 578], "extract": [316, 355, 375, 382, 383, 384, 402, 414, 415, 416, 445, 466, 472, 473, 474, 517, 518], "numer": [316, 355, 382, 383, 384, 414, 415, 416, 445, 472, 473, 474, 517, 518, 572, 575, 577, 582], "absenc": [316, 355, 410, 445, 578], "rtype": [316, 330, 355, 365, 379, 411, 455, 470], "min_depth": [317, 323, 356, 362, 446, 452, 578], "cutoff": [317, 323, 356, 362, 446, 452, 578], "multithread": [317, 318, 319, 320, 321, 330, 356, 357, 358, 359, 360, 365, 378, 379, 382, 383, 384, 389, 398, 400, 410, 411, 414, 415, 416, 446, 455, 469, 470, 472, 473, 474, 482, 491, 492, 494, 514, 541, 548, 578], "thread": [317, 318, 319, 320, 321, 330, 356, 357, 358, 359, 360, 365, 378, 379, 382, 383, 384, 389, 398, 400, 410, 411, 414, 415, 416, 446, 455, 469, 470, 472, 473, 474, 482, 491, 492, 494, 514, 541, 548, 578], "pool": [317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 389, 398, 414, 415, 416, 446, 472, 473, 474, 482, 491, 492, 514, 541], "cpu": [317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 382, 383, 384, 389, 398, 400, 414, 415, 416, 446, 472, 473, 474, 482, 491, 492, 494, 514, 541, 548, 574, 576, 578], "tune": [317, 318, 319, 320, 321, 356, 357, 358, 359, 360, 378, 382, 383, 384, 389, 398, 400, 410, 414, 415, 416, 446, 469, 472, 473, 474, 482, 491, 492, 494, 514, 541, 548], "rayon_num_thread": [317, 318, 319, 320, 321, 330, 356, 357, 358, 359, 360, 365, 378, 379, 382, 383, 384, 389, 398, 400, 410, 411, 414, 415, 416, 446, 455, 469, 470, 472, 473, 474, 482, 491, 492, 494, 514, 541, 548, 578], "depth": [317, 323, 338, 353, 354, 356, 362, 373, 374, 446, 452, 464, 465, 512, 578], "regardless": [317, 323, 356, 362, 446, 452], "allpairsmultiplepathmap": [317, 356, 446], "edge_cost_fn": [318, 319, 320, 321, 326, 328, 357, 358, 359, 360, 363, 364, 376, 403, 413, 447, 448, 449, 450, 453, 454, 467, 519], "calcul": [318, 320, 330, 340, 357, 359, 365, 370, 372, 378, 379, 390, 400, 410, 411, 447, 449, 455, 461, 469, 470, 494, 548, 574, 576, 578], "bellman": [318, 319, 328, 329, 357, 358, 364, 413, 447, 448, 454, 519, 578], "ford": [318, 319, 328, 329, 357, 358, 364, 413, 447, 448, 454, 519, 578], "act": [318, 319, 320, 321, 357, 358, 359, 360, 447, 448, 449, 450, 577], "cost": [318, 319, 320, 321, 322, 326, 328, 329, 357, 358, 359, 360, 361, 363, 364, 375, 376, 377, 387, 396, 402, 403, 404, 413, 447, 448, 449, 450, 451, 453, 454, 466, 467, 468, 479, 489, 510, 517, 518, 519, 534, 578], "allpairspathlengthmap": [318, 320, 357, 359, 382, 414, 447, 449, 472, 578], "negativecycl": [318, 319, 328, 329, 357, 358, 364, 447, 448, 454], "neg": [318, 319, 322, 326, 328, 329, 341, 357, 358, 359, 360, 361, 363, 364, 376, 377, 382, 383, 384, 387, 403, 413, 414, 415, 416, 436, 447, 448, 449, 450, 451, 453, 454, 467, 468, 472, 473, 474, 479, 516, 519, 535, 578], "run": [319, 321, 330, 341, 342, 358, 360, 365, 378, 379, 380, 382, 383, 384, 388, 389, 398, 400, 401, 407, 410, 411, 414, 415, 416, 419, 422, 455, 457, 469, 470, 471, 472, 473, 474, 480, 482, 491, 492, 494, 495, 497, 514, 515, 526, 541, 544, 548, 549, 572, 575, 576, 578, 580, 582], "allpairspathmap": [319, 321, 358, 360, 448, 450], "dijkstra": [320, 321, 322, 359, 360, 361, 375, 376, 377, 382, 383, 384, 402, 403, 404, 414, 415, 416, 449, 450, 451, 466, 467, 468, 472, 473, 474, 578], "as_undirect": [322, 329, 361, 377, 378, 382, 383, 384, 400, 404, 410, 416, 468, 496, 548, 578], "isn": [322, 329, 361, 377, 396, 404, 405, 451, 468, 489, 517, 518, 534, 577], "nan": [322, 359, 360, 361, 363, 376, 377, 387, 400, 449, 450, 451, 453, 467, 468, 479, 494, 516, 535, 536, 548, 578], "from_": 323, "repeat": [323, 332, 338, 353, 354, 362, 366, 373, 374, 375, 402, 452, 456, 464, 465, 466], "inner": [323, 338, 362, 452, 578], "articul": [325, 334, 578], "cut": [325, 334, 536, 578], "vertex": [325, 332, 338, 354, 366, 374, 375, 400, 402, 456, 465, 466, 475, 476, 481, 492, 494, 548, 551, 552, 553, 554, 559, 560, 564, 567, 568, 578], "along": [325, 578], "increas": [325, 336, 396, 489, 498, 534, 578], "implicitli": [325, 334, 336, 338, 346, 347, 372, 398, 463, 492, 541], "assum": [325, 334, 336, 338, 346, 347, 372, 398, 463, 492, 541, 578], "loop": [325, 334, 336, 338, 343, 346, 347, 371, 372, 381, 398, 406, 409, 462, 463, 492, 541, 543, 546, 578], "produc": [325, 334, 336, 338, 346, 347, 372, 398, 463, 483, 491, 492, 535, 541, 578], "incorrect": [325, 334, 336, 338, 346, 347, 372, 398, 463, 492, 541, 578], "unexpect": [325, 334, 336, 338, 346, 347, 348, 349, 350, 351, 372, 398, 463, 492, 541, 578], "goal_fn": [326, 363, 453], "estimate_cost_fn": [326, 363, 453], "comput": [326, 328, 330, 334, 340, 343, 363, 364, 365, 370, 371, 376, 379, 380, 387, 388, 389, 398, 400, 403, 411, 412, 453, 454, 455, 461, 462, 467, 470, 471, 479, 480, 482, 492, 494, 497, 510, 511, 514, 515, 526, 535, 536, 537, 541, 542, 548, 572, 578, 580], "estim": [326, 363, 453], "admiss": [326, 363, 453], "never": [326, 343, 363, 371, 453, 462, 561, 578], "overestim": [326, 363, 453], "nearest": [326, 363, 453], "goal": [326, 328, 363, 364, 376, 387, 403, 453, 454, 467, 479, 510, 577, 578], "seed": [327, 393, 396, 405, 406, 407, 408, 409, 486, 489, 491, 498, 528, 529, 534, 543, 544, 545, 546, 578], "initial_graph": [327, 405, 578], "barab\u00e1si": [327, 405, 578], "albert": [327, 405, 578], "preferenti": [327, 405, 578], "grown": [327, 405, 575, 582], "l": [327, 405, 481, 526, 528, 578], "r": [327, 405, 435, 498, 526, 574, 575, 578], "emerg": [327, 405], "scale": [327, 335, 339, 340, 367, 369, 370, 394, 395, 396, 405, 433, 458, 460, 461, 487, 488, 489, 531, 533, 534, 572, 578], "network": [327, 340, 379, 396, 398, 405, 407, 411, 470, 489, 534, 544, 574, 575, 578, 582], "scienc": [327, 340, 405], "286": [327, 405], "pp": [327, 405], "509": [327, 405], "512": [327, 405], "1999": [327, 405, 497, 526], "star_graph": [327, 405, 578], "star": [327, 405, 432, 436, 444, 578], "spfa": [328, 329, 364, 413, 454, 519, 578], "heurist": [328, 329, 364, 385, 386, 401, 413, 454, 475, 477, 478, 495, 502, 503, 507, 519, 549, 578], "wit": 329, "parallel_threshold": [330, 365, 378, 379, 382, 383, 384, 400, 410, 411, 414, 415, 416, 455, 469, 470, 472, 473, 474, 491, 494, 548, 578], "50": [330, 365, 379, 396, 411, 455, 470, 489, 491, 534, 578], "fraction": [330, 340, 365, 370, 379, 411, 455, 461, 470, 578], "through": [330, 365, 379, 411, 455, 470, 578, 579, 580], "math": [330, 365, 379, 411, 455, 470, 578], "c_b": [330, 365, 379, 411, 455, 470, 578, 579], "sum_": [330, 340, 365, 370, 379, 400, 411, 455, 461, 470, 494, 498, 548, 578, 579], "frac": [330, 340, 365, 370, 379, 396, 398, 400, 411, 455, 461, 470, 489, 492, 494, 498, 534, 548, 578, 579], "sigma": [330, 365, 379, 411, 455, 470, 578, 579], "ulrik": [330, 365, 379, 407, 411, 455, 470, 506, 544, 578], "brand": [330, 365, 379, 407, 411, 455, 470, 506, 544, 578], "journal": [330, 365, 380, 412, 436, 455, 471, 497, 536, 578], "mathemat": [330, 365, 455, 578], "sociologi": [330, 365, 380, 412, 455, 471, 578], "163": [330, 365, 455, 578], "177": [330, 365, 455, 578], "2001": [330, 365, 455, 578], "abov": [330, 365, 378, 379, 382, 383, 384, 389, 400, 407, 410, 411, 414, 415, 416, 419, 422, 455, 469, 470, 472, 473, 474, 482, 494, 514, 544, 548, 577, 578, 580, 582], "env": [330, 365, 378, 379, 400, 410, 411, 455, 469, 470, 494, 548], "var": [330, 365, 378, 379, 400, 410, 411, 455, 469, 470, 494, 548], "distinct": [330, 365, 379, 411, 420, 423, 455, 470, 504, 580], "breadth": [331, 332, 333, 366, 456, 578], "bf": [331, 332, 333, 366, 456], "bfspredecessor": 331, "visitor": [332, 354, 366, 374, 375, 402, 456, 465, 466, 550, 557, 563, 578], "pseudo": [332, 353, 354, 366, 373, 374, 375, 402, 456, 464, 465, 466], "code": [332, 353, 354, 366, 373, 374, 375, 402, 427, 428, 438, 439, 456, 464, 465, 466, 575, 578, 580, 582], "annot": [332, 354, 366, 374, 375, 402, 456, 465, 466, 578], "event": [332, 354, 366, 374, 375, 402, 456, 465, 466, 550, 557, 558, 563, 565, 566, 578], "white": [332, 354, 366, 374, 456, 465, 582], "grai": [332, 354, 366, 374, 456, 465, 554], "equeu": [332, 366, 456], "q": [332, 366, 375, 402, 456, 466], "\u00f8": [332, 353, 366, 373, 375, 402, 456, 464, 466], "dequeu": [332, 366, 456], "adj": [332, 354, 366, 374, 375, 402, 456, 465, 466, 577, 578], "els": [332, 353, 354, 366, 373, 374, 375, 402, 456, 464, 465, 466, 571, 577, 578, 580, 582], "insid": [332, 354, 366, 374, 375, 402, 456, 465, 466, 550, 557, 563], "stop": [332, 341, 354, 366, 374, 375, 376, 380, 385, 386, 388, 396, 401, 402, 403, 412, 456, 465, 466, 467, 471, 477, 478, 480, 489, 495, 497, 502, 507, 511, 526, 534, 549, 570, 578], "immedi": [332, 354, 366, 374, 375, 388, 402, 456, 465, 466, 480, 511, 578], "exploit": [332, 354, 366, 374, 375, 402, 456, 465, 466], "exit": [332, 354, 366, 374, 375, 402, 456, 465, 466, 578], "earli": [332, 354, 366, 374, 375, 402, 456, 465, 466], "stopsearch": [332, 354, 366, 374, 375, 402, 456, 465, 466], "prune": [332, 354, 366, 374, 375, 402, 456, 465, 466, 569], "prunesearch": [332, 354, 366, 374, 375, 402, 456, 465, 466], "visit": [332, 354, 366, 374, 385, 386, 401, 456, 465, 477, 478, 495, 502, 507, 549, 578], "treeedgesrecord": [332, 354, 366, 374, 456, 465, 578], "tree_edg": [332, 354, 366, 374, 456, 465, 558, 578], "append": [332, 354, 366, 374, 384, 416, 419, 422, 426, 435, 437, 456, 465, 474, 578, 579], "vi": [332, 354, 366, 374, 456, 465, 578], "chosen": [332, 338, 353, 354, 366, 373, 374, 375, 402, 456, 464, 465, 466], "arbitrarli": [332, 338, 353, 354, 366, 373, 374, 375, 402, 456, 464, 465, 466], "invok": [332, 354, 366, 374, 375, 402, 456, 465, 466, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568], "subclass": [332, 354, 366, 374, 375, 402, 456, 465, 466, 578], "bfssuccessor": [333, 578], "disconnect": [334, 400, 494, 536, 548, 578], "vertic": [334, 419, 420, 422, 423, 457, 481, 513, 560, 578, 582], "first_nod": [335, 367, 458], "horizont": [335, 367, 458], "center": [335, 339, 367, 369, 393, 394, 395, 396, 421, 424, 431, 432, 443, 444, 458, 460, 486, 487, 488, 489, 529, 531, 533, 534], "aspect_ratio": [335, 367, 458], "3333333333333333": 335, "bipartit": [335, 367, 408, 457, 458, 499, 542, 545, 578], "left": [335, 367, 408, 428, 439, 458, 498, 506, 545], "horitont": [335, 458], "orient": [335, 338, 367, 398, 458], "ratio": [335, 340, 367, 370, 458, 461, 578], "width": [335, 367, 458, 572], "height": [335, 367, 458], "pos2dmap": [335, 339, 367, 369, 393, 394, 395, 458, 460, 486, 487, 488, 529, 531, 533, 572, 577, 578], "cartesian": [337, 368, 459, 578], "product": [337, 368, 397, 459, 490, 578], "productnodemap": [337, 368, 397, 459, 490], "chain": [338, 341, 578], "decomposit": [338, 578], "deriv": [338, 388, 480, 511, 578], "fundament": [338, 347, 578], "manner": [338, 578, 582], "begin": [338, 580], "nontre": 338, "awai": 338, "overlap": [338, 578], "segment": 338, "inform": [338, 408, 530, 545, 574, 578, 582], "schmidt": 338, "jen": 338, "2013": [338, 578], "test": [338, 506, 515, 576, 578], "letter": [338, 574], "113": 338, "241": 338, "244": 338, "elsevi": 338, "doi": [338, 340, 380, 412, 436, 471, 506, 532, 535, 578], "1016": [338, 436, 535, 578], "j": [338, 420, 423, 433, 497, 498, 578], "ipl": [338, 578], "016": [338, 578], "circular": [339, 369, 460], "wf_improv": [340, 370, 461], "close": [340, 370, 396, 461, 489, 532, 534, 578], "reciproc": [340, 370, 461, 578], "averag": [340, 355, 370, 387, 400, 445, 461, 479, 494, 510, 548, 578], "distanc": [340, 370, 378, 383, 384, 396, 400, 410, 415, 416, 427, 428, 438, 439, 461, 469, 473, 474, 489, 494, 498, 516, 528, 534, 535, 548, 564, 566, 574, 578], "reachabl": [340, 353, 370, 373, 387, 461, 464, 479, 510, 578], "reach": [340, 370, 376, 380, 388, 403, 412, 461, 467, 471, 480, 497, 511, 526, 578], "altern": [340, 370, 461, 577, 579, 582], "formula": [340, 370, 461], "actor": [340, 370, 461], "who": [340, 370, 461, 578, 582], "wf": [340, 370, 461], "c_": [340, 370, 461], "wasserman": 340, "faust": 340, "k": [340, 345, 346, 347, 372, 387, 396, 435, 436, 463, 479, 489, 510, 534, 572, 578], "1994": 340, "social": [340, 379, 411, 470, 578], "cambridg": 340, "press": 340, "1017": 340, "cbo9780511815478": 340, "color_fn": 341, "collect": [341, 342, 347, 538, 580], "bicolor": 341, "continu": [341, 396, 489, 534, 577, 578], "core": [346, 372, 463, 530, 574, 578], "basi": [347, 578], "minim": [347, 491, 535, 579], "summat": 347, "exclus": 347, "cacm": 347, "491": 347, "paton": 347, "comm": 347, "acm": [347, 497, 515, 536], "12": [347, 436, 572, 575, 576], "sept": 347, "1969": [347, 436], "514": 347, "518": 347, "longest": [348, 349, 350, 351, 389, 482, 514, 578], "unsign": [348, 349, 578], "_": [348, 349, 350, 351, 368, 397, 416, 459, 490, 578], "could": [348, 349, 350, 351, 572, 577, 578, 580, 582], "df": [353, 354, 373, 374, 381, 464, 465, 560], "procedur": [353, 373, 433, 464, 578], "stack": [353, 373, 464], "push": [353, 373, 464], "hasnext": [353, 373, 464], "w": [353, 373, 464, 540], "pop": [353, 373, 464, 564], "span": [353, 464, 517, 518, 535, 578], "examin": [354, 374, 375, 402, 465, 466, 551, 553, 554, 560, 565, 566, 568, 578, 580], "cross": [354, 374, 465, 555, 561, 576], "forward": [354, 374, 465, 561], "parallel_edg": [355, 445, 578], "dag_adjacency_matrix": 355, "determin": [355, 385, 386, 389, 409, 445, 477, 478, 482, 499, 502, 503, 507, 513, 514, 536, 546, 578], "min": [355, 375, 402, 445, 466, 536, 578, 579], "caus": [355, 445, 505, 578], "behavior": [355, 445, 578], "max": [355, 389, 419, 422, 445, 482, 514, 515, 578, 579], "avg": [355, 445, 578], "digraph_edge_betweenness_centr": 365, "pathlength": [365, 455], "centralitymap": [365, 370, 380, 388, 412, 455, 461, 471, 480, 497, 511, 526, 579], "version": [366, 374, 375, 456, 465, 466, 576, 577, 578], "33333333333333": [367, 458], "graph_1": [368, 397, 459, 490, 578], "graph_2": [368, 397, 459, 490, 578], "graph_product": [368, 397, 459, 490, 578], "in_degre": [372, 578], "out_degre": [372, 578], "infin": [375, 400, 402, 466, 494, 528, 548], "p": [375, 402, 407, 408, 409, 466, 498, 528, 544, 545, 546, 571, 572, 574, 578], "relax": [375, 402, 466, 565], "decreas": [375, 402, 466, 498], "300": [378, 382, 383, 384, 400, 410, 414, 415, 416, 469, 472, 473, 474, 494, 548, 572], "digraph_floyd_warshall_numpi": [378, 469, 577, 578], "absens": [378, 469], "definit": [379, 411, 470], "On": [379, 411, 470, 578], "variant": [379, 411, 428, 439, 470, 577, 578], "30": [379, 411, 470, 578], "136": [379, 411, 470, 578], "145": [379, 411, 470, 535, 578], "2008": [379, 411, 470, 578], "digraph_betweenness_centr": [379, 578], "edgecentralitymap": [379, 411, 470], "max_it": [380, 388, 412, 471, 480, 497, 511, 526], "100": [380, 412, 471, 497, 511, 526, 578], "tol": [380, 388, 396, 412, 471, 480, 489, 497, 511, 526, 534], "1e": [380, 388, 396, 412, 471, 480, 489, 497, 511, 526, 534], "06": [380, 388, 396, 412, 471, 480, 489, 511, 526, 534], "eigenvector": [380, 388, 412, 471, 480, 511, 578], "phillip": [380, 412, 471], "bonacich": [380, 412, 471], "famili": [380, 412, 471, 572], "measur": [380, 412, 471, 535, 578, 579, 580], "american": [380, 412, 471], "92": [380, 412, 471], "1170": [380, 412, 471], "1182": [380, 412, 471], "1986": [380, 412, 471, 515], "1086": [380, 412, 471], "228631": [380, 412, 471], "converg": [380, 388, 412, 471, 480, 497, 511, 526], "vector": [380, 388, 412, 471, 480, 497, 511, 526], "smaller": [380, 388, 412, 471, 480, 497, 498, 511, 526, 582], "toler": [380, 388, 412, 471, 480, 497, 511, 526], "multipli": [380, 388, 412, 471, 480, 497, 511, 526], "networkx": [380, 388, 407, 412, 471, 480, 511, 520, 526, 532, 544, 575, 578, 582], "encount": [381, 530, 538, 539, 552, 559, 564, 577, 578], "floyd": [382, 383, 384, 414, 415, 416, 472, 473, 474, 578], "dens": [382, 383, 384, 414, 415, 416, 472, 473, 474], "graph_floyd_warshall_numpi": [383, 384, 474, 578], "inf": [383, 384, 415, 416, 457, 473, 474, 578], "matric": [384, 416, 474, 577, 578], "reconstruct": [384, 416, 474], "among": [384, 416, 474, 515, 574], "reconstruct_path": [384, 416, 474], "curr": [384, 416, 474], "node_match": [385, 386, 401, 477, 478, 495, 502, 507, 549, 578], "edge_match": [385, 386, 401, 477, 478, 495, 502, 507, 549, 578], "id_ord": [385, 386, 401, 477, 478, 495, 502, 503, 507, 549, 578], "call_limit": [385, 386, 401, 477, 478, 495, 502, 507, 549, 578], "compar": [385, 386, 477, 478, 502, 503, 507, 574, 578], "matcher": [385, 386, 477, 478, 502, 503, 507], "graph_a": [385, 386, 401, 477, 478, 495, 502, 503, 507, 549], "graph_b": [385, 386, 401, 477, 478, 495, 502, 503, 507, 549], "y": [385, 386, 389, 429, 440, 477, 478, 482, 502, 503, 507, 514, 578], "evalu": [385, 386, 389, 401, 477, 478, 482, 495, 502, 503, 507, 514, 549], "vied": [385, 386, 477, 478, 503], "vf2": [385, 386, 401, 477, 478, 495, 502, 503, 507, 549, 578], "paper": [385, 386, 401, 428, 439, 457, 477, 478, 483, 491, 495, 502, 503, 507, 549, 578], "bound": [385, 386, 401, 407, 477, 478, 495, 502, 507, 544, 549, 578], "solut": [385, 386, 401, 475, 477, 478, 495, 502, 507, 515, 549, 578], "exce": [385, 386, 401, 419, 422, 435, 477, 478, 495, 502, 507, 549, 578], "ambigu": [386, 478, 507, 558], "term": [386, 478, 507], "fewer": [386, 478, 507], "edge_cost": [387, 479, 510], "kth": [387, 479, 510], "log": [387, 457, 479, 510, 578], "eedg": [387, 479, 510], "alpha": [388, 480, 511, 526, 572, 578], "beta": [388, 480, 498, 511], "1000": [388, 480], "katz": [388, 480, 511, 578], "leo": [388, 480, 511], "statu": [388, 480, 511, 580], "sociometr": [388, 480, 511], "psychometrika": [388, 480, 511], "18": [388, 480, 511, 578], "39": [388, 480, 511, 578], "43": [388, 480, 511], "1953": [388, 480, 511], "springer": [388, 480, 511, 535, 578], "pdf": [388, 457, 480, 483, 497, 511, 526, 571], "1007": [388, 480, 511, 535, 578], "bf02289026": [388, 480, 511], "attenu": [388, 480, 511], "neighbourhood": [388, 480, 511], "roughli": [389, 482, 514], "len": [389, 482, 514, 578, 580], "There": [389, 482, 514, 577, 578, 582], "tradeoff": [389, 482, 514], "relat": [390, 578], "coarsest": [390, 578], "bisimul": [390, 578], "paig": [390, 578], "tarjan": [390, 578], "three": [390, 399, 493, 547, 578], "refin": [390, 578], "relationalcoarsestpartit": [390, 578], "json": [391, 417, 484, 522, 527, 578], "anyth": [391, 484, 522], "unweight": [392, 400, 485, 494, 523, 548, 578], "preset": [392, 475, 476, 485, 523, 578], "nodescountmap": [392, 523], "nlist": [394, 436, 475, 487, 531, 578, 582], "rotat": [394, 487, 531], "shell": [394, 487, 531], "angl": [394, 487, 531], "radian": [394, 487, 531], "resolut": [395, 488, 533], "35": [395, 488, 533], "equidist": [395, 488, 533], "spiral": [395, 488, 533], "compact": [395, 488, 533], "compress": [395, 488, 533], "plot": [395, 488, 533, 578], "po": [396, 436, 475, 489, 498, 528, 534, 572, 577, 578, 582], "repulsive_expon": [396, 489, 534], "adaptive_cool": [396, 489, 534, 578], "num_it": [396, 489, 534], "fruchterman": [396, 489, 534, 578], "reingold": [396, 489, 534, 578], "forc": [396, 489, 534, 578], "simul": [396, 489, 534], "spring": [396, 489, 534, 572], "hold": [396, 489, 534], "repel": [396, 489, 534], "anti": [396, 489, 534], "graviti": [396, 489, 534], "equilibrium": [396, 489, 534], "coordin": [396, 429, 440, 489, 498, 534, 582], "sqrt": [396, 489, 534], "farther": [396, 489, 534], "apart": [396, 489, 534], "repuls": [396, 489, 534], "expon": [396, 489, 534], "cool": [396, 489, 534], "scheme": [396, 489, 534], "linear": [396, 426, 437, 481, 489, 513, 534, 578, 580], "threshold": [396, 489, 498, 528, 534], "Not": [396, 489, 534], "around": [396, 489, 534, 578], "tensor": [397, 490, 578], "fag": 398, "eq": 398, "triangl": [398, 492], "tripl": [398, 492], "count": [398, 578, 580], "cluster": 398, "fagiolo": 398, "physic": [398, 433], "review": [398, 433, 580], "76": 398, "026107": 398, "2007": 398, "merge_nod": [399, 493, 547, 578], "merge_edg": [399, 493, 547, 578], "phase": [399, 493, 547], "n_2": [399, 493, 547], "n_1": [399, 493, 547], "togeth": [399, 418, 493, 530, 547, 559, 560, 564], "ne": [400, 494, 548], "taken": [400, 494, 548, 578], "funcion": [401, 495, 549], "direccted_path_graph": 401, "stopiter": [401, 495, 549, 578], "dicitonari": [401, 495, 549], "purpos": [405, 575, 576], "weak": 405, "direction": [405, 578, 580, 582], "num_edg": [406, 543, 578], "g_": [406, 407, 543, 544, 578], "nm": [406, 543], "erd\u0151": [406, 407, 543, 544], "r\u00e9nyi": [406, 407, 543, 544], "higher": [406, 475, 476, 543, 578], "reproduc": [406, 543, 574, 578], "binomi": [407, 419, 422, 544, 578], "mention": [407, 544], "upper": [407, 544, 578], "fast_gnp_random_graph": [407, 544], "vladimir": [407, 544], "batagelj": [407, 544], "phy": [407, 544], "rev": [407, 544], "71": [407, 544], "036113": [407, 544], "2005": [407, 544], "random_graph": [407, 544, 578], "l49": [407, 544], "l120": [407, 544], "num_l_nod": [408, 545], "num_r_nod": [408, 545], "divid": [408, 545], "disjoint": [408, 512, 545, 578], "right": [408, 422, 426, 428, 429, 439, 498, 506, 545], "stochast": [409, 546, 578], "model": [409, 498, 528, 546, 578, 580], "commun": [409, 546], "membership": [409, 546], "infer": [409, 498, 546], "pars": [417, 527, 530, 578], "load": 417, "num_mesh_nod": [418, 441], "num_path_nod": [418, 441], "mesh_weight": [418, 441], "path_weight": [418, 441], "barbel": [418, 578], "mesh": [418, 430, 441, 442, 578], "won": [418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444], "recurs": [419, 422, 433, 532, 578], "platform": [419, 422, 575, 578, 582], "64bit": [419, 422, 575, 576], "60": [419, 422, 578], "32bit": [419, 422, 575, 576], "29": [419, 422, 578], "overflowerror": [419, 422, 578], "extra": [419, 422, 426, 435, 437, 578], "greater": [419, 422, 426, 435, 437, 540], "neither": [420, 421, 423, 424, 426, 430, 431, 432, 437, 441, 442, 443, 444, 580], "propag": [422, 426, 429], "toward": [422, 426, 429, 432], "bottom": [422, 426, 429], "lenght": [422, 435], "row": [426, 429, 437, 440], "col": [426, 429, 437, 440, 578], "grid": [426, 429, 437, 440, 578], "wise": [426, 437], "trail": [426, 437, 580], "heavi": [427, 428, 438, 439, 578], "hex": [427, 438, 578], "fig": [427, 428, 438, 439, 571], "arxiv": [427, 428, 433, 438, 439, 491, 578], "ab": [427, 428, 433, 438, 439, 491, 578], "1907": [427, 428, 438, 439], "09528": [427, 428, 438, 439], "ascii": [427, 428, 438, 439], "diagram": [427, 428, 438, 439], "f": [427, 428, 433, 438, 439, 579, 580, 582], "odd": [427, 428, 438, 439, 578], "graphviz_draw": [427, 428, 438, 439, 577, 578, 579, 580, 582], "1043x155": [427, 438], "squar": [428, 439, 578], "four": [428, 439, 574, 578], "frequenc": [428, 439], "467x539": [428, 439], "with_posit": [429, 440, 578], "hexagon": [429, 440, 578, 579], "lattic": [429, 440, 578, 579], "boundari": [429, 440, 577, 578], "emb": [429, 440], "plane": [429, 440, 506], "side": [429, 440], "inward": 432, "dorogovtsev": [433, 578], "goltsev": [433, 578], "mend": [433, 578], "pseudofract": 433, "65": 433, "066122": 433, "2002": 433, "cond": 433, "mat": 433, "0112143": 433, "branching_factor": 435, "ari": [435, 578], "cannot": [435, 515, 578], "petersen": [436, 578], "2n": 436, "3n": 436, "watkin": 436, "denot": [436, 580], "extern": [436, 577], "polygon": 436, "shift": 436, "shell_layout": [436, 475, 578, 582], "7": [436, 475, 476, 483, 575, 582], "m\u00f6biu": 436, "kantor": 436, "13": [436, 575], "14": [436, 575], "theorem": [436, 483, 578], "tait": 436, "combinatori": 436, "theori": [436, 582], "152": 436, "164": 436, "s0021": 436, "9800": 436, "69": 436, "80116": 436, "column": [440, 578], "lollipop": [441, 578], "nor": 441, "graph_edge_betweenness_centr": 455, "noga": [457, 578], "alon": [457, 578], "lett": 457, "85": [457, 526], "2003": [457, 574, 578], "www": [457, 483, 497], "tau": 457, "ac": 457, "il": 457, "nogaa": 457, "lex2": 457, "graph_betweenness_centr": [470, 578], "strategi": [475, 476, 578], "aka": [475, 476], "slf": [475, 476], "dynam": [475, 476, 577, 578], "tie": [475, 476, 578], "uncolor": [475, 476, 578], "subset": [475, 476, 515, 526, 551, 554, 578], "problem": [475, 535, 574], "preset_color_fn": [475, 476, 578], "manual": [475, 476, 576, 578], "generalized_petersen_graph": [475, 578, 582], "draw": [475, 571, 572, 578], "node_color": [475, 572, 578, 579], "greedili": [476, 578], "cycle_graph": [476, 483, 578, 580], "edge_color": [476, 483, 572, 578], "edge_ab": [481, 578], "edge_ac": [481, 578], "edge_bc": [481, 578], "edge_ad": [481, 578], "out_graph": [481, 578], "out_edge_map": [481, 578], "simple_path_pair": 482, "longest_path": [482, 578], "z": 482, "misra": [483, 578], "gri": [483, 578], "proof": [483, 578], "vize": [483, 578], "1992": [483, 578], "utexa": 483, "edu": [483, 497, 506, 526], "psp": 483, "numpathsmap": 485, "trial": 491, "modul": [491, 578], "approxim": [491, 535, 578], "token": [491, 578], "swap": [491, 578], "permut": [491, 578], "miltzow": [491, 578], "et": [491, 574, 578], "al": [491, 574, 578], "2016": [491, 578], "1602": [491, 578], "05150": [491, 578], "rearrang": 491, "nstart": [497, 526], "08": 497, "hub": [497, 578], "author": [497, 578], "kleinberg": 497, "authorit": 497, "hyperlink": 497, "46": 497, "cornel": 497, "home": 497, "kleinber": 497, "auth": 497, "hyperbol": [498, 578], "geometr": [498, 528, 578], "usual": 498, "exp": 498, "sigmoid": 498, "arccosh": 498, "x_0": 498, "x_j": 498, "dimens": [498, 528], "x_d": 498, "th": 498, "hyperboloid": 498, "x_1": 498, "sharp": 498, "nonneg": [498, 536], "probabilist": 498, "nullgraph": [500, 508], "alp\u00e1r": 502, "j\u00fcttner": 502, "p\u00e9ter": 502, "madarasi": 502, "longer": [505, 575, 578], "global": 505, "local": [505, 576, 578], "planar": [506, 578], "iff": 506, "intersect": 506, "2009": [506, 574], "citeseerx": 506, "ist": 506, "psu": 506, "viewdoc": 506, "summari": 506, "217": 506, "9208": 506, "weakli": [508, 525, 573, 578], "first_lay": [512, 578], "index_output": [512, 578], "invalidnod": [512, 521], "lexicograph": 513, "ti": 513, "affect": 513, "comparison": [513, 577, 578, 582], "max_cardin": 515, "verify_optimum": 515, "cardin": 515, "blossom": 515, "augment": 515, "primal": 515, "dual": [515, 578], "invent": 515, "jack": 515, "edmond": 515, "untest": 515, "optimum": 515, "mostli": [515, 578, 582], "ofth": 515, "zvi": 515, "galil": 515, "survei": 515, "metric": [516, 528, 535, 578], "closur": [516, 535, 578], "forest": [517, 518], "kruskal": [517, 518], "keep_attribut": [520, 578], "__networkx_node__": [520, 578], "person": 526, "dangl": 526, "page": [526, 578], "brin": 526, "motwani": 526, "winograd": 526, "citat": 526, "rank": [526, 578], "bring": 526, "stanford": 526, "digit": 526, "technologi": 526, "1998": 526, "dbpub": 526, "8090": 526, "showdoc": 526, "fulltext": 526, "66": 526, "tri": [526, 578], "damp": 526, "uniform": 526, "distribut": [526, 576, 578], "outedg": 526, "accord": 526, "irreduc": 526, "radiu": [528, 572, 578], "dim": 528, "unit": 528, "cube": [528, 578], "uniformli": 528, "euclidean": 528, "minkowski": 528, "meet": 528, "graphml": [530, 578], "comprehens": 530, "easi": [530, 558], "properti": [530, 577, 580], "flexibl": [530, 582], "mechan": 530, "graphdraw": 530, "mix": 530, "unidirect": 530, "hyperedg": 530, "nest": 530, "port": 530, "domain": 530, "runtimeerror": [530, 578], "elementari": [532, 578], "johnson": [532, 574, 578], "1137": 532, "0204007": 532, "l98": 532, "l222": 532, "terminal_nod": 535, "steiner": [535, 578], "regard": 535, "amoung": 535, "termin": [535, 578], "due": [535, 576, 578], "rather": [535, 578], "kou": [535, 578], "markowski": [535, 578], "berman": [535, 578], "fast": [535, 578], "acta": 535, "informatica": 535, "141": 535, "1981": [535, 578], "articl": [535, 578], "bf00288961": [535, 578], "kurt": 535, "mehlhorn": 535, "0020": [535, 578], "0190": [535, 578], "88": [535, 578], "90066": [535, 578], "stoer": [536, 578], "wagner": [536, 578], "stoer_simple_1997": 536, "conid": 536, "usiz": [536, 578], "mechthild": 536, "frank": [536, 578], "44": 536, "585": [536, 578], "591": 536, "1997": 536, "strongli": [537, 578], "kosaraju": 537, "earliest": 538, "reduct": [540, 578], "prime": 540, "pyvalueerror": 540, "action": [550, 557, 563, 578], "queue": [551, 554, 564, 578], "record": 558, "disregard": 558, "leaf": 560, "upon": [565, 566, 578], "emit": [565, 566, 578], "node_attr_fn": [571, 578, 579, 580, 582], "edge_attr_fn": [571, 580], "image_typ": 571, "pillow": [571, 578], "instruct": [571, 580], "disk": 571, "canon": 571, "cmap": [571, 572], "cmapx": 571, "cmapx_np": 571, "dia": 571, "gd": 571, "gd2": 571, "gif": 571, "hpgl": 571, "imap": 571, "imap_np": 571, "ismap": 571, "jpe": 571, "jpeg": 571, "jpg": 571, "mif": 571, "mp": 571, "pcl": 571, "pic": 571, "plain": 571, "ext": 571, "ps2": 571, "svg": 571, "svgz": 571, "vml": 571, "vmlz": 571, "vrml": 571, "vtx": 571, "wbmp": 571, "xdot": 571, "xlib": 571, "twopi": 571, "neato": [571, 579, 582], "circo": 571, "fdp": [571, 578], "sfdp": [571, 578], "yellow": [571, 578, 582], "blue": [571, 578, 582], "red": [571, 578], "directed_star_graph": [571, 578], "rgb": [571, 572, 578], "766x747": [571, 578], "arrow": [572, 578, 580, 582], "kwd": 572, "matplotlib": [572, 578, 579, 582], "mpl": [572, 578], "layout_funct": 572, "arrowhead": 572, "arrowstyl": 572, "arrowshead": 572, "arrow_s": [572, 577], "fancyarrowpatch": 572, "mutation_scal": 572, "info": 572, "node_list": [572, 577], "node_s": [572, 578], "vmin": [572, 578, 579], "vmax": [572, 578, 579], "scatter": 572, "1f78b4": [572, 578], "node_shap": 572, "shape": [572, 578, 579, 582], "pyplot": [572, 578, 579, 582], "marker": 572, "h": [572, 580], "transpar": 572, "colormap": [572, 579], "intens": 572, "linewidth": 572, "symbol": 572, "border": 572, "edge_cmap": 572, "edge_vmin": 572, "edge_vmax": 572, "word": 572, "solid": 572, "dash": 572, "linestyl": 572, "Or": [572, 578, 582], "font_siz": 572, "fontsiz": 572, "font_color": 572, "font": 572, "ie": 572, "font_weight": 572, "font_famili": 572, "san": 572, "serif": 572, "legend": 572, "connectionstyl": [572, 578], "curv": 572, "arc": [572, 580, 582], "rad": 572, "arc3": 572, "backend": [572, 577], "jupyt": 572, "plt": [572, 578, 579, 582], "competit": 574, "against": [574, 578], "popular": 574, "igraph": 574, "networkit": 574, "task": 574, "machin": 574, "intel": 574, "i9": 574, "9900k": 574, "60ghz": 574, "eight": 574, "16": [574, 578], "thead": 574, "32gb": 574, "ram": 574, "avaialbl": 574, "usa": 574, "road": 574, "9th": 574, "dimac": 574, "challeng": 574, "dataset": 574, "demetrescu": 574, "datta": 574, "third": 574, "citi": 574, "rome": 574, "lastli": 574, "fourth": 574, "answer": 574, "arg": 574, "databas": 574, "de": 574, "santo": 574, "goldberg": 574, "ninth": 574, "foggia": 574, "sanson": 574, "vento": 574, "recognit": 574, "1067": 574, "1079": 574, "studi": 575, "variou": [575, 577, 578], "licens": 575, "apach": 575, "host": 575, "inher": 575, "safeti": [575, 576], "significantli": [575, 578], "oppos": [575, 578], "publish": [575, 576, 578], "pre": [575, 576, 578], "binari": [575, 578, 582], "linux": [575, 576, 578], "x86": 575, "x86_64": [575, 576, 578], "aarch64": [575, 576, 578], "s390x": [575, 576, 578], "ppc64le": [575, 576, 578], "maco": [575, 576, 578], "arm64": [575, 576, 578], "window": [575, 576], "wish": 575, "expos": [575, 577, 578], "renam": [575, 578], "legaci": [575, 578], "now": [575, 578, 579, 580, 582], "usag": [575, 582], "came": 575, "tutori": [575, 579, 580], "guid": [575, 577, 582], "introduct": [575, 576, 578, 581], "26": 575, "contribut": [575, 578], "gap": [575, 578], "benchmark": 575, "pypi": [576, 578], "i686": 576, "64": [576, 578], "rustup": 576, "simpler": 576, "reli": [576, 578, 582], "properli": [576, 578], "prebuilt": 576, "pep": 576, "517": [576, 578], "setuptool": 576, "reciev": [576, 578], "again": [576, 578, 582], "strive": 576, "broken": 576, "level": [576, 577], "architectur": 576, "manylinux": 576, "2014": 576, "pp64le": 576, "musl": [576, 578], "newer": [576, 578], "ci": [576, 578], "upstream": [576, 578], "correctli": [576, 578], "best": [576, 580], "introductori": 577, "impli": [577, 580], "inspir": 577, "util": 577, "offer": 577, "decis": 577, "aspect": 577, "put": 577, "nx": [577, 578], "multidigraph": 577, "my_node_a": 577, "my_node_b": 577, "constraint": [577, 578, 582], "That": [577, 578], "migrat": 577, "similarli": [577, 582], "dist_matrix": 577, "extend_from": 577, "concis": 577, "graph_": 577, "digraph_": 577, "pretti": 577, "referenc": 577, "concept": [577, 578, 580], "dedic": [577, 582], "fridai": [577, 578, 582], "mondai": [577, 578, 582], "But": [577, 578, 580], "analog": [577, 578], "5pm": 577, "2pm": 577, "room": 577, "714": 577, "accessor": 577, "dtype": [577, 578], "astyp": 577, "to_numpy_matrix": 577, "to_numpy_arrai": 577, "to_numpy_recarrai": 577, "to_scipy_sparse_matrix": 577, "to_pandas_adjac": 577, "scipi": 577, "csr": 577, "spars": [577, 578], "per": [577, 578], "digraph_adjacency_matrix": [577, 578], "graph_adjacency_matrix": [577, 578], "networkx_draw": 577, "pygraphviz": 577, "varieti": 577, "strictli": [577, 578, 580], "retwork": [577, 578], "draw_networkx": 577, "fork": 577, "nodelist": 577, "arrows": 577, "mpl_drawer": [577, 578], "draw_networkx_edge_label": 577, "networkx_convert": [577, 578], "respons": 577, "accordingli": 577, "unwant": 577, "convert_rustworkx_to_networkx": 577, "isinst": 577, "matur": 577, "wide": [577, 582], "younger": 577, "enhanc": 577, "request": [577, 578], "issu": [577, 578], "priorit": 577, "neighbors_undirect": 578, "obtain": 578, "irrespect": 578, "bugfix": 578, "inadvert": 578, "to_dot": 578, "incorrectli": 578, "escap": 578, "quot": 578, "color_nod": [578, 579], "_node": 578, "422952": 578, "directed_hexagonal_lattice_graph": 578, "irregular": 578, "highlight": 578, "expans": 578, "previous": 578, "expand": 578, "abi": 578, "offici": 578, "importantli": 578, "70": 578, "promot": 578, "tier": 578, "has_nod": 578, "dag_algo": 578, "from_node_link_json_fil": 578, "parse_node_link_json": 578, "polynomi": 578, "brute": 578, "magnitud": 578, "address": 578, "experiment": 578, "christian": 578, "komusiewicz": 578, "sommer": 578, "gain": 578, "discuss": [578, 582], "lemma": 578, "thu": 578, "intermedi": 578, "speedup": 578, "40": 578, "nameabl": 578, "dorogovtsev_goltsev_mendes_graph": 578, "stablegraph": 578, "graphmap": 578, "contractnod": 578, "trait": 578, "graph_ext": 578, "contract_nod": [578, 580], "hasparalleledgesdirect": 578, "hasparalleledgesundirect": 578, "has_parallel_edg": 578, "noderemov": 578, "matrixgraph": 578, "hyperbolic_random_graph": 578, "sampl": 578, "sinh": 578, "14159": 578, "55": 578, "particularli": 578, "is_semi_connect": 578, "semi": 578, "gneric": 578, "indexpartitionblock": 578, "hexagonal_lattice_graph_weight": 578, "quadrat": 578, "remove_node_retain_edg": 578, "suppli": 578, "greedy_node_color_with_coloring_strategi": 578, "greedy_edge_color_with_coloring_strategi": 578, "preset_color": 578, "directed_sbm_random_graph": 578, "undirected_sbm_random_graph": 578, "sbm_random_graph": 578, "wheel": 578, "storag": 578, "mirror": 578, "onlin": 578, "meaningless": 578, "sizeabl": 578, "condition": 578, "temporari": 578, "find_cycl": 578, "bondari": 578, "didn": [578, 580], "smartli": 578, "special": 578, "scenario": 578, "nlabel": 578, "tooltip": 578, "ntooltip": 578, "107x202": 578, "750": 578, "draw_edg": 578, "labl": 578, "offset": 578, "draw_edge_label": 578, "align": 578, "774": 578, "panicexcept": 578, "1117": 578, "1130": 578, "long": [578, 582], "read_graphml": 578, "1140": 578, "blog": 578, "changelog": 578, "2024": 578, "m1": 578, "switch": 578, "tox": 578, "downgrad": 578, "directed_barabasi_albert_graph": 578, "barabasi_albert_graph": 578, "starting_graph": 578, "20": 578, "graph_all_shortest_path": 578, "shortest_path": 578, "heavy_square_graph": 578, "bridges_set": 578, "clear_edg": 578, "edge_indices_from_endpoint": 578, "filter_nod": 578, "abstract": 578, "filter_edg": 578, "substitute_node_with_subgraph": [578, 580], "sub_graph": 578, "___": 578, "stratifi": 578, "graphnotbipartit": 578, "directed_random_bipartite_graph": 578, "undirected_random_bipartite_graph": 578, "bipartite_layout": 578, "66666667": 578, "entir": 578, "invalidmap": 578, "graph_token_swapp": 578, "feasibl": 578, "path_exist": 578, "greedy_node_color_with_preset_color": 578, "greedy_node_color": 578, "transtiv": 578, "tr": 578, "ref": 578, "wikipedia": 578, "wiki": 578, "msrv": 578, "56": 578, "adopt": [578, 582], "difficult": 578, "catch": 578, "unhandl": 578, "token_swapp": 578, "vec": 578, "nodeindex": 578, "mapnotposs": 578, "ungraph": 578, "from_edg": 578, "hashmap": 578, "err": 578, "panick": 578, "funciton": 578, "pllatform": 578, "infrastructur": 578, "hopefulli": 578, "shouldn": 578, "likelihood": 578, "precompil": [578, 582], "polici": 578, "74": 578, "deprecationwarn": 578, "graph_all_simple_path": 578, "digraph_all_simple_path": 578, "955": 578, "gnp_random_graph": 578, "pin": 578, "seri": [578, 580], "unreleas": 578, "soon": 578, "prevent": [578, 582], "manag": 578, "older": 578, "incompat": 578, "forcibli": 578, "alongsid": 578, "suport": 578, "make_symmetr": 578, "83x443": 578, "5x5": 578, "grid_graph": 578, "btw": [578, 579], "hub_scor": 578, "650": 578, "2f": [578, 579], "centrality_scor": 578, "binomial_tree_graph": 578, "31": 578, "28": 578, "path_set": 578, "longest_simple_path_multiple_target": 578, "hashset": 578, "pagerank_scor": 578, "gnm_random_graph": 578, "random_geometric_graph": 578, "bread": 578, "find_predecessor_node_by_edg": 578, "colorbar": [578, 579], "rcparam": [578, 579], "figsiz": [578, 579], "gca": [578, 579], "sm": [578, 579], "cm": [578, 579], "scalarmapp": [578, 579], "norm": [578, 579], "titl": [578, 579], "1500x1000": [578, 579], "empty_graph": 578, "directed_empty_graph": 578, "directed_complete_graph": 578, "mesh_graph": [578, 582], "directed_mesh_graph": 578, "gnp_directed_random_graph": 578, "gnp_undirected_random_graph": 578, "situat": 578, "48": 578, "well": 578, "facilit": 578, "deepcopi": 578, "836": 578, "flatten": 578, "744": 578, "node_remov": 578, "reflect": 578, "previosuli": 578, "certain": 578, "696": 578, "formerli": 578, "maintain": 578, "notif": 578, "manylinux2014": 578, "parser": 578, "node_link_json": 578, "cut_val": 578, "orang": 578, "graph_tensor_product": 578, "digraph_tensor_product": 578, "all_simple_paths_multiple_target": 578, "algo": 578, "dictmap": 578, "preserve_attribut": 578, "k_5": 578, "bfs_undirect": 578, "xml": [578, 582], "manylinux2010": 578, "glibc": 578, "sdist": 578, "41": 578, "rustc": 578, "bfsssuccessor": 578, "slice": 578, "__getitem__": 578, "did": 578, "590": 578, "amd": 578, "digraph_cartesian_product": 578, "graph_cartesian_product": 578, "throughout": 578, "eventu": 578, "account": 578, "barbell_graph": 578, "graph_bfs_search": 578, "digraph_bfs_search": 578, "remain": [578, 582], "comp": 578, "150": 578, "color_edg": 578, "edges_in_chain": 578, "idx": 578, "adj_matrix": 578, "1j": 578, "2j": 578, "5j": 578, "multi": 578, "guard": 578, "abc": 578, "graph_dfs_search": 578, "digraph_dfs_search": 578, "graph_dijkstra_search": 578, "digraph_dijkstra_search": 578, "dijkstratreeedgesrecord": 578, "discover_vertex": 578, "edge_relax": 578, "incident_edg": [578, 582], "incident_edge_index_map": 578, "endoint": 578, "achiev": 578, "full_rary_tre": 578, "lollipop_graph": [578, 582], "abil": 578, "freed": 578, "workspac": 578, "downstream": 578, "stabil": 578, "necessarili": 578, "turquois": 578, "fuschia": 578, "rx_graph": 578, "arguabl": 578, "desir": 578, "undirected_gnm_random_graph": 578, "42": [578, 582], "d_mat": 578, "avg_shortest_path": 578, "directed_binomial_tree_graph": 578, "overflow": 578, "panic": 578, "exceed": 578, "457": 578, "increment": 578, "515": 578, "oversight": 578, "525": 578, "heavy_hex_graph": [578, 582], "directed_heavy_hex_graph": 578, "directed_heavy_square_graph": 578, "pyo3_runtim": 578, "452": 578, "graph_union": 578, "digraph_union": 578, "unifi": 578, "a_0": 578, "a_1": 578, "b_0": 578, "b_1": 578, "find_node_by_weight": 578, "432": 578, "429": 578, "hash": 578, "367": 578, "slew": 578, "1080": 578, "0022250x": 578, "9990249": 578, "secondli": 578, "edge_subgraph": 578, "ap": 578, "prx": 578, "1103": 578, "physrevx": 578, "011022": 578, "read_edge_list": [578, 582], "first_edg": 578, "second_edg": 578, "original_graph": 578, "_sourc": 578, "_target": 578, "_weight": 578, "17": 578, "21": 578, "22": 578, "23": 578, "27": 578, "to_direct": 578, "rework": 578, "graph_floyd_warshal": 578, "digraph_floyd_warshal": 578, "control": 578, "undirected_graph": 578, "digraph_num_shortest_paths_unweight": 578, "graph_num_shortest_paths_unweight": 578, "directed_grid_graph": 578, "33": 578, "path_length": 578, "lambda_": 578, "fashion": 578, "explicit": 578, "408": 578, "digraph_dijkstra_shortest_path": 578, "graph_dijkstra_shortest_path": 578, "digraph_all_pairs_dijkstra_shortest_path": 578, "graph_all_pairs_dijkstra_shortest_path": 578, "387": 578, "consecut": 578, "373": 578, "347": 578, "plethora": 578, "drawer": 578, "spring_layout": [578, 582], "convienc": 578, "preclud": 578, "95": 578, "random_layout": 578, "graph_random_layout": 578, "diraph_random_layout": 578, "circl": [578, 579, 582], "fixeds": 578, "521x501": 578, "immut": 578, "coeffici": 578, "digraph_all_pairs_dijkstra_path_length": 578, "graph_all_pairs_dijkstra_path_length": 578, "edge_index_map": [578, 582], "source_node_index": 578, "target_node_index": 578, "find_successors_by_edg": 578, "find_predecessors_by_edg": 578, "mst": 578, "tweak": 578, "00ffff": 578, "circular_layout": 578, "spiral_layout": 578, "795x1031": 578, "325x323": 578, "write_edge_list": 578, "digraph_k_shortest_path_length": 578, "graph_k_shortest_path_length": 578, "digraph_dijkstra_shortest_path_length": 578, "graph_dijkstra_shortest_path_length": 578, "predecessor_indic": 578, "dispatch": 578, "mistakenli": 578, "appl": 578, "arm": 578, "outward": 578, "371x155": 578, "is_maxmimal_match": 578, "disallow": 578, "145x291": 578, "143x291": 578, "queri": 578, "__str__": [578, 582], "human": 578, "readabl": [578, 582], "__hash__": 578, "unhash": 578, "update_edg": [578, 582], "garbag": 578, "collector": 578, "know": 578, "integr": [578, 582], "250": 578, "pickl": 578, "multiprocess": 578, "lookup": 578, "graph_astar_shortest_path": 578, "digraph_astar_shortest_path": 578, "digraph_dfs_edg": 578, "graph_dfs_edg": 578, "lock": 578, "meant": 578, "focu": 578, "commonli": 578, "is_symmetr": 578, "directed_gnm_random_graph": 578, "remove_edges_from": [578, 582], "removed_edges_from": 578, "graph_distance_matrix": 578, "digraph_distance_matrix": 578, "insert_node_on_in_edg": 578, "insert_node_on_out_edg": 578, "insert_node_on_in_edges_multipl": 578, "insert_node_on_out_edges_multipl": 578, "contigu": [578, 579, 582], "fortran": 578, "easier": 578, "defer": 578, "convers": 578, "bottleneck": 578, "especi": [578, 582], "across": 578, "172": 578, "eas": 578, "graphivz": 578, "compos": 578, "predecesor": 578, "warshal": 578, "segfault": 578, "backtrac": 578, "problemat": 578, "thank": 578, "contributor": 578, "find_adjacent_node_by_edg": 578, "remove_nodes_from": [578, 582], "No": 578, "export": 578, "pprint": 579, "007277212457600987": 579, "02047046385621779": 579, "07491079688119466": 579, "04242324126690451": 579, "09205321351482312": 579, "magma": 579, "to_hex": 579, "keep_alpha": 579, "1076x910": 579, "explor": 580, "primer": 580, "broader": 580, "restrict": 580, "simultan": 580, "walk": 580, "imposs": 580, "dependency_dag": 580, "job_a": 580, "job_b": 580, "job_c": 580, "job_d": 580, "job_": 580, "job_f": 580, "330x347": 580, "relationship": 580, "releationship": 580, "topo_sort": 580, "job_index": 580, "sdk": 580, "quantum": 580, "acceler": 580, "routin": 580, "coher": 580, "gate": 580, "reset": 580, "graphic": 580, "q_0": 580, "q_1": 580, "mea": 580, "beyond": 580, "fact": 580, "qubit": 580, "c_0": 580, "c_1": 580, "deped": 580, "in_nod": 580, "out_nod": 580, "h_gate": 580, "cx": 580, "cx_gate": 580, "meas_q0": 580, "meas_q1": 580, "q0": 580, "q1": 580, "401x523": 580, "flow": 580, "transform": 580, "hardwar": 580, "translat": 580, "devic": 580, "qpu": 580, "translation_matrix": 580, "rz": 580, "pi": 580, "sx": 580, "insruct": 580, "hardware_instruct": 580, "subcircuit": 580, "gate_index": 580, "edge_v": 580, "equivalent_subcircuit": 580, "map_fn": 580, "401x755": 580, "analyz": 580, "shorter": 580, "bit_nod": 580, "unitari": 580, "simplif": 580, "newest": 580, "nod": 580, "_node_id": 580, "wouldn": 580, "serv": 582, "past": 582, "shorten": 582, "convent": 582, "compris": 582, "green": 582, "first_index_data": 582, "first_index_edgepoint": 582, "helper": 582, "remove_edg": 582, "remove_edge_from_index": 582, "absent": 582, "last_index": 582, "simplic": 582, "graphnod": 582, "graphedg": 582, "edgenod": 582, "popul": 582, "notion": 582, "show": 582, "lolipop_graph": 582, "combined_graph": 582, "new_nod": 582, "spam": 582, "375": 582, "subax1": 582, "subplot": 582, "121": 582, "subax2": 582, "122": 582, "attr_dict": 582, "fill_color": 582, "syndrom": 582, "elif": 582, "fontcolor": 582, "2132x2297": 582, "decid": 582, "few": 582, "consider": 582, "choic": 582}, "objects": {"rustworkx": [[25, 0, 1, "", "AllPairsPathLengthMapping"], [29, 0, 1, "", "AllPairsPathMapping"], [33, 0, 1, "", "BFSPredecessors"], [34, 0, 1, "", "BFSSuccessors"], [35, 0, 1, "", "BiconnectedComponents"], [39, 0, 1, "", "CentralityMapping"], [43, 0, 1, "", "Chains"], [44, 0, 1, "", "ColoringStrategy"], [45, 3, 1, "", "DAGHasCycle"], [46, 3, 1, "", "DAGWouldCycle"], [47, 0, 1, "", "EdgeCentralityMapping"], [51, 0, 1, "", "EdgeIndexMap"], [55, 0, 1, "", "EdgeIndices"], [56, 0, 1, "", "EdgeList"], [57, 3, 1, "", "GraphNotBipartite"], [58, 0, 1, "", "IndexPartitionBlock"], [59, 3, 1, "", "InvalidMapping"], [60, 3, 1, "", "InvalidNode"], [61, 3, 1, "", "JSONSerializationError"], [62, 3, 1, "", "NegativeCycle"], [63, 3, 1, "", "NoEdgeBetweenNodes"], [64, 3, 1, "", "NoPathFound"], [65, 3, 1, "", "NoSuitableNeighbors"], [66, 0, 1, "", "NodeIndices"], [67, 0, 1, "", "NodeMap"], [71, 3, 1, "", "NullGraph"], [72, 0, 1, "", "PathLengthMapping"], [76, 0, 1, "", "PathMapping"], [80, 0, 1, "", "Pos2DMapping"], [84, 0, 1, "", "ProductNodeMap"], [88, 0, 1, "", "PyDAG"], [170, 0, 1, "", "PyDiGraph"], [252, 0, 1, "", "PyGraph"], [310, 0, 1, "", "RelationalCoarsestPartition"], [311, 0, 1, "", "TopologicalSorter"], [315, 0, 1, "", "WeightedEdgeList"], [316, 4, 1, "", "adjacency_matrix"], [317, 4, 1, "", "all_pairs_all_simple_paths"], [318, 4, 1, "", "all_pairs_bellman_ford_path_lengths"], [319, 4, 1, "", "all_pairs_bellman_ford_shortest_paths"], [320, 4, 1, "", "all_pairs_dijkstra_path_lengths"], [321, 4, 1, "", "all_pairs_dijkstra_shortest_paths"], [322, 4, 1, "", "all_shortest_paths"], [323, 4, 1, "", "all_simple_paths"], [324, 4, 1, "", "ancestors"], [325, 4, 1, "", "articulation_points"], [326, 4, 1, "", "astar_shortest_path"], [327, 4, 1, "", "barabasi_albert_graph"], [328, 4, 1, "", "bellman_ford_shortest_path_lengths"], [329, 4, 1, "", "bellman_ford_shortest_paths"], [330, 4, 1, "", "betweenness_centrality"], [331, 4, 1, "", "bfs_predecessors"], [332, 4, 1, "", "bfs_search"], [333, 4, 1, "", "bfs_successors"], [334, 4, 1, "", "biconnected_components"], [335, 4, 1, "", "bipartite_layout"], [336, 4, 1, "", "bridges"], [337, 4, 1, "", "cartesian_product"], [338, 4, 1, "", "chain_decomposition"], [339, 4, 1, "", "circular_layout"], [340, 4, 1, "", "closeness_centrality"], [341, 4, 1, "", "collect_bicolor_runs"], [342, 4, 1, "", "collect_runs"], [343, 4, 1, "", "complement"], [344, 4, 1, "", "connected_components"], [345, 4, 1, "", "connected_subgraphs"], [346, 4, 1, "", "core_number"], [347, 4, 1, "", "cycle_basis"], [348, 4, 1, "", "dag_longest_path"], [349, 4, 1, "", "dag_longest_path_length"], [350, 4, 1, "", "dag_weighted_longest_path"], [351, 4, 1, "", "dag_weighted_longest_path_length"], [352, 4, 1, "", "descendants"], [353, 4, 1, "", "dfs_edges"], [354, 4, 1, "", "dfs_search"], [355, 4, 1, "", "digraph_adjacency_matrix"], [356, 4, 1, "", "digraph_all_pairs_all_simple_paths"], [357, 4, 1, "", "digraph_all_pairs_bellman_ford_path_lengths"], [358, 4, 1, "", "digraph_all_pairs_bellman_ford_shortest_paths"], [359, 4, 1, "", "digraph_all_pairs_dijkstra_path_lengths"], [360, 4, 1, "", "digraph_all_pairs_dijkstra_shortest_paths"], [361, 4, 1, "", "digraph_all_shortest_paths"], [362, 4, 1, "", "digraph_all_simple_paths"], [363, 4, 1, "", "digraph_astar_shortest_path"], [364, 4, 1, "", "digraph_bellman_ford_shortest_path_lengths"], [365, 4, 1, "", "digraph_betweenness_centrality"], [366, 4, 1, "", "digraph_bfs_search"], [367, 4, 1, "", "digraph_bipartite_layout"], [368, 4, 1, "", "digraph_cartesian_product"], [369, 4, 1, "", "digraph_circular_layout"], [370, 4, 1, "", "digraph_closeness_centrality"], [371, 4, 1, "", "digraph_complement"], [372, 4, 1, "", "digraph_core_number"], [373, 4, 1, "", "digraph_dfs_edges"], [374, 4, 1, "", "digraph_dfs_search"], [375, 4, 1, "", "digraph_dijkstra_search"], [376, 4, 1, "", "digraph_dijkstra_shortest_path_lengths"], [377, 4, 1, "", "digraph_dijkstra_shortest_paths"], [378, 4, 1, "", "digraph_distance_matrix"], [379, 4, 1, "", "digraph_edge_betweenness_centrality"], [380, 4, 1, "", "digraph_eigenvector_centrality"], [381, 4, 1, "", "digraph_find_cycle"], [382, 4, 1, "", "digraph_floyd_warshall"], [383, 4, 1, "", "digraph_floyd_warshall_numpy"], [384, 4, 1, "", "digraph_floyd_warshall_successor_and_distance"], [385, 4, 1, "", "digraph_is_isomorphic"], [386, 4, 1, "", "digraph_is_subgraph_isomorphic"], [387, 4, 1, "", "digraph_k_shortest_path_lengths"], [388, 4, 1, "", "digraph_katz_centrality"], [389, 4, 1, "", "digraph_longest_simple_path"], [390, 4, 1, "", "digraph_maximum_bisimulation"], [391, 4, 1, "", "digraph_node_link_json"], [392, 4, 1, "", "digraph_num_shortest_paths_unweighted"], [393, 4, 1, "", "digraph_random_layout"], [394, 4, 1, "", "digraph_shell_layout"], [395, 4, 1, "", "digraph_spiral_layout"], [396, 4, 1, "", "digraph_spring_layout"], [397, 4, 1, "", "digraph_tensor_product"], [398, 4, 1, "", "digraph_transitivity"], [399, 4, 1, "", "digraph_union"], [400, 4, 1, "", "digraph_unweighted_average_shortest_path_length"], [401, 4, 1, "", "digraph_vf2_mapping"], [402, 4, 1, "", "dijkstra_search"], [403, 4, 1, "", "dijkstra_shortest_path_lengths"], [404, 4, 1, "", "dijkstra_shortest_paths"], [405, 4, 1, "", "directed_barabasi_albert_graph"], [406, 4, 1, "", "directed_gnm_random_graph"], [407, 4, 1, "", "directed_gnp_random_graph"], [408, 4, 1, "", "directed_random_bipartite_graph"], [409, 4, 1, "", "directed_sbm_random_graph"], [410, 4, 1, "", "distance_matrix"], [411, 4, 1, "", "edge_betweenness_centrality"], [412, 4, 1, "", "eigenvector_centrality"], [413, 4, 1, "", "find_negative_cycle"], [414, 4, 1, "", "floyd_warshall"], [415, 4, 1, "", "floyd_warshall_numpy"], [416, 4, 1, "", "floyd_warshall_successor_and_distance"], [417, 4, 1, "", "from_node_link_json_file"], [445, 4, 1, "", "graph_adjacency_matrix"], [446, 4, 1, "", "graph_all_pairs_all_simple_paths"], [447, 4, 1, "", "graph_all_pairs_bellman_ford_path_lengths"], [448, 4, 1, "", "graph_all_pairs_bellman_ford_shortest_paths"], [449, 4, 1, "", "graph_all_pairs_dijkstra_path_lengths"], [450, 4, 1, "", "graph_all_pairs_dijkstra_shortest_paths"], [451, 4, 1, "", "graph_all_shortest_paths"], [452, 4, 1, "", "graph_all_simple_paths"], [453, 4, 1, "", "graph_astar_shortest_path"], [454, 4, 1, "", "graph_bellman_ford_shortest_path_lengths"], [455, 4, 1, "", "graph_betweenness_centrality"], [456, 4, 1, "", "graph_bfs_search"], [457, 4, 1, "", "graph_bipartite_edge_color"], [458, 4, 1, "", "graph_bipartite_layout"], [459, 4, 1, "", "graph_cartesian_product"], [460, 4, 1, "", "graph_circular_layout"], [461, 4, 1, "", "graph_closeness_centrality"], [462, 4, 1, "", "graph_complement"], [463, 4, 1, "", "graph_core_number"], [464, 4, 1, "", "graph_dfs_edges"], [465, 4, 1, "", "graph_dfs_search"], [466, 4, 1, "", "graph_dijkstra_search"], [467, 4, 1, "", "graph_dijkstra_shortest_path_lengths"], [468, 4, 1, "", "graph_dijkstra_shortest_paths"], [469, 4, 1, "", "graph_distance_matrix"], [470, 4, 1, "", "graph_edge_betweenness_centrality"], [471, 4, 1, "", "graph_eigenvector_centrality"], [472, 4, 1, "", "graph_floyd_warshall"], [473, 4, 1, "", "graph_floyd_warshall_numpy"], [474, 4, 1, "", "graph_floyd_warshall_successor_and_distance"], [475, 4, 1, "", "graph_greedy_color"], [476, 4, 1, "", "graph_greedy_edge_color"], [477, 4, 1, "", "graph_is_isomorphic"], [478, 4, 1, "", "graph_is_subgraph_isomorphic"], [479, 4, 1, "", "graph_k_shortest_path_lengths"], [480, 4, 1, "", "graph_katz_centrality"], [481, 4, 1, "", "graph_line_graph"], [482, 4, 1, "", "graph_longest_simple_path"], [483, 4, 1, "", "graph_misra_gries_edge_color"], [484, 4, 1, "", "graph_node_link_json"], [485, 4, 1, "", "graph_num_shortest_paths_unweighted"], [486, 4, 1, "", "graph_random_layout"], [487, 4, 1, "", "graph_shell_layout"], [488, 4, 1, "", "graph_spiral_layout"], [489, 4, 1, "", "graph_spring_layout"], [490, 4, 1, "", "graph_tensor_product"], [491, 4, 1, "", "graph_token_swapper"], [492, 4, 1, "", "graph_transitivity"], [493, 4, 1, "", "graph_union"], [494, 4, 1, "", "graph_unweighted_average_shortest_path_length"], [495, 4, 1, "", "graph_vf2_mapping"], [496, 4, 1, "", "has_path"], [497, 4, 1, "", "hits"], [498, 4, 1, "", "hyperbolic_random_graph"], [499, 4, 1, "", "is_bipartite"], [500, 4, 1, "", "is_connected"], [501, 4, 1, "", "is_directed_acyclic_graph"], [502, 4, 1, "", "is_isomorphic"], [503, 4, 1, "", "is_isomorphic_node_match"], [504, 4, 1, "", "is_matching"], [505, 4, 1, "", "is_maximal_matching"], [506, 4, 1, "", "is_planar"], [507, 4, 1, "", "is_subgraph_isomorphic"], [508, 4, 1, "", "is_weakly_connected"], [509, 4, 1, "", "isolates"], [510, 4, 1, "", "k_shortest_path_lengths"], [511, 4, 1, "", "katz_centrality"], [512, 4, 1, "", "layers"], [513, 4, 1, "", "lexicographical_topological_sort"], [514, 4, 1, "", "longest_simple_path"], [515, 4, 1, "", "max_weight_matching"], [516, 4, 1, "", "metric_closure"], [517, 4, 1, "", "minimum_spanning_edges"], [518, 4, 1, "", "minimum_spanning_tree"], [519, 4, 1, "", "negative_edge_cycle"], [520, 4, 1, "", "networkx_converter"], [521, 4, 1, "", "node_connected_component"], [522, 4, 1, "", "node_link_json"], [523, 4, 1, "", "num_shortest_paths_unweighted"], [524, 4, 1, "", "number_connected_components"], [525, 4, 1, "", "number_weakly_connected_components"], [526, 4, 1, "", "pagerank"], [527, 4, 1, "", "parse_node_link_json"], [528, 4, 1, "", "random_geometric_graph"], [529, 4, 1, "", "random_layout"], [530, 4, 1, "", "read_graphml"], [531, 4, 1, "", "shell_layout"], [532, 4, 1, "", "simple_cycles"], [533, 4, 1, "", "spiral_layout"], [534, 4, 1, "", "spring_layout"], [535, 4, 1, "", "steiner_tree"], [536, 4, 1, "", "stoer_wagner_min_cut"], [537, 4, 1, "", "strongly_connected_components"], [538, 4, 1, "", "topological_generations"], [539, 4, 1, "", "topological_sort"], [540, 4, 1, "", "transitive_reduction"], [541, 4, 1, "", "transitivity"], [542, 4, 1, "", "two_color"], [543, 4, 1, "", "undirected_gnm_random_graph"], [544, 4, 1, "", "undirected_gnp_random_graph"], [545, 4, 1, "", "undirected_random_bipartite_graph"], [546, 4, 1, "", "undirected_sbm_random_graph"], [547, 4, 1, "", "union"], [548, 4, 1, "", "unweighted_average_shortest_path_length"], [549, 4, 1, "", "vf2_mapping"], [573, 4, 1, "", "weakly_connected_components"]], "rustworkx.AllPairsPathLengthMapping": [[26, 1, 1, "", "items"], [27, 1, 1, "", "keys"], [28, 1, 1, "", "values"]], "rustworkx.AllPairsPathMapping": [[30, 1, 1, "", "items"], [31, 1, 1, "", "keys"], [32, 1, 1, "", "values"]], "rustworkx.BiconnectedComponents": [[36, 1, 1, "", "items"], [37, 1, 1, "", "keys"], [38, 1, 1, "", "values"]], "rustworkx.CentralityMapping": [[40, 1, 1, "", "items"], [41, 1, 1, "", "keys"], [42, 1, 1, "", "values"]], "rustworkx.ColoringStrategy": [[44, 2, 1, "", "Degree"], [44, 2, 1, "", "IndependentSet"], [44, 2, 1, "", "Saturation"]], "rustworkx.EdgeCentralityMapping": [[48, 1, 1, "", "items"], [49, 1, 1, "", "keys"], [50, 1, 1, "", "values"]], "rustworkx.EdgeIndexMap": [[52, 1, 1, "", "items"], [53, 1, 1, "", "keys"], [54, 1, 1, "", "values"]], "rustworkx.NodeMap": [[68, 1, 1, "", "items"], [69, 1, 1, "", "keys"], [70, 1, 1, "", "values"]], "rustworkx.PathLengthMapping": [[73, 1, 1, "", "items"], [74, 1, 1, "", "keys"], [75, 1, 1, "", "values"]], "rustworkx.PathMapping": [[77, 1, 1, "", "items"], [78, 1, 1, "", "keys"], [79, 1, 1, "", "values"]], "rustworkx.Pos2DMapping": [[81, 1, 1, "", "items"], [82, 1, 1, "", "keys"], [83, 1, 1, "", "values"]], "rustworkx.ProductNodeMap": [[85, 1, 1, "", "items"], [86, 1, 1, "", "keys"], [87, 1, 1, "", "values"]], "rustworkx.PyDAG": [[89, 1, 1, "", "add_child"], [90, 1, 1, "", "add_edge"], [91, 1, 1, "", "add_edges_from"], [92, 1, 1, "", "add_edges_from_no_data"], [93, 1, 1, "", "add_node"], [94, 1, 1, "", "add_nodes_from"], [95, 1, 1, "", "add_parent"], [96, 1, 1, "", "adj"], [97, 1, 1, "", "adj_direction"], [88, 2, 1, "", "attrs"], [88, 2, 1, "", "check_cycle"], [98, 1, 1, "", "clear"], [99, 1, 1, "", "clear_edges"], [100, 1, 1, "", "compose"], [101, 1, 1, "", "contract_nodes"], [102, 1, 1, "", "copy"], [103, 1, 1, "", "edge_index_map"], [104, 1, 1, "", "edge_indices"], [105, 1, 1, "", "edge_indices_from_endpoints"], [106, 1, 1, "", "edge_list"], [107, 1, 1, "", "edge_subgraph"], [108, 1, 1, "", "edges"], [109, 1, 1, "", "extend_from_edge_list"], [110, 1, 1, "", "extend_from_weighted_edge_list"], [111, 1, 1, "", "filter_edges"], [112, 1, 1, "", "filter_nodes"], [113, 1, 1, "", "find_adjacent_node_by_edge"], [114, 1, 1, "", "find_node_by_weight"], [115, 1, 1, "", "find_predecessor_node_by_edge"], [116, 1, 1, "", "find_predecessors_by_edge"], [117, 1, 1, "", "find_successors_by_edge"], [118, 1, 1, "", "from_adjacency_matrix"], [119, 1, 1, "", "from_complex_adjacency_matrix"], [120, 1, 1, "", "get_all_edge_data"], [121, 1, 1, "", "get_edge_data"], [122, 1, 1, "", "get_edge_data_by_index"], [123, 1, 1, "", "get_edge_endpoints_by_index"], [124, 1, 1, "", "get_node_data"], [125, 1, 1, "", "has_edge"], [126, 1, 1, "", "has_node"], [127, 1, 1, "", "has_parallel_edges"], [128, 1, 1, "", "in_degree"], [129, 1, 1, "", "in_edges"], [130, 1, 1, "", "incident_edge_index_map"], [131, 1, 1, "", "incident_edges"], [132, 1, 1, "", "insert_node_on_in_edges"], [133, 1, 1, "", "insert_node_on_in_edges_multiple"], [134, 1, 1, "", "insert_node_on_out_edges"], [135, 1, 1, "", "insert_node_on_out_edges_multiple"], [136, 1, 1, "", "is_symmetric"], [137, 1, 1, "", "make_symmetric"], [138, 1, 1, "", "merge_nodes"], [88, 2, 1, "", "multigraph"], [139, 1, 1, "", "neighbors"], [140, 1, 1, "", "neighbors_undirected"], [141, 1, 1, "", "node_indexes"], [142, 1, 1, "", "node_indices"], [143, 1, 1, "", "nodes"], [144, 1, 1, "", "num_edges"], [145, 1, 1, "", "num_nodes"], [146, 1, 1, "", "out_degree"], [147, 1, 1, "", "out_edges"], [148, 1, 1, "", "predecessor_indices"], [149, 1, 1, "", "predecessors"], [150, 1, 1, "", "read_edge_list"], [151, 1, 1, "", "remove_edge"], [152, 1, 1, "", "remove_edge_from_index"], [153, 1, 1, "", "remove_edges_from"], [154, 1, 1, "", "remove_node"], [155, 1, 1, "", "remove_node_retain_edges"], [156, 1, 1, "", "remove_node_retain_edges_by_id"], [157, 1, 1, "", "remove_node_retain_edges_by_key"], [158, 1, 1, "", "remove_nodes_from"], [159, 1, 1, "", "reverse"], [160, 1, 1, "", "subgraph"], [161, 1, 1, "", "substitute_node_with_subgraph"], [162, 1, 1, "", "successor_indices"], [163, 1, 1, "", "successors"], [164, 1, 1, "", "to_dot"], [165, 1, 1, "", "to_undirected"], [166, 1, 1, "", "update_edge"], [167, 1, 1, "", "update_edge_by_index"], [168, 1, 1, "", "weighted_edge_list"], [169, 1, 1, "", "write_edge_list"]], "rustworkx.PyDiGraph": [[171, 1, 1, "", "add_child"], [172, 1, 1, "", "add_edge"], [173, 1, 1, "", "add_edges_from"], [174, 1, 1, "", "add_edges_from_no_data"], [175, 1, 1, "", "add_node"], [176, 1, 1, "", "add_nodes_from"], [177, 1, 1, "", "add_parent"], [178, 1, 1, "", "adj"], [179, 1, 1, "", "adj_direction"], [170, 2, 1, "", "attrs"], [170, 2, 1, "", "check_cycle"], [180, 1, 1, "", "clear"], [181, 1, 1, "", "clear_edges"], [182, 1, 1, "", "compose"], [183, 1, 1, "", "contract_nodes"], [184, 1, 1, "", "copy"], [185, 1, 1, "", "edge_index_map"], [186, 1, 1, "", "edge_indices"], [187, 1, 1, "", "edge_indices_from_endpoints"], [188, 1, 1, "", "edge_list"], [189, 1, 1, "", "edge_subgraph"], [190, 1, 1, "", "edges"], [191, 1, 1, "", "extend_from_edge_list"], [192, 1, 1, "", "extend_from_weighted_edge_list"], [193, 1, 1, "", "filter_edges"], [194, 1, 1, "", "filter_nodes"], [195, 1, 1, "", "find_adjacent_node_by_edge"], [196, 1, 1, "", "find_node_by_weight"], [197, 1, 1, "", "find_predecessor_node_by_edge"], [198, 1, 1, "", "find_predecessors_by_edge"], [199, 1, 1, "", "find_successors_by_edge"], [200, 1, 1, "", "from_adjacency_matrix"], [201, 1, 1, "", "from_complex_adjacency_matrix"], [202, 1, 1, "", "get_all_edge_data"], [203, 1, 1, "", "get_edge_data"], [204, 1, 1, "", "get_edge_data_by_index"], [205, 1, 1, "", "get_edge_endpoints_by_index"], [206, 1, 1, "", "get_node_data"], [207, 1, 1, "", "has_edge"], [208, 1, 1, "", "has_node"], [209, 1, 1, "", "has_parallel_edges"], [210, 1, 1, "", "in_degree"], [211, 1, 1, "", "in_edges"], [212, 1, 1, "", "incident_edge_index_map"], [213, 1, 1, "", "incident_edges"], [214, 1, 1, "", "insert_node_on_in_edges"], [215, 1, 1, "", "insert_node_on_in_edges_multiple"], [216, 1, 1, "", "insert_node_on_out_edges"], [217, 1, 1, "", "insert_node_on_out_edges_multiple"], [218, 1, 1, "", "is_symmetric"], [219, 1, 1, "", "make_symmetric"], [220, 1, 1, "", "merge_nodes"], [170, 2, 1, "", "multigraph"], [221, 1, 1, "", "neighbors"], [222, 1, 1, "", "neighbors_undirected"], [223, 1, 1, "", "node_indexes"], [224, 1, 1, "", "node_indices"], [225, 1, 1, "", "nodes"], [226, 1, 1, "", "num_edges"], [227, 1, 1, "", "num_nodes"], [228, 1, 1, "", "out_degree"], [229, 1, 1, "", "out_edges"], [230, 1, 1, "", "predecessor_indices"], [231, 1, 1, "", "predecessors"], [232, 1, 1, "", "read_edge_list"], [233, 1, 1, "", "remove_edge"], [234, 1, 1, "", "remove_edge_from_index"], [235, 1, 1, "", "remove_edges_from"], [236, 1, 1, "", "remove_node"], [237, 1, 1, "", "remove_node_retain_edges"], [238, 1, 1, "", "remove_node_retain_edges_by_id"], [239, 1, 1, "", "remove_node_retain_edges_by_key"], [240, 1, 1, "", "remove_nodes_from"], [241, 1, 1, "", "reverse"], [242, 1, 1, "", "subgraph"], [243, 1, 1, "", "substitute_node_with_subgraph"], [244, 1, 1, "", "successor_indices"], [245, 1, 1, "", "successors"], [246, 1, 1, "", "to_dot"], [247, 1, 1, "", "to_undirected"], [248, 1, 1, "", "update_edge"], [249, 1, 1, "", "update_edge_by_index"], [250, 1, 1, "", "weighted_edge_list"], [251, 1, 1, "", "write_edge_list"]], "rustworkx.PyGraph": [[253, 1, 1, "", "add_edge"], [254, 1, 1, "", "add_edges_from"], [255, 1, 1, "", "add_edges_from_no_data"], [256, 1, 1, "", "add_node"], [257, 1, 1, "", "add_nodes_from"], [258, 1, 1, "", "adj"], [252, 2, 1, "", "attrs"], [259, 1, 1, "", "clear"], [260, 1, 1, "", "clear_edges"], [261, 1, 1, "", "compose"], [262, 1, 1, "", "contract_nodes"], [263, 1, 1, "", "copy"], [264, 1, 1, "", "degree"], [265, 1, 1, "", "edge_index_map"], [266, 1, 1, "", "edge_indices"], [267, 1, 1, "", "edge_indices_from_endpoints"], [268, 1, 1, "", "edge_list"], [269, 1, 1, "", "edge_subgraph"], [270, 1, 1, "", "edges"], [271, 1, 1, "", "extend_from_edge_list"], [272, 1, 1, "", "extend_from_weighted_edge_list"], [273, 1, 1, "", "filter_edges"], [274, 1, 1, "", "filter_nodes"], [275, 1, 1, "", "find_node_by_weight"], [276, 1, 1, "", "from_adjacency_matrix"], [277, 1, 1, "", "from_complex_adjacency_matrix"], [278, 1, 1, "", "get_all_edge_data"], [279, 1, 1, "", "get_edge_data"], [280, 1, 1, "", "get_edge_data_by_index"], [281, 1, 1, "", "get_edge_endpoints_by_index"], [282, 1, 1, "", "get_node_data"], [283, 1, 1, "", "has_edge"], [284, 1, 1, "", "has_node"], [285, 1, 1, "", "has_parallel_edges"], [286, 1, 1, "", "in_edges"], [287, 1, 1, "", "incident_edge_index_map"], [288, 1, 1, "", "incident_edges"], [252, 2, 1, "", "multigraph"], [289, 1, 1, "", "neighbors"], [290, 1, 1, "", "node_indexes"], [291, 1, 1, "", "node_indices"], [292, 1, 1, "", "nodes"], [293, 1, 1, "", "num_edges"], [294, 1, 1, "", "num_nodes"], [295, 1, 1, "", "out_edges"], [296, 1, 1, "", "read_edge_list"], [297, 1, 1, "", "remove_edge"], [298, 1, 1, "", "remove_edge_from_index"], [299, 1, 1, "", "remove_edges_from"], [300, 1, 1, "", "remove_node"], [301, 1, 1, "", "remove_nodes_from"], [302, 1, 1, "", "subgraph"], [303, 1, 1, "", "substitute_node_with_subgraph"], [304, 1, 1, "", "to_directed"], [305, 1, 1, "", "to_dot"], [306, 1, 1, "", "update_edge"], [307, 1, 1, "", "update_edge_by_index"], [308, 1, 1, "", "weighted_edge_list"], [309, 1, 1, "", "write_edge_list"]], "rustworkx.TopologicalSorter": [[312, 1, 1, "", "done"], [313, 1, 1, "", "get_ready"], [314, 1, 1, "", "is_active"]], "rustworkx.generators": [[418, 4, 1, "", "barbell_graph"], [419, 4, 1, "", "binomial_tree_graph"], [420, 4, 1, "", "complete_graph"], [421, 4, 1, "", "cycle_graph"], [422, 4, 1, "", "directed_binomial_tree_graph"], [423, 4, 1, "", "directed_complete_graph"], [424, 4, 1, "", "directed_cycle_graph"], [425, 4, 1, "", "directed_empty_graph"], [426, 4, 1, "", "directed_grid_graph"], [427, 4, 1, "", "directed_heavy_hex_graph"], [428, 4, 1, "", "directed_heavy_square_graph"], [429, 4, 1, "", "directed_hexagonal_lattice_graph"], [430, 4, 1, "", "directed_mesh_graph"], [431, 4, 1, "", "directed_path_graph"], [432, 4, 1, "", "directed_star_graph"], [433, 4, 1, "", "dorogovtsev_goltsev_mendes_graph"], [434, 4, 1, "", "empty_graph"], [435, 4, 1, "", "full_rary_tree"], [436, 4, 1, "", "generalized_petersen_graph"], [437, 4, 1, "", "grid_graph"], [438, 4, 1, "", "heavy_hex_graph"], [439, 4, 1, "", "heavy_square_graph"], [440, 4, 1, "", "hexagonal_lattice_graph"], [441, 4, 1, "", "lollipop_graph"], [442, 4, 1, "", "mesh_graph"], [443, 4, 1, "", "path_graph"], [444, 4, 1, "", "star_graph"]], "rustworkx.visit": [[550, 0, 1, "", "BFSVisitor"], [557, 0, 1, "", "DFSVisitor"], [563, 0, 1, "", "DijkstraVisitor"], [569, 3, 1, "", "PruneSearch"], [570, 3, 1, "", "StopSearch"]], "rustworkx.visit.BFSVisitor": [[551, 1, 1, "", "black_target_edge"], [552, 1, 1, "", "discover_vertex"], [553, 1, 1, "", "finish_vertex"], [554, 1, 1, "", "gray_target_edge"], [555, 1, 1, "", "non_tree_edge"], [556, 1, 1, "", "tree_edge"]], "rustworkx.visit.DFSVisitor": [[558, 1, 1, "", "back_edge"], [559, 1, 1, "", "discover_vertex"], [560, 1, 1, "", "finish_vertex"], [561, 1, 1, "", "forward_or_cross_edge"], [562, 1, 1, "", "tree_edge"]], "rustworkx.visit.DijkstraVisitor": [[564, 1, 1, "", "discover_vertex"], [565, 1, 1, "", "edge_not_relaxed"], [566, 1, 1, "", "edge_relaxed"], [567, 1, 1, "", "examine_edge"], [568, 1, 1, "", "finish_vertex"]], "rustworkx.visualization": [[571, 4, 1, "", "graphviz_draw"], [572, 4, 1, "", "mpl_draw"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:attribute", "3": "py:exception", "4": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "exception", "Python exception"], "4": ["py", "function", "Python function"]}, "titleterms": {"contribut": 0, "rustworkx": [0, 19, 26, 27, 28, 30, 31, 32, 36, 37, 38, 40, 41, 42, 45, 46, 48, 49, 50, 52, 53, 54, 57, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 73, 74, 75, 77, 78, 79, 81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 313, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 581, 582], "make": 0, "chang": 0, "code": 0, "modul": 0, "export": 0, "lib": 0, "r": 0, "ad": 0, "function": [0, 6, 10, 20, 21, 22, 23, 577], "directori": 0, "when": 0, "singl": [0, 574], "file": 0, "i": 0, "enough": 0, "core": [0, 575], "test": 0, "run": 0, "specif": 0, "python": 0, "version": 0, "subset": 0, "visual": [0, 571, 572, 577, 579, 583], "style": 0, "rust": 0, "lint": 0, "build": 0, "document": [0, 575], "type": [0, 15], "annot": 0, "releas": [0, 578], "note": [0, 578], "new": [0, 578], "link": [0, 8], "issu": 0, "gener": [0, 17, 23, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 579, 582], "local": 0, "pull": 0, "request": 0, "review": 0, "ci": 0, "merg": 0, "queue": 0, "stabl": 0, "branch": 0, "polici": 0, "backport": 0, "procedur": 0, "manual": 0, "central": [1, 579], "color": 2, "connect": 3, "cycl": 3, "dag": [4, 580], "algorithm": [4, 6, 10], "graph": [5, 18, 23, 574, 577, 579, 580, 582], "oper": [5, 582], "isomorph": [7, 574], "analysi": 8, "match": 9, "other": [10, 574, 578], "shortest": [11, 574], "path": [11, 574], "travers": 12, "tree": 13, "convert": [14, 577], "custom": 15, "return": 15, "except": 16, "class": [18, 577], "api": [19, 21, 22, 577, 583], "refer": 19, "layout": 20, "pydigraph": [21, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251], "pygraph": [22, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], "random": 23, "serial": 24, "allpairspathlengthmap": [25, 26, 27, 28], "item": [26, 30, 36, 40, 48, 52, 68, 73, 77, 81, 85], "kei": [27, 31, 37, 41, 49, 53, 69, 74, 78, 82, 86, 577], "valu": [28, 32, 38, 42, 50, 54, 70, 75, 79, 83, 87], "allpairspathmap": [29, 30, 31, 32], "bfspredecessor": 33, "bfssuccessor": 34, "biconnectedcompon": [35, 36, 37, 38], "centralitymap": [39, 40, 41, 42], "chain": 43, "coloringstrategi": 44, "strategi": 44, "descript": 44, "daghascycl": 45, "dagwouldcycl": 46, "edgecentralitymap": [47, 48, 49, 50], "edgeindexmap": [51, 52, 53, 54], "edgeindic": 55, "edgelist": 56, "graphnotbipartit": 57, "indexpartitionblock": 58, "invalidmap": 59, "invalidnod": 60, "jsonserializationerror": 61, "negativecycl": 62, "noedgebetweennod": 63, "nopathfound": 64, "nosuitableneighbor": 65, "nodeindic": 66, "nodemap": [67, 68, 69, 70], "nullgraph": 71, "pathlengthmap": [72, 73, 74, 75], "pathmap": [76, 77, 78, 79], "pos2dmap": [80, 81, 82, 83], "productnodemap": [84, 85, 86, 87], "pydag": [88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169], "add_child": [89, 171], "add_edg": [90, 172, 253], "add_edges_from": [91, 173, 254], "add_edges_from_no_data": [92, 174, 255], "add_nod": [93, 175, 256], "add_nodes_from": [94, 176, 257], "add_par": [95, 177], "adj": [96, 178, 258], "adj_direct": [97, 179], "clear": [98, 180, 259], "clear_edg": [99, 181, 260], "compos": [100, 182, 261], "contract_nod": [101, 183, 262], "copi": [102, 184, 263], "edge_index_map": [103, 185, 265], "edge_indic": [104, 186, 266], "edge_indices_from_endpoint": [105, 187, 267], "edge_list": [106, 188, 268], "edge_subgraph": [107, 189, 269], "edg": [108, 190, 270, 577, 582], "extend_from_edge_list": [109, 191, 271], "extend_from_weighted_edge_list": [110, 192, 272], "filter_edg": [111, 193, 273], "filter_nod": [112, 194, 274], "find_adjacent_node_by_edg": [113, 195], "find_node_by_weight": [114, 196, 275], "find_predecessor_node_by_edg": [115, 197], "find_predecessors_by_edg": [116, 198], "find_successors_by_edg": [117, 199], "from_adjacency_matrix": [118, 200, 276], "from_complex_adjacency_matrix": [119, 201, 277], "get_all_edge_data": [120, 202, 278], "get_edge_data": [121, 203, 279], "get_edge_data_by_index": [122, 204, 280], "get_edge_endpoints_by_index": [123, 205, 281], "get_node_data": [124, 206, 282], "has_edg": [125, 207, 283], "has_nod": [126, 208, 284], "has_parallel_edg": [127, 209, 285], "in_degre": [128, 210], "in_edg": [129, 211, 286], "incident_edge_index_map": [130, 212, 287], "incident_edg": [131, 213, 288], "insert_node_on_in_edg": [132, 214], "insert_node_on_in_edges_multipl": [133, 215], "insert_node_on_out_edg": [134, 216], "insert_node_on_out_edges_multipl": [135, 217], "is_symmetr": [136, 218], "make_symmetr": [137, 219], "merge_nod": [138, 220], "neighbor": [139, 221, 289, 582], "neighbors_undirect": [140, 222], "node_index": [141, 223, 290], "node_indic": [142, 224, 291], "node": [143, 225, 292, 577, 582], "num_edg": [144, 226, 293], "num_nod": [145, 227, 294], "out_degre": [146, 228], "out_edg": [147, 229, 295], "predecessor_indic": [148, 230], "predecessor": [149, 231], "read_edge_list": [150, 232, 296], "remove_edg": [151, 233, 297], "remove_edge_from_index": [152, 234, 298], "remove_edges_from": [153, 235, 299], "remove_nod": [154, 236, 300], "remove_node_retain_edg": [155, 237], "remove_node_retain_edges_by_id": [156, 238], "remove_node_retain_edges_by_kei": [157, 239], "remove_nodes_from": [158, 240, 301], "revers": [159, 241], "subgraph": [160, 242, 302, 574], "substitute_node_with_subgraph": [161, 243, 303], "successor_indic": [162, 244], "successor": [163, 245], "to_dot": [164, 246, 305], "to_undirect": [165, 247], "update_edg": [166, 248, 306], "update_edge_by_index": [167, 249, 307], "weighted_edge_list": [168, 250, 308], "write_edge_list": [169, 251, 309], "degre": 264, "to_direct": 304, "relationalcoarsestpartit": 310, "topologicalsort": [311, 312, 313, 314], "done": 312, "get_readi": 313, "is_act": 314, "weightededgelist": 315, "adjacency_matrix": 316, "all_pairs_all_simple_path": 317, "all_pairs_bellman_ford_path_length": 318, "all_pairs_bellman_ford_shortest_path": 319, "all_pairs_dijkstra_path_length": 320, "all_pairs_dijkstra_shortest_path": 321, "all_shortest_path": 322, "all_simple_path": 323, "ancestor": 324, "articulation_point": 325, "astar_shortest_path": 326, "barabasi_albert_graph": 327, "bellman_ford_shortest_path_length": 328, "bellman_ford_shortest_path": 329, "betweenness_centr": 330, "see": [330, 365, 379, 411, 455, 470], "also": [330, 365, 379, 411, 455, 470], "bfs_predecessor": 331, "bfs_search": 332, "bfs_successor": 333, "biconnected_compon": 334, "bipartite_layout": 335, "bridg": 336, "cartesian_product": 337, "chain_decomposit": 338, "circular_layout": 339, "closeness_centr": 340, "collect_bicolor_run": 341, "collect_run": 342, "complement": 343, "connected_compon": 344, "connected_subgraph": 345, "core_numb": 346, "cycle_basi": 347, "dag_longest_path": 348, "dag_longest_path_length": 349, "dag_weighted_longest_path": 350, "dag_weighted_longest_path_length": 351, "descend": 352, "dfs_edg": 353, "dfs_search": 354, "digraph_adjacency_matrix": 355, "digraph_all_pairs_all_simple_path": 356, "digraph_all_pairs_bellman_ford_path_length": 357, "digraph_all_pairs_bellman_ford_shortest_path": 358, "digraph_all_pairs_dijkstra_path_length": 359, "digraph_all_pairs_dijkstra_shortest_path": 360, "digraph_all_shortest_path": 361, "digraph_all_simple_path": 362, "digraph_astar_shortest_path": 363, "digraph_bellman_ford_shortest_path_length": 364, "digraph_betweenness_centr": 365, "digraph_bfs_search": 366, "digraph_bipartite_layout": 367, "digraph_cartesian_product": 368, "digraph_circular_layout": 369, "digraph_closeness_centr": 370, "digraph_compl": 371, "digraph_core_numb": 372, "digraph_dfs_edg": 373, "digraph_dfs_search": 374, "digraph_dijkstra_search": 375, "digraph_dijkstra_shortest_path_length": 376, "digraph_dijkstra_shortest_path": 377, "digraph_distance_matrix": 378, "digraph_edge_betweenness_centr": 379, "digraph_eigenvector_centr": 380, "digraph_find_cycl": 381, "digraph_floyd_warshal": 382, "digraph_floyd_warshall_numpi": 383, "digraph_floyd_warshall_successor_and_dist": 384, "digraph_is_isomorph": 385, "digraph_is_subgraph_isomorph": 386, "digraph_k_shortest_path_length": 387, "digraph_katz_centr": 388, "digraph_longest_simple_path": 389, "digraph_maximum_bisimul": 390, "digraph_node_link_json": 391, "digraph_num_shortest_paths_unweight": 392, "digraph_random_layout": 393, "digraph_shell_layout": 394, "digraph_spiral_layout": 395, "digraph_spring_layout": 396, "digraph_tensor_product": 397, "digraph_transit": 398, "digraph_union": 399, "digraph_unweighted_average_shortest_path_length": 400, "digraph_vf2_map": 401, "dijkstra_search": 402, "dijkstra_shortest_path_length": 403, "dijkstra_shortest_path": 404, "directed_barabasi_albert_graph": 405, "directed_gnm_random_graph": 406, "directed_gnp_random_graph": 407, "directed_random_bipartite_graph": 408, "directed_sbm_random_graph": 409, "distance_matrix": 410, "edge_betweenness_centr": 411, "eigenvector_centr": 412, "find_negative_cycl": 413, "floyd_warshal": 414, "floyd_warshall_numpi": 415, "floyd_warshall_successor_and_dist": 416, "from_node_link_json_fil": 417, "barbell_graph": 418, "binomial_tree_graph": 419, "complete_graph": 420, "cycle_graph": 421, "directed_binomial_tree_graph": 422, "directed_complete_graph": 423, "directed_cycle_graph": 424, "directed_empty_graph": 425, "directed_grid_graph": 426, "directed_heavy_hex_graph": 427, "directed_heavy_square_graph": 428, "directed_hexagonal_lattice_graph": 429, "directed_mesh_graph": 430, "directed_path_graph": 431, "directed_star_graph": 432, "dorogovtsev_goltsev_mendes_graph": 433, "empty_graph": 434, "full_rary_tre": 435, "generalized_petersen_graph": 436, "grid_graph": 437, "heavy_hex_graph": 438, "heavy_square_graph": 439, "hexagonal_lattice_graph": 440, "lollipop_graph": 441, "mesh_graph": 442, "path_graph": 443, "star_graph": 444, "graph_adjacency_matrix": 445, "graph_all_pairs_all_simple_path": 446, "graph_all_pairs_bellman_ford_path_length": 447, "graph_all_pairs_bellman_ford_shortest_path": 448, "graph_all_pairs_dijkstra_path_length": 449, "graph_all_pairs_dijkstra_shortest_path": 450, "graph_all_shortest_path": 451, "graph_all_simple_path": 452, "graph_astar_shortest_path": 453, "graph_bellman_ford_shortest_path_length": 454, "graph_betweenness_centr": 455, "graph_bfs_search": 456, "graph_bipartite_edge_color": 457, "graph_bipartite_layout": 458, "graph_cartesian_product": 459, "graph_circular_layout": 460, "graph_closeness_centr": 461, "graph_compl": 462, "graph_core_numb": 463, "graph_dfs_edg": 464, "graph_dfs_search": 465, "graph_dijkstra_search": 466, "graph_dijkstra_shortest_path_length": 467, "graph_dijkstra_shortest_path": 468, "graph_distance_matrix": 469, "graph_edge_betweenness_centr": 470, "graph_eigenvector_centr": 471, "graph_floyd_warshal": 472, "graph_floyd_warshall_numpi": 473, "graph_floyd_warshall_successor_and_dist": 474, "graph_greedy_color": 475, "graph_greedy_edge_color": 476, "graph_is_isomorph": 477, "graph_is_subgraph_isomorph": 478, "graph_k_shortest_path_length": 479, "graph_katz_centr": 480, "graph_line_graph": 481, "graph_longest_simple_path": 482, "graph_misra_gries_edge_color": 483, "graph_node_link_json": 484, "graph_num_shortest_paths_unweight": 485, "graph_random_layout": 486, "graph_shell_layout": 487, "graph_spiral_layout": 488, "graph_spring_layout": 489, "graph_tensor_product": 490, "graph_token_swapp": 491, "graph_transit": 492, "graph_union": 493, "graph_unweighted_average_shortest_path_length": 494, "graph_vf2_map": 495, "has_path": 496, "hit": 497, "hyperbolic_random_graph": 498, "is_bipartit": 499, "is_connect": 500, "is_directed_acyclic_graph": 501, "is_isomorph": 502, "is_isomorphic_node_match": 503, "is_match": 504, "is_maximal_match": 505, "is_planar": 506, "is_subgraph_isomorph": 507, "is_weakly_connect": 508, "isol": 509, "k_shortest_path_length": 510, "katz_centr": 511, "layer": 512, "lexicographical_topological_sort": 513, "longest_simple_path": 514, "max_weight_match": 515, "metric_closur": 516, "minimum_spanning_edg": 517, "minimum_spanning_tre": 518, "negative_edge_cycl": 519, "networkx_convert": 520, "node_connected_compon": 521, "node_link_json": 522, "num_shortest_paths_unweight": 523, "number_connected_compon": 524, "number_weakly_connected_compon": 525, "pagerank": 526, "parse_node_link_json": 527, "random_geometric_graph": 528, "random_layout": 529, "read_graphml": 530, "shell_layout": 531, "simple_cycl": 532, "spiral_layout": 533, "spring_layout": 534, "steiner_tre": 535, "stoer_wagner_min_cut": 536, "strongly_connected_compon": 537, "topological_gener": 538, "topological_sort": 539, "transitive_reduct": 540, "transit": 541, "two_color": 542, "undirected_gnm_random_graph": 543, "undirected_gnp_random_graph": 544, "undirected_random_bipartite_graph": 545, "undirected_sbm_random_graph": 546, "union": 547, "unweighted_average_shortest_path_length": 548, "vf2_map": 549, "bfsvisitor": [550, 551, 552, 553, 554, 555, 556], "visit": [551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570], "black_target_edg": 551, "discover_vertex": [552, 559, 564], "finish_vertex": [553, 560, 568], "gray_target_edg": 554, "non_tree_edg": 555, "tree_edg": [556, 562], "dfsvisitor": [557, 558, 559, 560, 561, 562], "back_edg": 558, "forward_or_cross_edg": 561, "dijkstravisitor": [563, 564, 565, 566, 567, 568], "edge_not_relax": 565, "edge_relax": 566, "examine_edg": 567, "prunesearch": 569, "stopsearch": 570, "graphviz_draw": 571, "mpl_draw": 572, "weakly_connected_compon": 573, "comparison": 574, "benchmark": 574, "With": 574, "librari": 574, "creation": 574, "sourc": 574, "all": 574, "pair": 574, "citat": 574, "project": 575, "histori": 575, "get": 576, "start": 576, "instal": [576, 582], "platform": 576, "without": 576, "precompil": 576, "binari": 576, "support": 576, "tier": 576, "1": [576, 578], "2": [576, 578], "3": 576, "4": [576, 578], "us": [576, 582], "networkx": 577, "user": 577, "some": 577, "differ": 577, "data": [577, 582], "attribut": [577, 582], "examin": [577, 582], "element": [577, 582], "equival": 577, "constructor": 577, "modifi": [577, 582], "matrix": 577, "matplotlib": 577, "drawer": 577, "from": [577, 582], "gap": 577, "0": 578, "15": 578, "26": 578, "featur": 578, "prelud": 578, "bug": 578, "fix": 578, "upgrad": 578, "14": 578, "deprec": 578, "13": 578, "12": 578, "11": 578, "10": 578, "9": 578, "8": 578, "7": 578, "6": 578, "5": 578, "work": 579, "between": 579, "calcul": 579, "betwe": 579, "direct": [580, 582], "acycl": 580, "applic": 580, "task": 580, "schedul": 580, "qiskit": 580, "": 580, "compil": 580, "tutori": 581, "guid": 581, "introduct": 582, "how": 582, "import": 582, "creat": 582, "remov": 582, "what": 582, "payload": 582, "access": 582, "multigraph": 582, "analyz": 582, "draw": 582}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.todo": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Contributing": [[0, "contributing"]], "Contributing to rustworkx": [[0, "contributing-to-rustworkx"]], "Making changes to the code": [[0, "making-changes-to-the-code"]], "Module exports in lib.rs": [[0, "module-exports-in-lib-rs"]], "Adding and changing functions in modules": [[0, "adding-and-changing-functions-in-modules"]], "Module directories: when a single file is not enough": [[0, "module-directories-when-a-single-file-is-not-enough"]], "rustworkx-core": [[0, "rustworkx-core"], [575, "rustworkx-core"]], "Tests": [[0, "tests"]], "Running tests with a specific Python version": [[0, "running-tests-with-a-specific-python-version"]], "Running subsets of tests": [[0, "running-subsets-of-tests"]], "Visualization Tests": [[0, "visualization-tests"]], "rustworkx-core tests": [[0, "rustworkx-core-tests"]], "Style": [[0, "style"]], "Rust": [[0, "rust"]], "Lint": [[0, "lint"]], "Python": [[0, "python"]], "Building documentation": [[0, "building-documentation"]], "rustworkx-core documentation": [[0, "rustworkx-core-documentation"]], "Type Annotations": [[0, "type-annotations"]], "Release Notes": [[0, "release-notes"], [578, "release-notes"]], "Adding a new release note": [[0, "adding-a-new-release-note"]], "Linking to issues": [[0, "linking-to-issues"]], "Generating the release notes": [[0, "generating-the-release-notes"]], "Building release notes locally": [[0, "building-release-notes-locally"]], "Pull request review, CI, and merge queue": [[0, "pull-request-review-ci-and-merge-queue"]], "Stable Branch Policy and Backporting": [[0, "stable-branch-policy-and-backporting"]], "Backporting procedure": [[0, "backporting-procedure"]], "Manual backport procedure": [[0, "manual-backport-procedure"]], "Centrality": [[1, "centrality"]], "Coloring": [[2, "coloring"]], "Connectivity and Cycles": [[3, "connectivity-and-cycles"]], "DAG Algorithms": [[4, "dag-algorithms"]], "Graph Operations": [[5, "graph-operations"]], "Algorithm Functions": [[6, "algorithm-functions"]], "Isomorphism": [[7, "isomorphism"]], "Link Analysis": [[8, "link-analysis"]], "Matching": [[9, "matching"]], "Other Algorithm Functions": [[10, "other-algorithm-functions"]], "Shortest Paths": [[11, "shortest-paths"]], "Traversal": [[12, "traversal"]], "Tree": [[13, "tree"]], "Converters": [[14, "converters"]], "Custom Return Types": [[15, "custom-return-types"]], "Exceptions": [[16, "exceptions"]], "Generators": [[17, "generators"]], "Graph Classes": [[18, "graph-classes"]], "Rustworkx API Reference": [[19, "rustworkx-api-reference"]], "Layout Functions": [[20, "layout-functions"]], "API functions for PyDigraph": [[21, "api-functions-for-pydigraph"]], "API functions for PyGraph": [[22, "api-functions-for-pygraph"]], "Random Graph Generator Functions": [[23, "random-graph-generator-functions"]], "Serialization": [[24, "serialization"]], "AllPairsPathLengthMapping": [[25, "allpairspathlengthmapping"]], "rustworkx.AllPairsPathLengthMapping.items": [[26, "rustworkx-allpairspathlengthmapping-items"]], "rustworkx.AllPairsPathLengthMapping.keys": [[27, "rustworkx-allpairspathlengthmapping-keys"]], "rustworkx.AllPairsPathLengthMapping.values": [[28, "rustworkx-allpairspathlengthmapping-values"]], "AllPairsPathMapping": [[29, "allpairspathmapping"]], "rustworkx.AllPairsPathMapping.items": [[30, "rustworkx-allpairspathmapping-items"]], "rustworkx.AllPairsPathMapping.keys": [[31, "rustworkx-allpairspathmapping-keys"]], "rustworkx.AllPairsPathMapping.values": [[32, "rustworkx-allpairspathmapping-values"]], "BFSPredecessors": [[33, "bfspredecessors"]], "BFSSuccessors": [[34, "bfssuccessors"]], "BiconnectedComponents": [[35, "biconnectedcomponents"]], "rustworkx.BiconnectedComponents.items": [[36, "rustworkx-biconnectedcomponents-items"]], "rustworkx.BiconnectedComponents.keys": [[37, "rustworkx-biconnectedcomponents-keys"]], "rustworkx.BiconnectedComponents.values": [[38, "rustworkx-biconnectedcomponents-values"]], "CentralityMapping": [[39, "centralitymapping"]], "rustworkx.CentralityMapping.items": [[40, "rustworkx-centralitymapping-items"]], "rustworkx.CentralityMapping.keys": [[41, "rustworkx-centralitymapping-keys"]], "rustworkx.CentralityMapping.values": [[42, "rustworkx-centralitymapping-values"]], "Chains": [[43, "chains"]], "ColoringStrategy": [[44, "coloringstrategy"]], "Strategy description": [[44, "id1"]], "rustworkx.DAGHasCycle": [[45, "rustworkx-daghascycle"]], "rustworkx.DAGWouldCycle": [[46, "rustworkx-dagwouldcycle"]], "EdgeCentralityMapping": [[47, "edgecentralitymapping"]], "rustworkx.EdgeCentralityMapping.items": [[48, "rustworkx-edgecentralitymapping-items"]], "rustworkx.EdgeCentralityMapping.keys": [[49, "rustworkx-edgecentralitymapping-keys"]], "rustworkx.EdgeCentralityMapping.values": [[50, "rustworkx-edgecentralitymapping-values"]], "EdgeIndexMap": [[51, "edgeindexmap"]], "rustworkx.EdgeIndexMap.items": [[52, "rustworkx-edgeindexmap-items"]], "rustworkx.EdgeIndexMap.keys": [[53, "rustworkx-edgeindexmap-keys"]], "rustworkx.EdgeIndexMap.values": [[54, "rustworkx-edgeindexmap-values"]], "EdgeIndices": [[55, "edgeindices"]], "EdgeList": [[56, "edgelist"]], "rustworkx.GraphNotBipartite": [[57, "rustworkx-graphnotbipartite"]], "IndexPartitionBlock": [[58, "indexpartitionblock"]], "rustworkx.InvalidMapping": [[59, "rustworkx-invalidmapping"]], "rustworkx.InvalidNode": [[60, "rustworkx-invalidnode"]], "rustworkx.JSONSerializationError": [[61, "rustworkx-jsonserializationerror"]], "rustworkx.NegativeCycle": [[62, "rustworkx-negativecycle"]], "rustworkx.NoEdgeBetweenNodes": [[63, "rustworkx-noedgebetweennodes"]], "rustworkx.NoPathFound": [[64, "rustworkx-nopathfound"]], "rustworkx.NoSuitableNeighbors": [[65, "rustworkx-nosuitableneighbors"]], "NodeIndices": [[66, "nodeindices"]], "NodeMap": [[67, "nodemap"]], "rustworkx.NodeMap.items": [[68, "rustworkx-nodemap-items"]], "rustworkx.NodeMap.keys": [[69, "rustworkx-nodemap-keys"]], "rustworkx.NodeMap.values": [[70, "rustworkx-nodemap-values"]], "rustworkx.NullGraph": [[71, "rustworkx-nullgraph"]], "PathLengthMapping": [[72, "pathlengthmapping"]], "rustworkx.PathLengthMapping.items": [[73, "rustworkx-pathlengthmapping-items"]], "rustworkx.PathLengthMapping.keys": [[74, "rustworkx-pathlengthmapping-keys"]], "rustworkx.PathLengthMapping.values": [[75, "rustworkx-pathlengthmapping-values"]], "PathMapping": [[76, "pathmapping"]], "rustworkx.PathMapping.items": [[77, "rustworkx-pathmapping-items"]], "rustworkx.PathMapping.keys": [[78, "rustworkx-pathmapping-keys"]], "rustworkx.PathMapping.values": [[79, "rustworkx-pathmapping-values"]], "Pos2DMapping": [[80, "pos2dmapping"]], "rustworkx.Pos2DMapping.items": [[81, "rustworkx-pos2dmapping-items"]], "rustworkx.Pos2DMapping.keys": [[82, "rustworkx-pos2dmapping-keys"]], "rustworkx.Pos2DMapping.values": [[83, "rustworkx-pos2dmapping-values"]], "ProductNodeMap": [[84, "productnodemap"]], "rustworkx.ProductNodeMap.items": [[85, "rustworkx-productnodemap-items"]], "rustworkx.ProductNodeMap.keys": [[86, "rustworkx-productnodemap-keys"]], "rustworkx.ProductNodeMap.values": [[87, "rustworkx-productnodemap-values"]], "PyDAG": [[88, "pydag"]], "rustworkx.PyDAG.add_child": [[89, "rustworkx-pydag-add-child"]], "rustworkx.PyDAG.add_edge": [[90, "rustworkx-pydag-add-edge"]], "rustworkx.PyDAG.add_edges_from": [[91, "rustworkx-pydag-add-edges-from"]], "rustworkx.PyDAG.add_edges_from_no_data": [[92, "rustworkx-pydag-add-edges-from-no-data"]], "rustworkx.PyDAG.add_node": [[93, "rustworkx-pydag-add-node"]], "rustworkx.PyDAG.add_nodes_from": [[94, "rustworkx-pydag-add-nodes-from"]], "rustworkx.PyDAG.add_parent": [[95, "rustworkx-pydag-add-parent"]], "rustworkx.PyDAG.adj": [[96, "rustworkx-pydag-adj"]], "rustworkx.PyDAG.adj_direction": [[97, "rustworkx-pydag-adj-direction"]], "rustworkx.PyDAG.clear": [[98, "rustworkx-pydag-clear"]], "rustworkx.PyDAG.clear_edges": [[99, "rustworkx-pydag-clear-edges"]], "rustworkx.PyDAG.compose": [[100, "rustworkx-pydag-compose"]], "rustworkx.PyDAG.contract_nodes": [[101, "rustworkx-pydag-contract-nodes"]], "rustworkx.PyDAG.copy": [[102, "rustworkx-pydag-copy"]], "rustworkx.PyDAG.edge_index_map": [[103, "rustworkx-pydag-edge-index-map"]], "rustworkx.PyDAG.edge_indices": [[104, "rustworkx-pydag-edge-indices"]], "rustworkx.PyDAG.edge_indices_from_endpoints": [[105, "rustworkx-pydag-edge-indices-from-endpoints"]], "rustworkx.PyDAG.edge_list": [[106, "rustworkx-pydag-edge-list"]], "rustworkx.PyDAG.edge_subgraph": [[107, "rustworkx-pydag-edge-subgraph"]], "rustworkx.PyDAG.edges": [[108, "rustworkx-pydag-edges"]], "rustworkx.PyDAG.extend_from_edge_list": [[109, "rustworkx-pydag-extend-from-edge-list"]], "rustworkx.PyDAG.extend_from_weighted_edge_list": [[110, "rustworkx-pydag-extend-from-weighted-edge-list"]], "rustworkx.PyDAG.filter_edges": [[111, "rustworkx-pydag-filter-edges"]], "rustworkx.PyDAG.filter_nodes": [[112, "rustworkx-pydag-filter-nodes"]], "rustworkx.PyDAG.find_adjacent_node_by_edge": [[113, "rustworkx-pydag-find-adjacent-node-by-edge"]], "rustworkx.PyDAG.find_node_by_weight": [[114, "rustworkx-pydag-find-node-by-weight"]], "rustworkx.PyDAG.find_predecessor_node_by_edge": [[115, "rustworkx-pydag-find-predecessor-node-by-edge"]], "rustworkx.PyDAG.find_predecessors_by_edge": [[116, "rustworkx-pydag-find-predecessors-by-edge"]], "rustworkx.PyDAG.find_successors_by_edge": [[117, "rustworkx-pydag-find-successors-by-edge"]], "rustworkx.PyDAG.from_adjacency_matrix": [[118, "rustworkx-pydag-from-adjacency-matrix"]], "rustworkx.PyDAG.from_complex_adjacency_matrix": [[119, "rustworkx-pydag-from-complex-adjacency-matrix"]], "rustworkx.PyDAG.get_all_edge_data": [[120, "rustworkx-pydag-get-all-edge-data"]], "rustworkx.PyDAG.get_edge_data": [[121, "rustworkx-pydag-get-edge-data"]], "rustworkx.PyDAG.get_edge_data_by_index": [[122, "rustworkx-pydag-get-edge-data-by-index"]], "rustworkx.PyDAG.get_edge_endpoints_by_index": [[123, "rustworkx-pydag-get-edge-endpoints-by-index"]], "rustworkx.PyDAG.get_node_data": [[124, "rustworkx-pydag-get-node-data"]], "rustworkx.PyDAG.has_edge": [[125, "rustworkx-pydag-has-edge"]], "rustworkx.PyDAG.has_node": [[126, "rustworkx-pydag-has-node"]], "rustworkx.PyDAG.has_parallel_edges": [[127, "rustworkx-pydag-has-parallel-edges"]], "rustworkx.PyDAG.in_degree": [[128, "rustworkx-pydag-in-degree"]], "rustworkx.PyDAG.in_edges": [[129, "rustworkx-pydag-in-edges"]], "rustworkx.PyDAG.incident_edge_index_map": [[130, "rustworkx-pydag-incident-edge-index-map"]], "rustworkx.PyDAG.incident_edges": [[131, "rustworkx-pydag-incident-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges": [[132, "rustworkx-pydag-insert-node-on-in-edges"]], "rustworkx.PyDAG.insert_node_on_in_edges_multiple": [[133, "rustworkx-pydag-insert-node-on-in-edges-multiple"]], "rustworkx.PyDAG.insert_node_on_out_edges": [[134, "rustworkx-pydag-insert-node-on-out-edges"]], "rustworkx.PyDAG.insert_node_on_out_edges_multiple": [[135, "rustworkx-pydag-insert-node-on-out-edges-multiple"]], "rustworkx.PyDAG.is_symmetric": [[136, "rustworkx-pydag-is-symmetric"]], "rustworkx.PyDAG.make_symmetric": [[137, "rustworkx-pydag-make-symmetric"]], "rustworkx.PyDAG.merge_nodes": [[138, "rustworkx-pydag-merge-nodes"]], "rustworkx.PyDAG.neighbors": [[139, "rustworkx-pydag-neighbors"]], "rustworkx.PyDAG.neighbors_undirected": [[140, "rustworkx-pydag-neighbors-undirected"]], "rustworkx.PyDAG.node_indexes": [[141, "rustworkx-pydag-node-indexes"]], "rustworkx.PyDAG.node_indices": [[142, "rustworkx-pydag-node-indices"]], "rustworkx.PyDAG.nodes": [[143, "rustworkx-pydag-nodes"]], "rustworkx.PyDAG.num_edges": [[144, "rustworkx-pydag-num-edges"]], "rustworkx.PyDAG.num_nodes": [[145, "rustworkx-pydag-num-nodes"]], "rustworkx.PyDAG.out_degree": [[146, "rustworkx-pydag-out-degree"]], "rustworkx.PyDAG.out_edges": [[147, "rustworkx-pydag-out-edges"]], "rustworkx.PyDAG.predecessor_indices": [[148, "rustworkx-pydag-predecessor-indices"]], "rustworkx.PyDAG.predecessors": [[149, "rustworkx-pydag-predecessors"]], "rustworkx.PyDAG.read_edge_list": [[150, "rustworkx-pydag-read-edge-list"]], "rustworkx.PyDAG.remove_edge": [[151, "rustworkx-pydag-remove-edge"]], "rustworkx.PyDAG.remove_edge_from_index": [[152, "rustworkx-pydag-remove-edge-from-index"]], "rustworkx.PyDAG.remove_edges_from": [[153, "rustworkx-pydag-remove-edges-from"]], "rustworkx.PyDAG.remove_node": [[154, "rustworkx-pydag-remove-node"]], "rustworkx.PyDAG.remove_node_retain_edges": [[155, "rustworkx-pydag-remove-node-retain-edges"]], "rustworkx.PyDAG.remove_node_retain_edges_by_id": [[156, "rustworkx-pydag-remove-node-retain-edges-by-id"]], "rustworkx.PyDAG.remove_node_retain_edges_by_key": [[157, "rustworkx-pydag-remove-node-retain-edges-by-key"]], "rustworkx.PyDAG.remove_nodes_from": [[158, "rustworkx-pydag-remove-nodes-from"]], "rustworkx.PyDAG.reverse": [[159, "rustworkx-pydag-reverse"]], "rustworkx.PyDAG.subgraph": [[160, "rustworkx-pydag-subgraph"]], "rustworkx.PyDAG.substitute_node_with_subgraph": [[161, "rustworkx-pydag-substitute-node-with-subgraph"]], "rustworkx.PyDAG.successor_indices": [[162, "rustworkx-pydag-successor-indices"]], "rustworkx.PyDAG.successors": [[163, "rustworkx-pydag-successors"]], "rustworkx.PyDAG.to_dot": [[164, "rustworkx-pydag-to-dot"]], "rustworkx.PyDAG.to_undirected": [[165, "rustworkx-pydag-to-undirected"]], "rustworkx.PyDAG.update_edge": [[166, "rustworkx-pydag-update-edge"]], "rustworkx.PyDAG.update_edge_by_index": [[167, "rustworkx-pydag-update-edge-by-index"]], "rustworkx.PyDAG.weighted_edge_list": [[168, "rustworkx-pydag-weighted-edge-list"]], "rustworkx.PyDAG.write_edge_list": [[169, "rustworkx-pydag-write-edge-list"]], "PyDiGraph": [[170, "pydigraph"]], "rustworkx.PyDiGraph.add_child": [[171, "rustworkx-pydigraph-add-child"]], "rustworkx.PyDiGraph.add_edge": [[172, "rustworkx-pydigraph-add-edge"]], "rustworkx.PyDiGraph.add_edges_from": [[173, "rustworkx-pydigraph-add-edges-from"]], "rustworkx.PyDiGraph.add_edges_from_no_data": [[174, "rustworkx-pydigraph-add-edges-from-no-data"]], "rustworkx.PyDiGraph.add_node": [[175, "rustworkx-pydigraph-add-node"]], "rustworkx.PyDiGraph.add_nodes_from": [[176, "rustworkx-pydigraph-add-nodes-from"]], "rustworkx.PyDiGraph.add_parent": [[177, "rustworkx-pydigraph-add-parent"]], "rustworkx.PyDiGraph.adj": [[178, "rustworkx-pydigraph-adj"]], "rustworkx.PyDiGraph.adj_direction": [[179, "rustworkx-pydigraph-adj-direction"]], "rustworkx.PyDiGraph.clear": [[180, "rustworkx-pydigraph-clear"]], "rustworkx.PyDiGraph.clear_edges": [[181, "rustworkx-pydigraph-clear-edges"]], "rustworkx.PyDiGraph.compose": [[182, "rustworkx-pydigraph-compose"]], "rustworkx.PyDiGraph.contract_nodes": [[183, "rustworkx-pydigraph-contract-nodes"]], "rustworkx.PyDiGraph.copy": [[184, "rustworkx-pydigraph-copy"]], "rustworkx.PyDiGraph.edge_index_map": [[185, "rustworkx-pydigraph-edge-index-map"]], "rustworkx.PyDiGraph.edge_indices": [[186, "rustworkx-pydigraph-edge-indices"]], "rustworkx.PyDiGraph.edge_indices_from_endpoints": [[187, "rustworkx-pydigraph-edge-indices-from-endpoints"]], "rustworkx.PyDiGraph.edge_list": [[188, "rustworkx-pydigraph-edge-list"]], "rustworkx.PyDiGraph.edge_subgraph": [[189, "rustworkx-pydigraph-edge-subgraph"]], "rustworkx.PyDiGraph.edges": [[190, "rustworkx-pydigraph-edges"]], "rustworkx.PyDiGraph.extend_from_edge_list": [[191, "rustworkx-pydigraph-extend-from-edge-list"]], "rustworkx.PyDiGraph.extend_from_weighted_edge_list": [[192, "rustworkx-pydigraph-extend-from-weighted-edge-list"]], "rustworkx.PyDiGraph.filter_edges": [[193, "rustworkx-pydigraph-filter-edges"]], "rustworkx.PyDiGraph.filter_nodes": [[194, "rustworkx-pydigraph-filter-nodes"]], "rustworkx.PyDiGraph.find_adjacent_node_by_edge": [[195, "rustworkx-pydigraph-find-adjacent-node-by-edge"]], "rustworkx.PyDiGraph.find_node_by_weight": [[196, "rustworkx-pydigraph-find-node-by-weight"]], "rustworkx.PyDiGraph.find_predecessor_node_by_edge": [[197, "rustworkx-pydigraph-find-predecessor-node-by-edge"]], "rustworkx.PyDiGraph.find_predecessors_by_edge": [[198, "rustworkx-pydigraph-find-predecessors-by-edge"]], "rustworkx.PyDiGraph.find_successors_by_edge": [[199, "rustworkx-pydigraph-find-successors-by-edge"]], "rustworkx.PyDiGraph.from_adjacency_matrix": [[200, "rustworkx-pydigraph-from-adjacency-matrix"]], "rustworkx.PyDiGraph.from_complex_adjacency_matrix": [[201, "rustworkx-pydigraph-from-complex-adjacency-matrix"]], "rustworkx.PyDiGraph.get_all_edge_data": [[202, "rustworkx-pydigraph-get-all-edge-data"]], "rustworkx.PyDiGraph.get_edge_data": [[203, "rustworkx-pydigraph-get-edge-data"]], "rustworkx.PyDiGraph.get_edge_data_by_index": [[204, "rustworkx-pydigraph-get-edge-data-by-index"]], "rustworkx.PyDiGraph.get_edge_endpoints_by_index": [[205, "rustworkx-pydigraph-get-edge-endpoints-by-index"]], "rustworkx.PyDiGraph.get_node_data": [[206, "rustworkx-pydigraph-get-node-data"]], "rustworkx.PyDiGraph.has_edge": [[207, "rustworkx-pydigraph-has-edge"]], "rustworkx.PyDiGraph.has_node": [[208, "rustworkx-pydigraph-has-node"]], "rustworkx.PyDiGraph.has_parallel_edges": [[209, "rustworkx-pydigraph-has-parallel-edges"]], "rustworkx.PyDiGraph.in_degree": [[210, "rustworkx-pydigraph-in-degree"]], "rustworkx.PyDiGraph.in_edges": [[211, "rustworkx-pydigraph-in-edges"]], "rustworkx.PyDiGraph.incident_edge_index_map": [[212, "rustworkx-pydigraph-incident-edge-index-map"]], "rustworkx.PyDiGraph.incident_edges": [[213, "rustworkx-pydigraph-incident-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges": [[214, "rustworkx-pydigraph-insert-node-on-in-edges"]], "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple": [[215, "rustworkx-pydigraph-insert-node-on-in-edges-multiple"]], "rustworkx.PyDiGraph.insert_node_on_out_edges": [[216, "rustworkx-pydigraph-insert-node-on-out-edges"]], "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple": [[217, "rustworkx-pydigraph-insert-node-on-out-edges-multiple"]], "rustworkx.PyDiGraph.is_symmetric": [[218, "rustworkx-pydigraph-is-symmetric"]], "rustworkx.PyDiGraph.make_symmetric": [[219, "rustworkx-pydigraph-make-symmetric"]], "rustworkx.PyDiGraph.merge_nodes": [[220, "rustworkx-pydigraph-merge-nodes"]], "rustworkx.PyDiGraph.neighbors": [[221, "rustworkx-pydigraph-neighbors"]], "rustworkx.PyDiGraph.neighbors_undirected": [[222, "rustworkx-pydigraph-neighbors-undirected"]], "rustworkx.PyDiGraph.node_indexes": [[223, "rustworkx-pydigraph-node-indexes"]], "rustworkx.PyDiGraph.node_indices": [[224, "rustworkx-pydigraph-node-indices"]], "rustworkx.PyDiGraph.nodes": [[225, "rustworkx-pydigraph-nodes"]], "rustworkx.PyDiGraph.num_edges": [[226, "rustworkx-pydigraph-num-edges"]], "rustworkx.PyDiGraph.num_nodes": [[227, "rustworkx-pydigraph-num-nodes"]], "rustworkx.PyDiGraph.out_degree": [[228, "rustworkx-pydigraph-out-degree"]], "rustworkx.PyDiGraph.out_edges": [[229, "rustworkx-pydigraph-out-edges"]], "rustworkx.PyDiGraph.predecessor_indices": [[230, "rustworkx-pydigraph-predecessor-indices"]], "rustworkx.PyDiGraph.predecessors": [[231, "rustworkx-pydigraph-predecessors"]], "rustworkx.PyDiGraph.read_edge_list": [[232, "rustworkx-pydigraph-read-edge-list"]], "rustworkx.PyDiGraph.remove_edge": [[233, "rustworkx-pydigraph-remove-edge"]], "rustworkx.PyDiGraph.remove_edge_from_index": [[234, "rustworkx-pydigraph-remove-edge-from-index"]], "rustworkx.PyDiGraph.remove_edges_from": [[235, "rustworkx-pydigraph-remove-edges-from"]], "rustworkx.PyDiGraph.remove_node": [[236, "rustworkx-pydigraph-remove-node"]], "rustworkx.PyDiGraph.remove_node_retain_edges": [[237, "rustworkx-pydigraph-remove-node-retain-edges"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_id": [[238, "rustworkx-pydigraph-remove-node-retain-edges-by-id"]], "rustworkx.PyDiGraph.remove_node_retain_edges_by_key": [[239, "rustworkx-pydigraph-remove-node-retain-edges-by-key"]], "rustworkx.PyDiGraph.remove_nodes_from": [[240, "rustworkx-pydigraph-remove-nodes-from"]], "rustworkx.PyDiGraph.reverse": [[241, "rustworkx-pydigraph-reverse"]], "rustworkx.PyDiGraph.subgraph": [[242, "rustworkx-pydigraph-subgraph"]], "rustworkx.PyDiGraph.substitute_node_with_subgraph": [[243, "rustworkx-pydigraph-substitute-node-with-subgraph"]], "rustworkx.PyDiGraph.successor_indices": [[244, "rustworkx-pydigraph-successor-indices"]], "rustworkx.PyDiGraph.successors": [[245, "rustworkx-pydigraph-successors"]], "rustworkx.PyDiGraph.to_dot": [[246, "rustworkx-pydigraph-to-dot"]], "rustworkx.PyDiGraph.to_undirected": [[247, "rustworkx-pydigraph-to-undirected"]], "rustworkx.PyDiGraph.update_edge": [[248, "rustworkx-pydigraph-update-edge"]], "rustworkx.PyDiGraph.update_edge_by_index": [[249, "rustworkx-pydigraph-update-edge-by-index"]], "rustworkx.PyDiGraph.weighted_edge_list": [[250, "rustworkx-pydigraph-weighted-edge-list"]], "rustworkx.PyDiGraph.write_edge_list": [[251, "rustworkx-pydigraph-write-edge-list"]], "PyGraph": [[252, "pygraph"]], "rustworkx.PyGraph.add_edge": [[253, "rustworkx-pygraph-add-edge"]], "rustworkx.PyGraph.add_edges_from": [[254, "rustworkx-pygraph-add-edges-from"]], "rustworkx.PyGraph.add_edges_from_no_data": [[255, "rustworkx-pygraph-add-edges-from-no-data"]], "rustworkx.PyGraph.add_node": [[256, "rustworkx-pygraph-add-node"]], "rustworkx.PyGraph.add_nodes_from": [[257, "rustworkx-pygraph-add-nodes-from"]], "rustworkx.PyGraph.adj": [[258, "rustworkx-pygraph-adj"]], "rustworkx.PyGraph.clear": [[259, "rustworkx-pygraph-clear"]], "rustworkx.PyGraph.clear_edges": [[260, "rustworkx-pygraph-clear-edges"]], "rustworkx.PyGraph.compose": [[261, "rustworkx-pygraph-compose"]], "rustworkx.PyGraph.contract_nodes": [[262, "rustworkx-pygraph-contract-nodes"]], "rustworkx.PyGraph.copy": [[263, "rustworkx-pygraph-copy"]], "rustworkx.PyGraph.degree": [[264, "rustworkx-pygraph-degree"]], "rustworkx.PyGraph.edge_index_map": [[265, "rustworkx-pygraph-edge-index-map"]], "rustworkx.PyGraph.edge_indices": [[266, "rustworkx-pygraph-edge-indices"]], "rustworkx.PyGraph.edge_indices_from_endpoints": [[267, "rustworkx-pygraph-edge-indices-from-endpoints"]], "rustworkx.PyGraph.edge_list": [[268, "rustworkx-pygraph-edge-list"]], "rustworkx.PyGraph.edge_subgraph": [[269, "rustworkx-pygraph-edge-subgraph"]], "rustworkx.PyGraph.edges": [[270, "rustworkx-pygraph-edges"]], "rustworkx.PyGraph.extend_from_edge_list": [[271, "rustworkx-pygraph-extend-from-edge-list"]], "rustworkx.PyGraph.extend_from_weighted_edge_list": [[272, "rustworkx-pygraph-extend-from-weighted-edge-list"]], "rustworkx.PyGraph.filter_edges": [[273, "rustworkx-pygraph-filter-edges"]], "rustworkx.PyGraph.filter_nodes": [[274, "rustworkx-pygraph-filter-nodes"]], "rustworkx.PyGraph.find_node_by_weight": [[275, "rustworkx-pygraph-find-node-by-weight"]], "rustworkx.PyGraph.from_adjacency_matrix": [[276, "rustworkx-pygraph-from-adjacency-matrix"]], "rustworkx.PyGraph.from_complex_adjacency_matrix": [[277, "rustworkx-pygraph-from-complex-adjacency-matrix"]], "rustworkx.PyGraph.get_all_edge_data": [[278, "rustworkx-pygraph-get-all-edge-data"]], "rustworkx.PyGraph.get_edge_data": [[279, "rustworkx-pygraph-get-edge-data"]], "rustworkx.PyGraph.get_edge_data_by_index": [[280, "rustworkx-pygraph-get-edge-data-by-index"]], "rustworkx.PyGraph.get_edge_endpoints_by_index": [[281, "rustworkx-pygraph-get-edge-endpoints-by-index"]], "rustworkx.PyGraph.get_node_data": [[282, "rustworkx-pygraph-get-node-data"]], "rustworkx.PyGraph.has_edge": [[283, "rustworkx-pygraph-has-edge"]], "rustworkx.PyGraph.has_node": [[284, "rustworkx-pygraph-has-node"]], "rustworkx.PyGraph.has_parallel_edges": [[285, "rustworkx-pygraph-has-parallel-edges"]], "rustworkx.PyGraph.in_edges": [[286, "rustworkx-pygraph-in-edges"]], "rustworkx.PyGraph.incident_edge_index_map": [[287, "rustworkx-pygraph-incident-edge-index-map"]], "rustworkx.PyGraph.incident_edges": [[288, "rustworkx-pygraph-incident-edges"]], "rustworkx.PyGraph.neighbors": [[289, "rustworkx-pygraph-neighbors"]], "rustworkx.PyGraph.node_indexes": [[290, "rustworkx-pygraph-node-indexes"]], "rustworkx.PyGraph.node_indices": [[291, "rustworkx-pygraph-node-indices"]], "rustworkx.PyGraph.nodes": [[292, "rustworkx-pygraph-nodes"]], "rustworkx.PyGraph.num_edges": [[293, "rustworkx-pygraph-num-edges"]], "rustworkx.PyGraph.num_nodes": [[294, "rustworkx-pygraph-num-nodes"]], "rustworkx.PyGraph.out_edges": [[295, "rustworkx-pygraph-out-edges"]], "rustworkx.PyGraph.read_edge_list": [[296, "rustworkx-pygraph-read-edge-list"]], "rustworkx.PyGraph.remove_edge": [[297, "rustworkx-pygraph-remove-edge"]], "rustworkx.PyGraph.remove_edge_from_index": [[298, "rustworkx-pygraph-remove-edge-from-index"]], "rustworkx.PyGraph.remove_edges_from": [[299, "rustworkx-pygraph-remove-edges-from"]], "rustworkx.PyGraph.remove_node": [[300, "rustworkx-pygraph-remove-node"]], "rustworkx.PyGraph.remove_nodes_from": [[301, "rustworkx-pygraph-remove-nodes-from"]], "rustworkx.PyGraph.subgraph": [[302, "rustworkx-pygraph-subgraph"]], "rustworkx.PyGraph.substitute_node_with_subgraph": [[303, "rustworkx-pygraph-substitute-node-with-subgraph"]], "rustworkx.PyGraph.to_directed": [[304, "rustworkx-pygraph-to-directed"]], "rustworkx.PyGraph.to_dot": [[305, "rustworkx-pygraph-to-dot"]], "rustworkx.PyGraph.update_edge": [[306, "rustworkx-pygraph-update-edge"]], "rustworkx.PyGraph.update_edge_by_index": [[307, "rustworkx-pygraph-update-edge-by-index"]], "rustworkx.PyGraph.weighted_edge_list": [[308, "rustworkx-pygraph-weighted-edge-list"]], "rustworkx.PyGraph.write_edge_list": [[309, "rustworkx-pygraph-write-edge-list"]], "RelationalCoarsestPartition": [[310, "relationalcoarsestpartition"]], "TopologicalSorter": [[311, "topologicalsorter"]], "rustworkx.TopologicalSorter.done": [[312, "rustworkx-topologicalsorter-done"]], "rustworkx.TopologicalSorter.get_ready": [[313, "rustworkx-topologicalsorter-get-ready"]], "rustworkx.TopologicalSorter.is_active": [[314, "rustworkx-topologicalsorter-is-active"]], "WeightedEdgeList": [[315, "weightededgelist"]], "rustworkx.adjacency_matrix": [[316, "rustworkx-adjacency-matrix"]], "rustworkx.all_pairs_all_simple_paths": [[317, "rustworkx-all-pairs-all-simple-paths"]], "rustworkx.all_pairs_bellman_ford_path_lengths": [[318, "rustworkx-all-pairs-bellman-ford-path-lengths"]], "rustworkx.all_pairs_bellman_ford_shortest_paths": [[319, "rustworkx-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.all_pairs_dijkstra_path_lengths": [[320, "rustworkx-all-pairs-dijkstra-path-lengths"]], "rustworkx.all_pairs_dijkstra_shortest_paths": [[321, "rustworkx-all-pairs-dijkstra-shortest-paths"]], "rustworkx.all_shortest_paths": [[322, "rustworkx-all-shortest-paths"]], "rustworkx.all_simple_paths": [[323, "rustworkx-all-simple-paths"]], "rustworkx.ancestors": [[324, "rustworkx-ancestors"]], "rustworkx.articulation_points": [[325, "rustworkx-articulation-points"]], "rustworkx.astar_shortest_path": [[326, "rustworkx-astar-shortest-path"]], "rustworkx.barabasi_albert_graph": [[327, "rustworkx-barabasi-albert-graph"]], "rustworkx.bellman_ford_shortest_path_lengths": [[328, "rustworkx-bellman-ford-shortest-path-lengths"]], "rustworkx.bellman_ford_shortest_paths": [[329, "rustworkx-bellman-ford-shortest-paths"]], "rustworkx.betweenness_centrality": [[330, "rustworkx-betweenness-centrality"]], "See Also": [[330, "see-also"], [365, "see-also"], [379, "see-also"], [411, "see-also"], [455, "see-also"], [470, "see-also"]], "rustworkx.bfs_predecessors": [[331, "rustworkx-bfs-predecessors"]], "rustworkx.bfs_search": [[332, "rustworkx-bfs-search"]], "rustworkx.bfs_successors": [[333, "rustworkx-bfs-successors"]], "rustworkx.biconnected_components": [[334, "rustworkx-biconnected-components"]], "rustworkx.bipartite_layout": [[335, "rustworkx-bipartite-layout"]], "rustworkx.bridges": [[336, "rustworkx-bridges"]], "rustworkx.cartesian_product": [[337, "rustworkx-cartesian-product"]], "rustworkx.chain_decomposition": [[338, "rustworkx-chain-decomposition"]], "rustworkx.circular_layout": [[339, "rustworkx-circular-layout"]], "rustworkx.closeness_centrality": [[340, "rustworkx-closeness-centrality"]], "rustworkx.collect_bicolor_runs": [[341, "rustworkx-collect-bicolor-runs"]], "rustworkx.collect_runs": [[342, "rustworkx-collect-runs"]], "rustworkx.complement": [[343, "rustworkx-complement"]], "rustworkx.connected_components": [[344, "rustworkx-connected-components"]], "rustworkx.connected_subgraphs": [[345, "rustworkx-connected-subgraphs"]], "rustworkx.core_number": [[346, "rustworkx-core-number"]], "rustworkx.cycle_basis": [[347, "rustworkx-cycle-basis"]], "rustworkx.dag_longest_path": [[348, "rustworkx-dag-longest-path"]], "rustworkx.dag_longest_path_length": [[349, "rustworkx-dag-longest-path-length"]], "rustworkx.dag_weighted_longest_path": [[350, "rustworkx-dag-weighted-longest-path"]], "rustworkx.dag_weighted_longest_path_length": [[351, "rustworkx-dag-weighted-longest-path-length"]], "rustworkx.descendants": [[352, "rustworkx-descendants"]], "rustworkx.dfs_edges": [[353, "rustworkx-dfs-edges"]], "rustworkx.dfs_search": [[354, "rustworkx-dfs-search"]], "rustworkx.digraph_adjacency_matrix": [[355, "rustworkx-digraph-adjacency-matrix"]], "rustworkx.digraph_all_pairs_all_simple_paths": [[356, "rustworkx-digraph-all-pairs-all-simple-paths"]], "rustworkx.digraph_all_pairs_bellman_ford_path_lengths": [[357, "rustworkx-digraph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths": [[358, "rustworkx-digraph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.digraph_all_pairs_dijkstra_path_lengths": [[359, "rustworkx-digraph-all-pairs-dijkstra-path-lengths"]], "rustworkx.digraph_all_pairs_dijkstra_shortest_paths": [[360, "rustworkx-digraph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.digraph_all_shortest_paths": [[361, "rustworkx-digraph-all-shortest-paths"]], "rustworkx.digraph_all_simple_paths": [[362, "rustworkx-digraph-all-simple-paths"]], "rustworkx.digraph_astar_shortest_path": [[363, "rustworkx-digraph-astar-shortest-path"]], "rustworkx.digraph_bellman_ford_shortest_path_lengths": [[364, "rustworkx-digraph-bellman-ford-shortest-path-lengths"]], "rustworkx.digraph_betweenness_centrality": [[365, "rustworkx-digraph-betweenness-centrality"]], "rustworkx.digraph_bfs_search": [[366, "rustworkx-digraph-bfs-search"]], "rustworkx.digraph_bipartite_layout": [[367, "rustworkx-digraph-bipartite-layout"]], "rustworkx.digraph_cartesian_product": [[368, "rustworkx-digraph-cartesian-product"]], "rustworkx.digraph_circular_layout": [[369, "rustworkx-digraph-circular-layout"]], "rustworkx.digraph_closeness_centrality": [[370, "rustworkx-digraph-closeness-centrality"]], "rustworkx.digraph_complement": [[371, "rustworkx-digraph-complement"]], "rustworkx.digraph_core_number": [[372, "rustworkx-digraph-core-number"]], "rustworkx.digraph_dfs_edges": [[373, "rustworkx-digraph-dfs-edges"]], "rustworkx.digraph_dfs_search": [[374, "rustworkx-digraph-dfs-search"]], "rustworkx.digraph_dijkstra_search": [[375, "rustworkx-digraph-dijkstra-search"]], "rustworkx.digraph_dijkstra_shortest_path_lengths": [[376, "rustworkx-digraph-dijkstra-shortest-path-lengths"]], "rustworkx.digraph_dijkstra_shortest_paths": [[377, "rustworkx-digraph-dijkstra-shortest-paths"]], "rustworkx.digraph_distance_matrix": [[378, "rustworkx-digraph-distance-matrix"]], "rustworkx.digraph_edge_betweenness_centrality": [[379, "rustworkx-digraph-edge-betweenness-centrality"]], "rustworkx.digraph_eigenvector_centrality": [[380, "rustworkx-digraph-eigenvector-centrality"]], "rustworkx.digraph_find_cycle": [[381, "rustworkx-digraph-find-cycle"]], "rustworkx.digraph_floyd_warshall": [[382, "rustworkx-digraph-floyd-warshall"]], "rustworkx.digraph_floyd_warshall_numpy": [[383, "rustworkx-digraph-floyd-warshall-numpy"]], "rustworkx.digraph_floyd_warshall_successor_and_distance": [[384, "rustworkx-digraph-floyd-warshall-successor-and-distance"]], "rustworkx.digraph_is_isomorphic": [[385, "rustworkx-digraph-is-isomorphic"]], "rustworkx.digraph_is_subgraph_isomorphic": [[386, "rustworkx-digraph-is-subgraph-isomorphic"]], "rustworkx.digraph_k_shortest_path_lengths": [[387, "rustworkx-digraph-k-shortest-path-lengths"]], "rustworkx.digraph_katz_centrality": [[388, "rustworkx-digraph-katz-centrality"]], "rustworkx.digraph_longest_simple_path": [[389, "rustworkx-digraph-longest-simple-path"]], "rustworkx.digraph_maximum_bisimulation": [[390, "rustworkx-digraph-maximum-bisimulation"]], "rustworkx.digraph_node_link_json": [[391, "rustworkx-digraph-node-link-json"]], "rustworkx.digraph_num_shortest_paths_unweighted": [[392, "rustworkx-digraph-num-shortest-paths-unweighted"]], "rustworkx.digraph_random_layout": [[393, "rustworkx-digraph-random-layout"]], "rustworkx.digraph_shell_layout": [[394, "rustworkx-digraph-shell-layout"]], "rustworkx.digraph_spiral_layout": [[395, "rustworkx-digraph-spiral-layout"]], "rustworkx.digraph_spring_layout": [[396, "rustworkx-digraph-spring-layout"]], "rustworkx.digraph_tensor_product": [[397, "rustworkx-digraph-tensor-product"]], "rustworkx.digraph_transitivity": [[398, "rustworkx-digraph-transitivity"]], "rustworkx.digraph_union": [[399, "rustworkx-digraph-union"]], "rustworkx.digraph_unweighted_average_shortest_path_length": [[400, "rustworkx-digraph-unweighted-average-shortest-path-length"]], "rustworkx.digraph_vf2_mapping": [[401, "rustworkx-digraph-vf2-mapping"]], "rustworkx.dijkstra_search": [[402, "rustworkx-dijkstra-search"]], "rustworkx.dijkstra_shortest_path_lengths": [[403, "rustworkx-dijkstra-shortest-path-lengths"]], "rustworkx.dijkstra_shortest_paths": [[404, "rustworkx-dijkstra-shortest-paths"]], "rustworkx.directed_barabasi_albert_graph": [[405, "rustworkx-directed-barabasi-albert-graph"]], "rustworkx.directed_gnm_random_graph": [[406, "rustworkx-directed-gnm-random-graph"]], "rustworkx.directed_gnp_random_graph": [[407, "rustworkx-directed-gnp-random-graph"]], "rustworkx.directed_random_bipartite_graph": [[408, "rustworkx-directed-random-bipartite-graph"]], "rustworkx.directed_sbm_random_graph": [[409, "rustworkx-directed-sbm-random-graph"]], "rustworkx.distance_matrix": [[410, "rustworkx-distance-matrix"]], "rustworkx.edge_betweenness_centrality": [[411, "rustworkx-edge-betweenness-centrality"]], "rustworkx.eigenvector_centrality": [[412, "rustworkx-eigenvector-centrality"]], "rustworkx.find_negative_cycle": [[413, "rustworkx-find-negative-cycle"]], "rustworkx.floyd_warshall": [[414, "rustworkx-floyd-warshall"]], "rustworkx.floyd_warshall_numpy": [[415, "rustworkx-floyd-warshall-numpy"]], "rustworkx.floyd_warshall_successor_and_distance": [[416, "rustworkx-floyd-warshall-successor-and-distance"]], "rustworkx.from_node_link_json_file": [[417, "rustworkx-from-node-link-json-file"]], "rustworkx.generators.barbell_graph": [[418, "rustworkx-generators-barbell-graph"]], "rustworkx.generators.binomial_tree_graph": [[419, "rustworkx-generators-binomial-tree-graph"]], "rustworkx.generators.complete_graph": [[420, "rustworkx-generators-complete-graph"]], "rustworkx.generators.cycle_graph": [[421, "rustworkx-generators-cycle-graph"]], "rustworkx.generators.directed_binomial_tree_graph": [[422, "rustworkx-generators-directed-binomial-tree-graph"]], "rustworkx.generators.directed_complete_graph": [[423, "rustworkx-generators-directed-complete-graph"]], "rustworkx.generators.directed_cycle_graph": [[424, "rustworkx-generators-directed-cycle-graph"]], "rustworkx.generators.directed_empty_graph": [[425, "rustworkx-generators-directed-empty-graph"]], "rustworkx.generators.directed_grid_graph": [[426, "rustworkx-generators-directed-grid-graph"]], "rustworkx.generators.directed_heavy_hex_graph": [[427, "rustworkx-generators-directed-heavy-hex-graph"]], "rustworkx.generators.directed_heavy_square_graph": [[428, "rustworkx-generators-directed-heavy-square-graph"]], "rustworkx.generators.directed_hexagonal_lattice_graph": [[429, "rustworkx-generators-directed-hexagonal-lattice-graph"]], "rustworkx.generators.directed_mesh_graph": [[430, "rustworkx-generators-directed-mesh-graph"]], "rustworkx.generators.directed_path_graph": [[431, "rustworkx-generators-directed-path-graph"]], "rustworkx.generators.directed_star_graph": [[432, "rustworkx-generators-directed-star-graph"]], "rustworkx.generators.dorogovtsev_goltsev_mendes_graph": [[433, "rustworkx-generators-dorogovtsev-goltsev-mendes-graph"]], "rustworkx.generators.empty_graph": [[434, "rustworkx-generators-empty-graph"]], "rustworkx.generators.full_rary_tree": [[435, "rustworkx-generators-full-rary-tree"]], "rustworkx.generators.generalized_petersen_graph": [[436, "rustworkx-generators-generalized-petersen-graph"]], "rustworkx.generators.grid_graph": [[437, "rustworkx-generators-grid-graph"]], "rustworkx.generators.heavy_hex_graph": [[438, "rustworkx-generators-heavy-hex-graph"]], "rustworkx.generators.heavy_square_graph": [[439, "rustworkx-generators-heavy-square-graph"]], "rustworkx.generators.hexagonal_lattice_graph": [[440, "rustworkx-generators-hexagonal-lattice-graph"]], "rustworkx.generators.lollipop_graph": [[441, "rustworkx-generators-lollipop-graph"]], "rustworkx.generators.mesh_graph": [[442, "rustworkx-generators-mesh-graph"]], "rustworkx.generators.path_graph": [[443, "rustworkx-generators-path-graph"]], "rustworkx.generators.star_graph": [[444, "rustworkx-generators-star-graph"]], "rustworkx.graph_adjacency_matrix": [[445, "rustworkx-graph-adjacency-matrix"]], "rustworkx.graph_all_pairs_all_simple_paths": [[446, "rustworkx-graph-all-pairs-all-simple-paths"]], "rustworkx.graph_all_pairs_bellman_ford_path_lengths": [[447, "rustworkx-graph-all-pairs-bellman-ford-path-lengths"]], "rustworkx.graph_all_pairs_bellman_ford_shortest_paths": [[448, "rustworkx-graph-all-pairs-bellman-ford-shortest-paths"]], "rustworkx.graph_all_pairs_dijkstra_path_lengths": [[449, "rustworkx-graph-all-pairs-dijkstra-path-lengths"]], "rustworkx.graph_all_pairs_dijkstra_shortest_paths": [[450, "rustworkx-graph-all-pairs-dijkstra-shortest-paths"]], "rustworkx.graph_all_shortest_paths": [[451, "rustworkx-graph-all-shortest-paths"]], "rustworkx.graph_all_simple_paths": [[452, "rustworkx-graph-all-simple-paths"]], "rustworkx.graph_astar_shortest_path": [[453, "rustworkx-graph-astar-shortest-path"]], "rustworkx.graph_bellman_ford_shortest_path_lengths": [[454, "rustworkx-graph-bellman-ford-shortest-path-lengths"]], "rustworkx.graph_betweenness_centrality": [[455, "rustworkx-graph-betweenness-centrality"]], "rustworkx.graph_bfs_search": [[456, "rustworkx-graph-bfs-search"]], "rustworkx.graph_bipartite_edge_color": [[457, "rustworkx-graph-bipartite-edge-color"]], "rustworkx.graph_bipartite_layout": [[458, "rustworkx-graph-bipartite-layout"]], "rustworkx.graph_cartesian_product": [[459, "rustworkx-graph-cartesian-product"]], "rustworkx.graph_circular_layout": [[460, "rustworkx-graph-circular-layout"]], "rustworkx.graph_closeness_centrality": [[461, "rustworkx-graph-closeness-centrality"]], "rustworkx.graph_complement": [[462, "rustworkx-graph-complement"]], "rustworkx.graph_core_number": [[463, "rustworkx-graph-core-number"]], "rustworkx.graph_dfs_edges": [[464, "rustworkx-graph-dfs-edges"]], "rustworkx.graph_dfs_search": [[465, "rustworkx-graph-dfs-search"]], "rustworkx.graph_dijkstra_search": [[466, "rustworkx-graph-dijkstra-search"]], "rustworkx.graph_dijkstra_shortest_path_lengths": [[467, "rustworkx-graph-dijkstra-shortest-path-lengths"]], "rustworkx.graph_dijkstra_shortest_paths": [[468, "rustworkx-graph-dijkstra-shortest-paths"]], "rustworkx.graph_distance_matrix": [[469, "rustworkx-graph-distance-matrix"]], "rustworkx.graph_edge_betweenness_centrality": [[470, "rustworkx-graph-edge-betweenness-centrality"]], "rustworkx.graph_eigenvector_centrality": [[471, "rustworkx-graph-eigenvector-centrality"]], "rustworkx.graph_floyd_warshall": [[472, "rustworkx-graph-floyd-warshall"]], "rustworkx.graph_floyd_warshall_numpy": [[473, "rustworkx-graph-floyd-warshall-numpy"]], "rustworkx.graph_floyd_warshall_successor_and_distance": [[474, "rustworkx-graph-floyd-warshall-successor-and-distance"]], "rustworkx.graph_greedy_color": [[475, "rustworkx-graph-greedy-color"]], "rustworkx.graph_greedy_edge_color": [[476, "rustworkx-graph-greedy-edge-color"]], "rustworkx.graph_is_isomorphic": [[477, "rustworkx-graph-is-isomorphic"]], "rustworkx.graph_is_subgraph_isomorphic": [[478, "rustworkx-graph-is-subgraph-isomorphic"]], "rustworkx.graph_k_shortest_path_lengths": [[479, "rustworkx-graph-k-shortest-path-lengths"]], "rustworkx.graph_katz_centrality": [[480, "rustworkx-graph-katz-centrality"]], "rustworkx.graph_line_graph": [[481, "rustworkx-graph-line-graph"]], "rustworkx.graph_longest_simple_path": [[482, "rustworkx-graph-longest-simple-path"]], "rustworkx.graph_misra_gries_edge_color": [[483, "rustworkx-graph-misra-gries-edge-color"]], "rustworkx.graph_node_link_json": [[484, "rustworkx-graph-node-link-json"]], "rustworkx.graph_num_shortest_paths_unweighted": [[485, "rustworkx-graph-num-shortest-paths-unweighted"]], "rustworkx.graph_random_layout": [[486, "rustworkx-graph-random-layout"]], "rustworkx.graph_shell_layout": [[487, "rustworkx-graph-shell-layout"]], "rustworkx.graph_spiral_layout": [[488, "rustworkx-graph-spiral-layout"]], "rustworkx.graph_spring_layout": [[489, "rustworkx-graph-spring-layout"]], "rustworkx.graph_tensor_product": [[490, "rustworkx-graph-tensor-product"]], "rustworkx.graph_token_swapper": [[491, "rustworkx-graph-token-swapper"]], "rustworkx.graph_transitivity": [[492, "rustworkx-graph-transitivity"]], "rustworkx.graph_union": [[493, "rustworkx-graph-union"]], "rustworkx.graph_unweighted_average_shortest_path_length": [[494, "rustworkx-graph-unweighted-average-shortest-path-length"]], "rustworkx.graph_vf2_mapping": [[495, "rustworkx-graph-vf2-mapping"]], "rustworkx.has_path": [[496, "rustworkx-has-path"]], "rustworkx.hits": [[497, "rustworkx-hits"]], "rustworkx.hyperbolic_random_graph": [[498, "rustworkx-hyperbolic-random-graph"]], "rustworkx.is_bipartite": [[499, "rustworkx-is-bipartite"]], "rustworkx.is_connected": [[500, "rustworkx-is-connected"]], "rustworkx.is_directed_acyclic_graph": [[501, "rustworkx-is-directed-acyclic-graph"]], "rustworkx.is_isomorphic": [[502, "rustworkx-is-isomorphic"]], "rustworkx.is_isomorphic_node_match": [[503, "rustworkx-is-isomorphic-node-match"]], "rustworkx.is_matching": [[504, "rustworkx-is-matching"]], "rustworkx.is_maximal_matching": [[505, "rustworkx-is-maximal-matching"]], "rustworkx.is_planar": [[506, "rustworkx-is-planar"]], "rustworkx.is_subgraph_isomorphic": [[507, "rustworkx-is-subgraph-isomorphic"]], "rustworkx.is_weakly_connected": [[508, "rustworkx-is-weakly-connected"]], "rustworkx.isolates": [[509, "rustworkx-isolates"]], "rustworkx.k_shortest_path_lengths": [[510, "rustworkx-k-shortest-path-lengths"]], "rustworkx.katz_centrality": [[511, "rustworkx-katz-centrality"]], "rustworkx.layers": [[512, "rustworkx-layers"]], "rustworkx.lexicographical_topological_sort": [[513, "rustworkx-lexicographical-topological-sort"]], "rustworkx.longest_simple_path": [[514, "rustworkx-longest-simple-path"]], "rustworkx.max_weight_matching": [[515, "rustworkx-max-weight-matching"]], "rustworkx.metric_closure": [[516, "rustworkx-metric-closure"]], "rustworkx.minimum_spanning_edges": [[517, "rustworkx-minimum-spanning-edges"]], "rustworkx.minimum_spanning_tree": [[518, "rustworkx-minimum-spanning-tree"]], "rustworkx.negative_edge_cycle": [[519, "rustworkx-negative-edge-cycle"]], "rustworkx.networkx_converter": [[520, "rustworkx-networkx-converter"]], "rustworkx.node_connected_component": [[521, "rustworkx-node-connected-component"]], "rustworkx.node_link_json": [[522, "rustworkx-node-link-json"]], "rustworkx.num_shortest_paths_unweighted": [[523, "rustworkx-num-shortest-paths-unweighted"]], "rustworkx.number_connected_components": [[524, "rustworkx-number-connected-components"]], "rustworkx.number_weakly_connected_components": [[525, "rustworkx-number-weakly-connected-components"]], "rustworkx.pagerank": [[526, "rustworkx-pagerank"]], "rustworkx.parse_node_link_json": [[527, "rustworkx-parse-node-link-json"]], "rustworkx.random_geometric_graph": [[528, "rustworkx-random-geometric-graph"]], "rustworkx.random_layout": [[529, "rustworkx-random-layout"]], "rustworkx.read_graphml": [[530, "rustworkx-read-graphml"]], "rustworkx.shell_layout": [[531, "rustworkx-shell-layout"]], "rustworkx.simple_cycles": [[532, "rustworkx-simple-cycles"]], "rustworkx.spiral_layout": [[533, "rustworkx-spiral-layout"]], "rustworkx.spring_layout": [[534, "rustworkx-spring-layout"]], "rustworkx.steiner_tree": [[535, "rustworkx-steiner-tree"]], "rustworkx.stoer_wagner_min_cut": [[536, "rustworkx-stoer-wagner-min-cut"]], "rustworkx.strongly_connected_components": [[537, "rustworkx-strongly-connected-components"]], "rustworkx.topological_generations": [[538, "rustworkx-topological-generations"]], "rustworkx.topological_sort": [[539, "rustworkx-topological-sort"]], "rustworkx.transitive_reduction": [[540, "rustworkx-transitive-reduction"]], "rustworkx.transitivity": [[541, "rustworkx-transitivity"]], "rustworkx.two_color": [[542, "rustworkx-two-color"]], "rustworkx.undirected_gnm_random_graph": [[543, "rustworkx-undirected-gnm-random-graph"]], "rustworkx.undirected_gnp_random_graph": [[544, "rustworkx-undirected-gnp-random-graph"]], "rustworkx.undirected_random_bipartite_graph": [[545, "rustworkx-undirected-random-bipartite-graph"]], "rustworkx.undirected_sbm_random_graph": [[546, "rustworkx-undirected-sbm-random-graph"]], "rustworkx.union": [[547, "rustworkx-union"]], "rustworkx.unweighted_average_shortest_path_length": [[548, "rustworkx-unweighted-average-shortest-path-length"]], "rustworkx.vf2_mapping": [[549, "rustworkx-vf2-mapping"]], "BFSVisitor": [[550, "bfsvisitor"]], "rustworkx.visit.BFSVisitor.black_target_edge": [[551, "rustworkx-visit-bfsvisitor-black-target-edge"]], "rustworkx.visit.BFSVisitor.discover_vertex": [[552, "rustworkx-visit-bfsvisitor-discover-vertex"]], "rustworkx.visit.BFSVisitor.finish_vertex": [[553, "rustworkx-visit-bfsvisitor-finish-vertex"]], "rustworkx.visit.BFSVisitor.gray_target_edge": [[554, "rustworkx-visit-bfsvisitor-gray-target-edge"]], "rustworkx.visit.BFSVisitor.non_tree_edge": [[555, "rustworkx-visit-bfsvisitor-non-tree-edge"]], "rustworkx.visit.BFSVisitor.tree_edge": [[556, "rustworkx-visit-bfsvisitor-tree-edge"]], "DFSVisitor": [[557, "dfsvisitor"]], "rustworkx.visit.DFSVisitor.back_edge": [[558, "rustworkx-visit-dfsvisitor-back-edge"]], "rustworkx.visit.DFSVisitor.discover_vertex": [[559, "rustworkx-visit-dfsvisitor-discover-vertex"]], "rustworkx.visit.DFSVisitor.finish_vertex": [[560, "rustworkx-visit-dfsvisitor-finish-vertex"]], "rustworkx.visit.DFSVisitor.forward_or_cross_edge": [[561, "rustworkx-visit-dfsvisitor-forward-or-cross-edge"]], "rustworkx.visit.DFSVisitor.tree_edge": [[562, "rustworkx-visit-dfsvisitor-tree-edge"]], "DijkstraVisitor": [[563, "dijkstravisitor"]], "rustworkx.visit.DijkstraVisitor.discover_vertex": [[564, "rustworkx-visit-dijkstravisitor-discover-vertex"]], "rustworkx.visit.DijkstraVisitor.edge_not_relaxed": [[565, "rustworkx-visit-dijkstravisitor-edge-not-relaxed"]], "rustworkx.visit.DijkstraVisitor.edge_relaxed": [[566, "rustworkx-visit-dijkstravisitor-edge-relaxed"]], "rustworkx.visit.DijkstraVisitor.examine_edge": [[567, "rustworkx-visit-dijkstravisitor-examine-edge"]], "rustworkx.visit.DijkstraVisitor.finish_vertex": [[568, "rustworkx-visit-dijkstravisitor-finish-vertex"]], "rustworkx.visit.PruneSearch": [[569, "rustworkx-visit-prunesearch"]], "rustworkx.visit.StopSearch": [[570, "rustworkx-visit-stopsearch"]], "rustworkx.visualization.graphviz_draw": [[571, "rustworkx-visualization-graphviz-draw"]], "rustworkx.visualization.mpl_draw": [[572, "rustworkx-visualization-mpl-draw"]], "rustworkx.weakly_connected_components": [[573, "rustworkx-weakly-connected-components"]], "Rustworkx Comparison Benchmarks With Other Libraries": [[574, "rustworkx-comparison-benchmarks-with-other-libraries"]], "Graph Creation": [[574, "graph-creation"]], "Single Source Shortest Path": [[574, "single-source-shortest-path"]], "All-Pairs Shortest Path": [[574, "all-pairs-shortest-path"]], "Subgraph Isomorphism": [[574, "subgraph-isomorphism"]], "Citation": [[574, "citation"]], "rustworkx Documentation": [[575, "rustworkx-documentation"]], "Project history": [[575, "project-history"]], "Getting Started": [[576, "getting-started"]], "Installing Rustworkx": [[576, "installing-rustworkx"]], "Installing on a platform without precompiled binaries": [[576, "installing-on-a-platform-without-precompiled-binaries"]], "Platform Support": [[576, "platform-support"], [576, "id6"]], "Tier 1": [[576, "tier-1"]], "Tier 2": [[576, "tier-2"]], "Tier 3": [[576, "tier-3"]], "Tier 4": [[576, "tier-4"]], "Using rustworkx": [[576, "using-rustworkx"]], "rustworkx for NetworkX users": [[577, "rustworkx-for-networkx-users"]], "Some Key Differences": [[577, "some-key-differences"]], "Graph Data and Attributes": [[577, "graph-data-and-attributes"]], "Nodes": [[577, "nodes"], [582, "nodes"]], "Edges": [[577, "edges"], [582, "edges"]], "Attributes": [[577, "attributes"]], "Examining elements of a graph": [[577, "examining-elements-of-a-graph"], [582, "examining-elements-of-a-graph"]], "API Equivalents": [[577, "api-equivalents"]], "Class Constructors": [[577, "class-constructors"]], "Graph Modifiers": [[577, "graph-modifiers"]], "Matrix Converter Functions": [[577, "matrix-converter-functions"]], "Visualization Functions": [[577, "visualization-functions"]], "Matplotlib Drawers": [[577, "matplotlib-drawers"]], "Converting from a networkx graph": [[577, "converting-from-a-networkx-graph"]], "Functionality Gaps": [[577, "functionality-gaps"]], "0.15.1-26": [[578, "relnotes-0-15-1-26"]], "New Features": [[578, "new-features"], [578, "relnotes-0-15-0-new-features"], [578, "relnotes-0-14-0-new-features"], [578, "relnotes-0-13-0-new-features"], [578, "relnotes-0-12-0-new-features"], [578, "relnotes-0-11-0-new-features"], [578, "relnotes-0-10-2-new-features"], [578, "relnotes-0-10-0-new-features"], [578, "relnotes-0-9-0-new-features"], [578, "relnotes-0-8-0-new-features"], [578, "id53"], [578, "id56"], [578, "id60"], [578, "id63"]], "0.15.1": [[578, "relnotes-0-15-1"]], "Prelude": [[578, "prelude"], [578, "relnotes-0-15-0-prelude"], [578, "relnotes-0-14-0-prelude"], [578, "relnotes-0-13-0-prelude"], [578, "relnotes-0-12-0-prelude"], [578, "relnotes-0-11-0-prelude"], [578, "relnotes-0-10-2-prelude"], [578, "relnotes-0-10-1-prelude"], [578, "relnotes-0-10-0-prelude"], [578, "relnotes-0-9-0-prelude"], [578, "relnotes-0-8-0-prelude"]], "Bug Fixes": [[578, "bug-fixes"], [578, "relnotes-0-15-0-bug-fixes"], [578, "relnotes-0-14-0-bug-fixes"], [578, "relnotes-0-13-0-bug-fixes"], [578, "relnotes-0-12-0-bug-fixes"], [578, "relnotes-0-11-0-bug-fixes"], [578, "relnotes-0-10-2-bug-fixes"], [578, "relnotes-0-10-0-bug-fixes"], [578, "relnotes-0-9-0-bug-fixes"], [578, "relnotes-0-8-0-bug-fixes"]], "0.15.0": [[578, "relnotes-0-15-0"]], "Upgrade Notes": [[578, "upgrade-notes"], [578, "relnotes-0-14-0-upgrade-notes"], [578, "relnotes-0-13-0-upgrade-notes"], [578, "relnotes-0-12-0-upgrade-notes"], [578, "relnotes-0-11-0-upgrade-notes"], [578, "relnotes-0-10-0-upgrade-notes"], [578, "relnotes-0-9-0-upgrade-notes"], [578, "relnotes-0-8-0-upgrade-notes"], [578, "id54"], [578, "id57"], [578, "id64"]], "Other Notes": [[578, "other-notes"], [578, "relnotes-0-14-0-other-notes"]], "0.14.0": [[578, "relnotes-0-14-0"]], "Deprecation Notes": [[578, "deprecation-notes"]], "0.13.0": [[578, "relnotes-0-13-0"]], "0.12.0": [[578, "relnotes-0-12-0"]], "0.11.0": [[578, "relnotes-0-11-0"]], "0.10.2": [[578, "relnotes-0-10-2"]], "0.10.1": [[578, "relnotes-0-10-1"]], "0.10.0": [[578, "relnotes-0-10-0"]], "0.9.0": [[578, "relnotes-0-9-0"]], "0.8.0": [[578, "relnotes-0-8-0"]], "0.7.1": [[578, "id51"]], "0.7.0": [[578, "id52"]], "Fixes": [[578, "fixes"], [578, "id58"], [578, "id61"], [578, "id65"]], "0.6.0": [[578, "id55"]], "0.5.0": [[578, "id59"]], "0.4.0": [[578, "id62"]], "Working with Betweenness Centrality": [[579, "working-with-betweenness-centrality"]], "Generate a Graph": [[579, "generate-a-graph"]], "Calculate the Betweeness Centrality": [[579, "calculate-the-betweeness-centrality"]], "Visualize the Betweenness Centrality": [[579, "visualize-the-betweenness-centrality"]], "Directed Acyclic Graphs": [[580, "directed-acyclic-graphs"], [580, "id1"]], "Directed Graph": [[580, "directed-graph"]], "Applications of DAGs": [[580, "applications-of-dags"]], "Task Scheduling": [[580, "task-scheduling"]], "Qiskit\u2019s Compiler": [[580, "qiskit-s-compiler"]], "rustworkx Tutorials and Guides": [[581, "rustworkx-tutorials-and-guides"]], "Introduction to rustworkx": [[582, "introduction-to-rustworkx"]], "Installing rustworkx": [[582, "installing-rustworkx"]], "How to import rustworkx": [[582, "how-to-import-rustworkx"]], "Creating a Graph": [[582, "creating-a-graph"]], "Removing elements from a graph": [[582, "removing-elements-from-a-graph"]], "Modifying elements of a graph": [[582, "modifying-elements-of-a-graph"]], "What to use for node and edge data payload": [[582, "what-to-use-for-node-and-edge-data-payload"]], "Accessing edges and neighbors": [[582, "accessing-edges-and-neighbors"]], "Graph Attributes": [[582, "graph-attributes"]], "Directed Graphs": [[582, "directed-graphs"]], "Multigraphs": [[582, "multigraphs"]], "Graph Generators and operations": [[582, "graph-generators-and-operations"]], "Analyzing graphs": [[582, "analyzing-graphs"]], "Drawing graphs": [[582, "drawing-graphs"]], "Visualization": [[583, "visualization"]], "Visualization API": [[583, "visualization-api"]]}, "indexentries": {"allpairspathlengthmapping (class in rustworkx)": [[25, "rustworkx.AllPairsPathLengthMapping"]], "items() (allpairspathlengthmapping method)": [[26, "rustworkx.AllPairsPathLengthMapping.items"]], "keys() (allpairspathlengthmapping method)": [[27, "rustworkx.AllPairsPathLengthMapping.keys"]], "values() (allpairspathlengthmapping method)": [[28, "rustworkx.AllPairsPathLengthMapping.values"]], "allpairspathmapping (class in rustworkx)": [[29, "rustworkx.AllPairsPathMapping"]], "items() (allpairspathmapping method)": [[30, "rustworkx.AllPairsPathMapping.items"]], "keys() (allpairspathmapping method)": [[31, "rustworkx.AllPairsPathMapping.keys"]], "values() (allpairspathmapping method)": [[32, "rustworkx.AllPairsPathMapping.values"]], "bfspredecessors (class in rustworkx)": [[33, "rustworkx.BFSPredecessors"]], "bfssuccessors (class in rustworkx)": [[34, "rustworkx.BFSSuccessors"]], "biconnectedcomponents (class in rustworkx)": [[35, "rustworkx.BiconnectedComponents"]], "items() (biconnectedcomponents method)": [[36, "rustworkx.BiconnectedComponents.items"]], "keys() (biconnectedcomponents method)": [[37, "rustworkx.BiconnectedComponents.keys"]], "values() (biconnectedcomponents method)": [[38, "rustworkx.BiconnectedComponents.values"]], "centralitymapping (class in rustworkx)": [[39, "rustworkx.CentralityMapping"]], "items() (centralitymapping method)": [[40, "rustworkx.CentralityMapping.items"]], "keys() (centralitymapping method)": [[41, "rustworkx.CentralityMapping.keys"]], "values() (centralitymapping method)": [[42, "rustworkx.CentralityMapping.values"]], "chains (class in rustworkx)": [[43, "rustworkx.Chains"]], "coloringstrategy (class in rustworkx)": [[44, "rustworkx.ColoringStrategy"]], "degree (coloringstrategy attribute)": [[44, "rustworkx.ColoringStrategy.Degree"]], "independentset (coloringstrategy attribute)": [[44, "rustworkx.ColoringStrategy.IndependentSet"]], "saturation (coloringstrategy attribute)": [[44, "rustworkx.ColoringStrategy.Saturation"]], "daghascycle": [[45, "rustworkx.DAGHasCycle"]], "dagwouldcycle": [[46, "rustworkx.DAGWouldCycle"]], "edgecentralitymapping (class in rustworkx)": [[47, "rustworkx.EdgeCentralityMapping"]], "items() (edgecentralitymapping method)": [[48, "rustworkx.EdgeCentralityMapping.items"]], "keys() (edgecentralitymapping method)": [[49, "rustworkx.EdgeCentralityMapping.keys"]], "values() (edgecentralitymapping method)": [[50, "rustworkx.EdgeCentralityMapping.values"]], "edgeindexmap (class in rustworkx)": [[51, "rustworkx.EdgeIndexMap"]], "items() (edgeindexmap method)": [[52, "rustworkx.EdgeIndexMap.items"]], "keys() (edgeindexmap method)": [[53, "rustworkx.EdgeIndexMap.keys"]], "values() (edgeindexmap method)": [[54, "rustworkx.EdgeIndexMap.values"]], "edgeindices (class in rustworkx)": [[55, "rustworkx.EdgeIndices"]], "edgelist (class in rustworkx)": [[56, "rustworkx.EdgeList"]], "graphnotbipartite": [[57, "rustworkx.GraphNotBipartite"]], "indexpartitionblock (class in rustworkx)": [[58, "rustworkx.IndexPartitionBlock"]], "invalidmapping": [[59, "rustworkx.InvalidMapping"]], "invalidnode": [[60, "rustworkx.InvalidNode"]], "jsonserializationerror": [[61, "rustworkx.JSONSerializationError"]], "negativecycle": [[62, "rustworkx.NegativeCycle"]], "noedgebetweennodes": [[63, "rustworkx.NoEdgeBetweenNodes"]], "nopathfound": [[64, "rustworkx.NoPathFound"]], "nosuitableneighbors": [[65, "rustworkx.NoSuitableNeighbors"]], "nodeindices (class in rustworkx)": [[66, "rustworkx.NodeIndices"]], "nodemap (class in rustworkx)": [[67, "rustworkx.NodeMap"]], "items() (nodemap method)": [[68, "rustworkx.NodeMap.items"]], "keys() (nodemap method)": [[69, "rustworkx.NodeMap.keys"]], "values() (nodemap method)": [[70, "rustworkx.NodeMap.values"]], "nullgraph": [[71, "rustworkx.NullGraph"]], "pathlengthmapping (class in rustworkx)": [[72, "rustworkx.PathLengthMapping"]], "items() (pathlengthmapping method)": [[73, "rustworkx.PathLengthMapping.items"]], "keys() (pathlengthmapping method)": [[74, "rustworkx.PathLengthMapping.keys"]], "values() (pathlengthmapping method)": [[75, "rustworkx.PathLengthMapping.values"]], "pathmapping (class in rustworkx)": [[76, "rustworkx.PathMapping"]], "items() (pathmapping method)": [[77, "rustworkx.PathMapping.items"]], "keys() (pathmapping method)": [[78, "rustworkx.PathMapping.keys"]], "values() (pathmapping method)": [[79, "rustworkx.PathMapping.values"]], "pos2dmapping (class in rustworkx)": [[80, "rustworkx.Pos2DMapping"]], "items() (pos2dmapping method)": [[81, "rustworkx.Pos2DMapping.items"]], "keys() (pos2dmapping method)": [[82, "rustworkx.Pos2DMapping.keys"]], "values() (pos2dmapping method)": [[83, "rustworkx.Pos2DMapping.values"]], "productnodemap (class in rustworkx)": [[84, "rustworkx.ProductNodeMap"]], "items() (productnodemap method)": [[85, "rustworkx.ProductNodeMap.items"]], "keys() (productnodemap method)": [[86, "rustworkx.ProductNodeMap.keys"]], "values() (productnodemap method)": [[87, "rustworkx.ProductNodeMap.values"]], "pydag (class in rustworkx)": [[88, "rustworkx.PyDAG"]], "attrs (pydag attribute)": [[88, "rustworkx.PyDAG.attrs"]], "check_cycle (pydag attribute)": [[88, "rustworkx.PyDAG.check_cycle"]], "multigraph (pydag attribute)": [[88, "rustworkx.PyDAG.multigraph"]], "add_child() (pydag method)": [[89, "rustworkx.PyDAG.add_child"]], "add_edge() (pydag method)": [[90, "rustworkx.PyDAG.add_edge"]], "add_edges_from() (pydag method)": [[91, "rustworkx.PyDAG.add_edges_from"]], "add_edges_from_no_data() (pydag method)": [[92, "rustworkx.PyDAG.add_edges_from_no_data"]], "add_node() (pydag method)": [[93, "rustworkx.PyDAG.add_node"]], "add_nodes_from() (pydag method)": [[94, "rustworkx.PyDAG.add_nodes_from"]], "add_parent() (pydag method)": [[95, "rustworkx.PyDAG.add_parent"]], "adj() (pydag method)": [[96, "rustworkx.PyDAG.adj"]], "adj_direction() (pydag method)": [[97, "rustworkx.PyDAG.adj_direction"]], "clear() (pydag method)": [[98, "rustworkx.PyDAG.clear"]], "clear_edges() (pydag method)": [[99, "rustworkx.PyDAG.clear_edges"]], "compose() (pydag method)": [[100, "rustworkx.PyDAG.compose"]], "contract_nodes() (pydag method)": [[101, "rustworkx.PyDAG.contract_nodes"]], "copy() (pydag method)": [[102, "rustworkx.PyDAG.copy"]], "edge_index_map() (pydag method)": [[103, "rustworkx.PyDAG.edge_index_map"]], "edge_indices() (pydag method)": [[104, "rustworkx.PyDAG.edge_indices"]], "edge_indices_from_endpoints() (pydag method)": [[105, "rustworkx.PyDAG.edge_indices_from_endpoints"]], "edge_list() (pydag method)": [[106, "rustworkx.PyDAG.edge_list"]], "edge_subgraph() (pydag method)": [[107, "rustworkx.PyDAG.edge_subgraph"]], "edges() (pydag method)": [[108, "rustworkx.PyDAG.edges"]], "extend_from_edge_list() (pydag method)": [[109, "rustworkx.PyDAG.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydag method)": [[110, "rustworkx.PyDAG.extend_from_weighted_edge_list"]], "filter_edges() (pydag method)": [[111, "rustworkx.PyDAG.filter_edges"]], "filter_nodes() (pydag method)": [[112, "rustworkx.PyDAG.filter_nodes"]], "find_adjacent_node_by_edge() (pydag method)": [[113, "rustworkx.PyDAG.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydag method)": [[114, "rustworkx.PyDAG.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydag method)": [[115, "rustworkx.PyDAG.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydag method)": [[116, "rustworkx.PyDAG.find_predecessors_by_edge"]], "find_successors_by_edge() (pydag method)": [[117, "rustworkx.PyDAG.find_successors_by_edge"]], "from_adjacency_matrix() (pydag static method)": [[118, "rustworkx.PyDAG.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydag static method)": [[119, "rustworkx.PyDAG.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydag method)": [[120, "rustworkx.PyDAG.get_all_edge_data"]], "get_edge_data() (pydag method)": [[121, "rustworkx.PyDAG.get_edge_data"]], "get_edge_data_by_index() (pydag method)": [[122, "rustworkx.PyDAG.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydag method)": [[123, "rustworkx.PyDAG.get_edge_endpoints_by_index"]], "get_node_data() (pydag method)": [[124, "rustworkx.PyDAG.get_node_data"]], "has_edge() (pydag method)": [[125, "rustworkx.PyDAG.has_edge"]], "has_node() (pydag method)": [[126, "rustworkx.PyDAG.has_node"]], "has_parallel_edges() (pydag method)": [[127, "rustworkx.PyDAG.has_parallel_edges"]], "in_degree() (pydag method)": [[128, "rustworkx.PyDAG.in_degree"]], "in_edges() (pydag method)": [[129, "rustworkx.PyDAG.in_edges"]], "incident_edge_index_map() (pydag method)": [[130, "rustworkx.PyDAG.incident_edge_index_map"]], "incident_edges() (pydag method)": [[131, "rustworkx.PyDAG.incident_edges"]], "insert_node_on_in_edges() (pydag method)": [[132, "rustworkx.PyDAG.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydag method)": [[133, "rustworkx.PyDAG.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydag method)": [[134, "rustworkx.PyDAG.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydag method)": [[135, "rustworkx.PyDAG.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydag method)": [[136, "rustworkx.PyDAG.is_symmetric"]], "make_symmetric() (pydag method)": [[137, "rustworkx.PyDAG.make_symmetric"]], "merge_nodes() (pydag method)": [[138, "rustworkx.PyDAG.merge_nodes"]], "neighbors() (pydag method)": [[139, "rustworkx.PyDAG.neighbors"]], "neighbors_undirected() (pydag method)": [[140, "rustworkx.PyDAG.neighbors_undirected"]], "node_indexes() (pydag method)": [[141, "rustworkx.PyDAG.node_indexes"]], "node_indices() (pydag method)": [[142, "rustworkx.PyDAG.node_indices"]], "nodes() (pydag method)": [[143, "rustworkx.PyDAG.nodes"]], "num_edges() (pydag method)": [[144, "rustworkx.PyDAG.num_edges"]], "num_nodes() (pydag method)": [[145, "rustworkx.PyDAG.num_nodes"]], "out_degree() (pydag method)": [[146, "rustworkx.PyDAG.out_degree"]], "out_edges() (pydag method)": [[147, "rustworkx.PyDAG.out_edges"]], "predecessor_indices() (pydag method)": [[148, "rustworkx.PyDAG.predecessor_indices"]], "predecessors() (pydag method)": [[149, "rustworkx.PyDAG.predecessors"]], "read_edge_list() (pydag static method)": [[150, "rustworkx.PyDAG.read_edge_list"]], "remove_edge() (pydag method)": [[151, "rustworkx.PyDAG.remove_edge"]], "remove_edge_from_index() (pydag method)": [[152, "rustworkx.PyDAG.remove_edge_from_index"]], "remove_edges_from() (pydag method)": [[153, "rustworkx.PyDAG.remove_edges_from"]], "remove_node() (pydag method)": [[154, "rustworkx.PyDAG.remove_node"]], "remove_node_retain_edges() (pydag method)": [[155, "rustworkx.PyDAG.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydag method)": [[156, "rustworkx.PyDAG.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydag method)": [[157, "rustworkx.PyDAG.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydag method)": [[158, "rustworkx.PyDAG.remove_nodes_from"]], "reverse() (pydag method)": [[159, "rustworkx.PyDAG.reverse"]], "subgraph() (pydag method)": [[160, "rustworkx.PyDAG.subgraph"]], "substitute_node_with_subgraph() (pydag method)": [[161, "rustworkx.PyDAG.substitute_node_with_subgraph"]], "successor_indices() (pydag method)": [[162, "rustworkx.PyDAG.successor_indices"]], "successors() (pydag method)": [[163, "rustworkx.PyDAG.successors"]], "to_dot() (pydag method)": [[164, "rustworkx.PyDAG.to_dot"]], "to_undirected() (pydag method)": [[165, "rustworkx.PyDAG.to_undirected"]], "update_edge() (pydag method)": [[166, "rustworkx.PyDAG.update_edge"]], "update_edge_by_index() (pydag method)": [[167, "rustworkx.PyDAG.update_edge_by_index"]], "weighted_edge_list() (pydag method)": [[168, "rustworkx.PyDAG.weighted_edge_list"]], "write_edge_list() (pydag method)": [[169, "rustworkx.PyDAG.write_edge_list"]], "pydigraph (class in rustworkx)": [[170, "rustworkx.PyDiGraph"]], "attrs (pydigraph attribute)": [[170, "rustworkx.PyDiGraph.attrs"]], "check_cycle (pydigraph attribute)": [[170, "rustworkx.PyDiGraph.check_cycle"]], "multigraph (pydigraph attribute)": [[170, "rustworkx.PyDiGraph.multigraph"]], "add_child() (pydigraph method)": [[171, "rustworkx.PyDiGraph.add_child"]], "add_edge() (pydigraph method)": [[172, "rustworkx.PyDiGraph.add_edge"]], "add_edges_from() (pydigraph method)": [[173, "rustworkx.PyDiGraph.add_edges_from"]], "add_edges_from_no_data() (pydigraph method)": [[174, "rustworkx.PyDiGraph.add_edges_from_no_data"]], "add_node() (pydigraph method)": [[175, "rustworkx.PyDiGraph.add_node"]], "add_nodes_from() (pydigraph method)": [[176, "rustworkx.PyDiGraph.add_nodes_from"]], "add_parent() (pydigraph method)": [[177, "rustworkx.PyDiGraph.add_parent"]], "adj() (pydigraph method)": [[178, "rustworkx.PyDiGraph.adj"]], "adj_direction() (pydigraph method)": [[179, "rustworkx.PyDiGraph.adj_direction"]], "clear() (pydigraph method)": [[180, "rustworkx.PyDiGraph.clear"]], "clear_edges() (pydigraph method)": [[181, "rustworkx.PyDiGraph.clear_edges"]], "compose() (pydigraph method)": [[182, "rustworkx.PyDiGraph.compose"]], "contract_nodes() (pydigraph method)": [[183, "rustworkx.PyDiGraph.contract_nodes"]], "copy() (pydigraph method)": [[184, "rustworkx.PyDiGraph.copy"]], "edge_index_map() (pydigraph method)": [[185, "rustworkx.PyDiGraph.edge_index_map"]], "edge_indices() (pydigraph method)": [[186, "rustworkx.PyDiGraph.edge_indices"]], "edge_indices_from_endpoints() (pydigraph method)": [[187, "rustworkx.PyDiGraph.edge_indices_from_endpoints"]], "edge_list() (pydigraph method)": [[188, "rustworkx.PyDiGraph.edge_list"]], "edge_subgraph() (pydigraph method)": [[189, "rustworkx.PyDiGraph.edge_subgraph"]], "edges() (pydigraph method)": [[190, "rustworkx.PyDiGraph.edges"]], "extend_from_edge_list() (pydigraph method)": [[191, "rustworkx.PyDiGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pydigraph method)": [[192, "rustworkx.PyDiGraph.extend_from_weighted_edge_list"]], "filter_edges() (pydigraph method)": [[193, "rustworkx.PyDiGraph.filter_edges"]], "filter_nodes() (pydigraph method)": [[194, "rustworkx.PyDiGraph.filter_nodes"]], "find_adjacent_node_by_edge() (pydigraph method)": [[195, "rustworkx.PyDiGraph.find_adjacent_node_by_edge"]], "find_node_by_weight() (pydigraph method)": [[196, "rustworkx.PyDiGraph.find_node_by_weight"]], "find_predecessor_node_by_edge() (pydigraph method)": [[197, "rustworkx.PyDiGraph.find_predecessor_node_by_edge"]], "find_predecessors_by_edge() (pydigraph method)": [[198, "rustworkx.PyDiGraph.find_predecessors_by_edge"]], "find_successors_by_edge() (pydigraph method)": [[199, "rustworkx.PyDiGraph.find_successors_by_edge"]], "from_adjacency_matrix() (pydigraph static method)": [[200, "rustworkx.PyDiGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pydigraph static method)": [[201, "rustworkx.PyDiGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pydigraph method)": [[202, "rustworkx.PyDiGraph.get_all_edge_data"]], "get_edge_data() (pydigraph method)": [[203, "rustworkx.PyDiGraph.get_edge_data"]], "get_edge_data_by_index() (pydigraph method)": [[204, "rustworkx.PyDiGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pydigraph method)": [[205, "rustworkx.PyDiGraph.get_edge_endpoints_by_index"]], "get_node_data() (pydigraph method)": [[206, "rustworkx.PyDiGraph.get_node_data"]], "has_edge() (pydigraph method)": [[207, "rustworkx.PyDiGraph.has_edge"]], "has_node() (pydigraph method)": [[208, "rustworkx.PyDiGraph.has_node"]], "has_parallel_edges() (pydigraph method)": [[209, "rustworkx.PyDiGraph.has_parallel_edges"]], "in_degree() (pydigraph method)": [[210, "rustworkx.PyDiGraph.in_degree"]], "in_edges() (pydigraph method)": [[211, "rustworkx.PyDiGraph.in_edges"]], "incident_edge_index_map() (pydigraph method)": [[212, "rustworkx.PyDiGraph.incident_edge_index_map"]], "incident_edges() (pydigraph method)": [[213, "rustworkx.PyDiGraph.incident_edges"]], "insert_node_on_in_edges() (pydigraph method)": [[214, "rustworkx.PyDiGraph.insert_node_on_in_edges"]], "insert_node_on_in_edges_multiple() (pydigraph method)": [[215, "rustworkx.PyDiGraph.insert_node_on_in_edges_multiple"]], "insert_node_on_out_edges() (pydigraph method)": [[216, "rustworkx.PyDiGraph.insert_node_on_out_edges"]], "insert_node_on_out_edges_multiple() (pydigraph method)": [[217, "rustworkx.PyDiGraph.insert_node_on_out_edges_multiple"]], "is_symmetric() (pydigraph method)": [[218, "rustworkx.PyDiGraph.is_symmetric"]], "make_symmetric() (pydigraph method)": [[219, "rustworkx.PyDiGraph.make_symmetric"]], "merge_nodes() (pydigraph method)": [[220, "rustworkx.PyDiGraph.merge_nodes"]], "neighbors() (pydigraph method)": [[221, "rustworkx.PyDiGraph.neighbors"]], "neighbors_undirected() (pydigraph method)": [[222, "rustworkx.PyDiGraph.neighbors_undirected"]], "node_indexes() (pydigraph method)": [[223, "rustworkx.PyDiGraph.node_indexes"]], "node_indices() (pydigraph method)": [[224, "rustworkx.PyDiGraph.node_indices"]], "nodes() (pydigraph method)": [[225, "rustworkx.PyDiGraph.nodes"]], "num_edges() (pydigraph method)": [[226, "rustworkx.PyDiGraph.num_edges"]], "num_nodes() (pydigraph method)": [[227, "rustworkx.PyDiGraph.num_nodes"]], "out_degree() (pydigraph method)": [[228, "rustworkx.PyDiGraph.out_degree"]], "out_edges() (pydigraph method)": [[229, "rustworkx.PyDiGraph.out_edges"]], "predecessor_indices() (pydigraph method)": [[230, "rustworkx.PyDiGraph.predecessor_indices"]], "predecessors() (pydigraph method)": [[231, "rustworkx.PyDiGraph.predecessors"]], "read_edge_list() (pydigraph static method)": [[232, "rustworkx.PyDiGraph.read_edge_list"]], "remove_edge() (pydigraph method)": [[233, "rustworkx.PyDiGraph.remove_edge"]], "remove_edge_from_index() (pydigraph method)": [[234, "rustworkx.PyDiGraph.remove_edge_from_index"]], "remove_edges_from() (pydigraph method)": [[235, "rustworkx.PyDiGraph.remove_edges_from"]], "remove_node() (pydigraph method)": [[236, "rustworkx.PyDiGraph.remove_node"]], "remove_node_retain_edges() (pydigraph method)": [[237, "rustworkx.PyDiGraph.remove_node_retain_edges"]], "remove_node_retain_edges_by_id() (pydigraph method)": [[238, "rustworkx.PyDiGraph.remove_node_retain_edges_by_id"]], "remove_node_retain_edges_by_key() (pydigraph method)": [[239, "rustworkx.PyDiGraph.remove_node_retain_edges_by_key"]], "remove_nodes_from() (pydigraph method)": [[240, "rustworkx.PyDiGraph.remove_nodes_from"]], "reverse() (pydigraph method)": [[241, "rustworkx.PyDiGraph.reverse"]], "subgraph() (pydigraph method)": [[242, "rustworkx.PyDiGraph.subgraph"]], "substitute_node_with_subgraph() (pydigraph method)": [[243, "rustworkx.PyDiGraph.substitute_node_with_subgraph"]], "successor_indices() (pydigraph method)": [[244, "rustworkx.PyDiGraph.successor_indices"]], "successors() (pydigraph method)": [[245, "rustworkx.PyDiGraph.successors"]], "to_dot() (pydigraph method)": [[246, "rustworkx.PyDiGraph.to_dot"]], "to_undirected() (pydigraph method)": [[247, "rustworkx.PyDiGraph.to_undirected"]], "update_edge() (pydigraph method)": [[248, "rustworkx.PyDiGraph.update_edge"]], "update_edge_by_index() (pydigraph method)": [[249, "rustworkx.PyDiGraph.update_edge_by_index"]], "weighted_edge_list() (pydigraph method)": [[250, "rustworkx.PyDiGraph.weighted_edge_list"]], "write_edge_list() (pydigraph method)": [[251, "rustworkx.PyDiGraph.write_edge_list"]], "pygraph (class in rustworkx)": [[252, "rustworkx.PyGraph"]], "attrs (pygraph attribute)": [[252, "rustworkx.PyGraph.attrs"]], "multigraph (pygraph attribute)": [[252, "rustworkx.PyGraph.multigraph"]], "add_edge() (pygraph method)": [[253, "rustworkx.PyGraph.add_edge"]], "add_edges_from() (pygraph method)": [[254, "rustworkx.PyGraph.add_edges_from"]], "add_edges_from_no_data() (pygraph method)": [[255, "rustworkx.PyGraph.add_edges_from_no_data"]], "add_node() (pygraph method)": [[256, "rustworkx.PyGraph.add_node"]], "add_nodes_from() (pygraph method)": [[257, "rustworkx.PyGraph.add_nodes_from"]], "adj() (pygraph method)": [[258, "rustworkx.PyGraph.adj"]], "clear() (pygraph method)": [[259, "rustworkx.PyGraph.clear"]], "clear_edges() (pygraph method)": [[260, "rustworkx.PyGraph.clear_edges"]], "compose() (pygraph method)": [[261, "rustworkx.PyGraph.compose"]], "contract_nodes() (pygraph method)": [[262, "rustworkx.PyGraph.contract_nodes"]], "copy() (pygraph method)": [[263, "rustworkx.PyGraph.copy"]], "degree() (pygraph method)": [[264, "rustworkx.PyGraph.degree"]], "edge_index_map() (pygraph method)": [[265, "rustworkx.PyGraph.edge_index_map"]], "edge_indices() (pygraph method)": [[266, "rustworkx.PyGraph.edge_indices"]], "edge_indices_from_endpoints() (pygraph method)": [[267, "rustworkx.PyGraph.edge_indices_from_endpoints"]], "edge_list() (pygraph method)": [[268, "rustworkx.PyGraph.edge_list"]], "edge_subgraph() (pygraph method)": [[269, "rustworkx.PyGraph.edge_subgraph"]], "edges() (pygraph method)": [[270, "rustworkx.PyGraph.edges"]], "extend_from_edge_list() (pygraph method)": [[271, "rustworkx.PyGraph.extend_from_edge_list"]], "extend_from_weighted_edge_list() (pygraph method)": [[272, "rustworkx.PyGraph.extend_from_weighted_edge_list"]], "filter_edges() (pygraph method)": [[273, "rustworkx.PyGraph.filter_edges"]], "filter_nodes() (pygraph method)": [[274, "rustworkx.PyGraph.filter_nodes"]], "find_node_by_weight() (pygraph method)": [[275, "rustworkx.PyGraph.find_node_by_weight"]], "from_adjacency_matrix() (pygraph static method)": [[276, "rustworkx.PyGraph.from_adjacency_matrix"]], "from_complex_adjacency_matrix() (pygraph static method)": [[277, "rustworkx.PyGraph.from_complex_adjacency_matrix"]], "get_all_edge_data() (pygraph method)": [[278, "rustworkx.PyGraph.get_all_edge_data"]], "get_edge_data() (pygraph method)": [[279, "rustworkx.PyGraph.get_edge_data"]], "get_edge_data_by_index() (pygraph method)": [[280, "rustworkx.PyGraph.get_edge_data_by_index"]], "get_edge_endpoints_by_index() (pygraph method)": [[281, "rustworkx.PyGraph.get_edge_endpoints_by_index"]], "get_node_data() (pygraph method)": [[282, "rustworkx.PyGraph.get_node_data"]], "has_edge() (pygraph method)": [[283, "rustworkx.PyGraph.has_edge"]], "has_node() (pygraph method)": [[284, "rustworkx.PyGraph.has_node"]], "has_parallel_edges() (pygraph method)": [[285, "rustworkx.PyGraph.has_parallel_edges"]], "in_edges() (pygraph method)": [[286, "rustworkx.PyGraph.in_edges"]], "incident_edge_index_map() (pygraph method)": [[287, "rustworkx.PyGraph.incident_edge_index_map"]], "incident_edges() (pygraph method)": [[288, "rustworkx.PyGraph.incident_edges"]], "neighbors() (pygraph method)": [[289, "rustworkx.PyGraph.neighbors"]], "node_indexes() (pygraph method)": [[290, "rustworkx.PyGraph.node_indexes"]], "node_indices() (pygraph method)": [[291, "rustworkx.PyGraph.node_indices"]], "nodes() (pygraph method)": [[292, "rustworkx.PyGraph.nodes"]], "num_edges() (pygraph method)": [[293, "rustworkx.PyGraph.num_edges"]], "num_nodes() (pygraph method)": [[294, "rustworkx.PyGraph.num_nodes"]], "out_edges() (pygraph method)": [[295, "rustworkx.PyGraph.out_edges"]], "read_edge_list() (pygraph static method)": [[296, "rustworkx.PyGraph.read_edge_list"]], "remove_edge() (pygraph method)": [[297, "rustworkx.PyGraph.remove_edge"]], "remove_edge_from_index() (pygraph method)": [[298, "rustworkx.PyGraph.remove_edge_from_index"]], "remove_edges_from() (pygraph method)": [[299, "rustworkx.PyGraph.remove_edges_from"]], "remove_node() (pygraph method)": [[300, "rustworkx.PyGraph.remove_node"]], "remove_nodes_from() (pygraph method)": [[301, "rustworkx.PyGraph.remove_nodes_from"]], "subgraph() (pygraph method)": [[302, "rustworkx.PyGraph.subgraph"]], "substitute_node_with_subgraph() (pygraph method)": [[303, "rustworkx.PyGraph.substitute_node_with_subgraph"]], "to_directed() (pygraph method)": [[304, "rustworkx.PyGraph.to_directed"]], "to_dot() (pygraph method)": [[305, "rustworkx.PyGraph.to_dot"]], "update_edge() (pygraph method)": [[306, "rustworkx.PyGraph.update_edge"]], "update_edge_by_index() (pygraph method)": [[307, "rustworkx.PyGraph.update_edge_by_index"]], "weighted_edge_list() (pygraph method)": [[308, "rustworkx.PyGraph.weighted_edge_list"]], "write_edge_list() (pygraph method)": [[309, "rustworkx.PyGraph.write_edge_list"]], "relationalcoarsestpartition (class in rustworkx)": [[310, "rustworkx.RelationalCoarsestPartition"]], "topologicalsorter (class in rustworkx)": [[311, "rustworkx.TopologicalSorter"]], "done() (topologicalsorter method)": [[312, "rustworkx.TopologicalSorter.done"]], "get_ready() (topologicalsorter method)": [[313, "rustworkx.TopologicalSorter.get_ready"]], "is_active() (topologicalsorter method)": [[314, "rustworkx.TopologicalSorter.is_active"]], "weightededgelist (class in rustworkx)": [[315, "rustworkx.WeightedEdgeList"]], "adjacency_matrix() (in module rustworkx)": [[316, "rustworkx.adjacency_matrix"]], "all_pairs_all_simple_paths() (in module rustworkx)": [[317, "rustworkx.all_pairs_all_simple_paths"]], "all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[318, "rustworkx.all_pairs_bellman_ford_path_lengths"]], "all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[319, "rustworkx.all_pairs_bellman_ford_shortest_paths"]], "all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[320, "rustworkx.all_pairs_dijkstra_path_lengths"]], "all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[321, "rustworkx.all_pairs_dijkstra_shortest_paths"]], "all_shortest_paths() (in module rustworkx)": [[322, "rustworkx.all_shortest_paths"]], "all_simple_paths() (in module rustworkx)": [[323, "rustworkx.all_simple_paths"]], "ancestors() (in module rustworkx)": [[324, "rustworkx.ancestors"]], "articulation_points() (in module rustworkx)": [[325, "rustworkx.articulation_points"]], "astar_shortest_path() (in module rustworkx)": [[326, "rustworkx.astar_shortest_path"]], "barabasi_albert_graph() (in module rustworkx)": [[327, "rustworkx.barabasi_albert_graph"]], "bellman_ford_shortest_path_lengths() (in module rustworkx)": [[328, "rustworkx.bellman_ford_shortest_path_lengths"]], "bellman_ford_shortest_paths() (in module rustworkx)": [[329, "rustworkx.bellman_ford_shortest_paths"]], "betweenness_centrality() (in module rustworkx)": [[330, "rustworkx.betweenness_centrality"]], "bfs_predecessors() (in module rustworkx)": [[331, "rustworkx.bfs_predecessors"]], "bfs_search() (in module rustworkx)": [[332, "rustworkx.bfs_search"]], "bfs_successors() (in module rustworkx)": [[333, "rustworkx.bfs_successors"]], "biconnected_components() (in module rustworkx)": [[334, "rustworkx.biconnected_components"]], "bipartite_layout() (in module rustworkx)": [[335, "rustworkx.bipartite_layout"]], "bridges() (in module rustworkx)": [[336, "rustworkx.bridges"]], "cartesian_product() (in module rustworkx)": [[337, "rustworkx.cartesian_product"]], "chain_decomposition() (in module rustworkx)": [[338, "rustworkx.chain_decomposition"]], "circular_layout() (in module rustworkx)": [[339, "rustworkx.circular_layout"]], "closeness_centrality() (in module rustworkx)": [[340, "rustworkx.closeness_centrality"]], "collect_bicolor_runs() (in module rustworkx)": [[341, "rustworkx.collect_bicolor_runs"]], "collect_runs() (in module rustworkx)": [[342, "rustworkx.collect_runs"]], "complement() (in module rustworkx)": [[343, "rustworkx.complement"]], "connected_components() (in module rustworkx)": [[344, "rustworkx.connected_components"]], "connected_subgraphs() (in module rustworkx)": [[345, "rustworkx.connected_subgraphs"]], "core_number() (in module rustworkx)": [[346, "rustworkx.core_number"]], "cycle_basis() (in module rustworkx)": [[347, "rustworkx.cycle_basis"]], "dag_longest_path() (in module rustworkx)": [[348, "rustworkx.dag_longest_path"]], "dag_longest_path_length() (in module rustworkx)": [[349, "rustworkx.dag_longest_path_length"]], "dag_weighted_longest_path() (in module rustworkx)": [[350, "rustworkx.dag_weighted_longest_path"]], "dag_weighted_longest_path_length() (in module rustworkx)": [[351, "rustworkx.dag_weighted_longest_path_length"]], "descendants() (in module rustworkx)": [[352, "rustworkx.descendants"]], "dfs_edges() (in module rustworkx)": [[353, "rustworkx.dfs_edges"]], "dfs_search() (in module rustworkx)": [[354, "rustworkx.dfs_search"]], "digraph_adjacency_matrix() (in module rustworkx)": [[355, "rustworkx.digraph_adjacency_matrix"]], "digraph_all_pairs_all_simple_paths() (in module rustworkx)": [[356, "rustworkx.digraph_all_pairs_all_simple_paths"]], "digraph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[357, "rustworkx.digraph_all_pairs_bellman_ford_path_lengths"]], "digraph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[358, "rustworkx.digraph_all_pairs_bellman_ford_shortest_paths"]], "digraph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[359, "rustworkx.digraph_all_pairs_dijkstra_path_lengths"]], "digraph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[360, "rustworkx.digraph_all_pairs_dijkstra_shortest_paths"]], "digraph_all_shortest_paths() (in module rustworkx)": [[361, "rustworkx.digraph_all_shortest_paths"]], "digraph_all_simple_paths() (in module rustworkx)": [[362, "rustworkx.digraph_all_simple_paths"]], "digraph_astar_shortest_path() (in module rustworkx)": [[363, "rustworkx.digraph_astar_shortest_path"]], "digraph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[364, "rustworkx.digraph_bellman_ford_shortest_path_lengths"]], "digraph_betweenness_centrality() (in module rustworkx)": [[365, "rustworkx.digraph_betweenness_centrality"]], "digraph_bfs_search() (in module rustworkx)": [[366, "rustworkx.digraph_bfs_search"]], "digraph_bipartite_layout() (in module rustworkx)": [[367, "rustworkx.digraph_bipartite_layout"]], "digraph_cartesian_product() (in module rustworkx)": [[368, "rustworkx.digraph_cartesian_product"]], "digraph_circular_layout() (in module rustworkx)": [[369, "rustworkx.digraph_circular_layout"]], "digraph_closeness_centrality() (in module rustworkx)": [[370, "rustworkx.digraph_closeness_centrality"]], "digraph_complement() (in module rustworkx)": [[371, "rustworkx.digraph_complement"]], "digraph_core_number() (in module rustworkx)": [[372, "rustworkx.digraph_core_number"]], "digraph_dfs_edges() (in module rustworkx)": [[373, "rustworkx.digraph_dfs_edges"]], "digraph_dfs_search() (in module rustworkx)": [[374, "rustworkx.digraph_dfs_search"]], "digraph_dijkstra_search() (in module rustworkx)": [[375, "rustworkx.digraph_dijkstra_search"]], "digraph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[376, "rustworkx.digraph_dijkstra_shortest_path_lengths"]], "digraph_dijkstra_shortest_paths() (in module rustworkx)": [[377, "rustworkx.digraph_dijkstra_shortest_paths"]], "digraph_distance_matrix() (in module rustworkx)": [[378, "rustworkx.digraph_distance_matrix"]], "digraph_edge_betweenness_centrality() (in module rustworkx)": [[379, "rustworkx.digraph_edge_betweenness_centrality"]], "digraph_eigenvector_centrality() (in module rustworkx)": [[380, "rustworkx.digraph_eigenvector_centrality"]], "digraph_find_cycle() (in module rustworkx)": [[381, "rustworkx.digraph_find_cycle"]], "digraph_floyd_warshall() (in module rustworkx)": [[382, "rustworkx.digraph_floyd_warshall"]], "digraph_floyd_warshall_numpy() (in module rustworkx)": [[383, "rustworkx.digraph_floyd_warshall_numpy"]], "digraph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[384, "rustworkx.digraph_floyd_warshall_successor_and_distance"]], "digraph_is_isomorphic() (in module rustworkx)": [[385, "rustworkx.digraph_is_isomorphic"]], "digraph_is_subgraph_isomorphic() (in module rustworkx)": [[386, "rustworkx.digraph_is_subgraph_isomorphic"]], "digraph_k_shortest_path_lengths() (in module rustworkx)": [[387, "rustworkx.digraph_k_shortest_path_lengths"]], "digraph_katz_centrality() (in module rustworkx)": [[388, "rustworkx.digraph_katz_centrality"]], "digraph_longest_simple_path() (in module rustworkx)": [[389, "rustworkx.digraph_longest_simple_path"]], "digraph_maximum_bisimulation() (in module rustworkx)": [[390, "rustworkx.digraph_maximum_bisimulation"]], "digraph_node_link_json() (in module rustworkx)": [[391, "rustworkx.digraph_node_link_json"]], "digraph_num_shortest_paths_unweighted() (in module rustworkx)": [[392, "rustworkx.digraph_num_shortest_paths_unweighted"]], "digraph_random_layout() (in module rustworkx)": [[393, "rustworkx.digraph_random_layout"]], "digraph_shell_layout() (in module rustworkx)": [[394, "rustworkx.digraph_shell_layout"]], "digraph_spiral_layout() (in module rustworkx)": [[395, "rustworkx.digraph_spiral_layout"]], "digraph_spring_layout() (in module rustworkx)": [[396, "rustworkx.digraph_spring_layout"]], "digraph_tensor_product() (in module rustworkx)": [[397, "rustworkx.digraph_tensor_product"]], "digraph_transitivity() (in module rustworkx)": [[398, "rustworkx.digraph_transitivity"]], "digraph_union() (in module rustworkx)": [[399, "rustworkx.digraph_union"]], "digraph_unweighted_average_shortest_path_length() (in module rustworkx)": [[400, "rustworkx.digraph_unweighted_average_shortest_path_length"]], "digraph_vf2_mapping() (in module rustworkx)": [[401, "rustworkx.digraph_vf2_mapping"]], "dijkstra_search() (in module rustworkx)": [[402, "rustworkx.dijkstra_search"]], "dijkstra_shortest_path_lengths() (in module rustworkx)": [[403, "rustworkx.dijkstra_shortest_path_lengths"]], "dijkstra_shortest_paths() (in module rustworkx)": [[404, "rustworkx.dijkstra_shortest_paths"]], "directed_barabasi_albert_graph() (in module rustworkx)": [[405, "rustworkx.directed_barabasi_albert_graph"]], "directed_gnm_random_graph() (in module rustworkx)": [[406, "rustworkx.directed_gnm_random_graph"]], "directed_gnp_random_graph() (in module rustworkx)": [[407, "rustworkx.directed_gnp_random_graph"]], "directed_random_bipartite_graph() (in module rustworkx)": [[408, "rustworkx.directed_random_bipartite_graph"]], "directed_sbm_random_graph() (in module rustworkx)": [[409, "rustworkx.directed_sbm_random_graph"]], "distance_matrix() (in module rustworkx)": [[410, "rustworkx.distance_matrix"]], "edge_betweenness_centrality() (in module rustworkx)": [[411, "rustworkx.edge_betweenness_centrality"]], "eigenvector_centrality() (in module rustworkx)": [[412, "rustworkx.eigenvector_centrality"]], "find_negative_cycle() (in module rustworkx)": [[413, "rustworkx.find_negative_cycle"]], "floyd_warshall() (in module rustworkx)": [[414, "rustworkx.floyd_warshall"]], "floyd_warshall_numpy() (in module rustworkx)": [[415, "rustworkx.floyd_warshall_numpy"]], "floyd_warshall_successor_and_distance() (in module rustworkx)": [[416, "rustworkx.floyd_warshall_successor_and_distance"]], "from_node_link_json_file() (in module rustworkx)": [[417, "rustworkx.from_node_link_json_file"]], "barbell_graph() (in module rustworkx.generators)": [[418, "rustworkx.generators.barbell_graph"]], "binomial_tree_graph() (in module rustworkx.generators)": [[419, "rustworkx.generators.binomial_tree_graph"]], "complete_graph() (in module rustworkx.generators)": [[420, "rustworkx.generators.complete_graph"]], "cycle_graph() (in module rustworkx.generators)": [[421, "rustworkx.generators.cycle_graph"]], "directed_binomial_tree_graph() (in module rustworkx.generators)": [[422, "rustworkx.generators.directed_binomial_tree_graph"]], "directed_complete_graph() (in module rustworkx.generators)": [[423, "rustworkx.generators.directed_complete_graph"]], "directed_cycle_graph() (in module rustworkx.generators)": [[424, "rustworkx.generators.directed_cycle_graph"]], "directed_empty_graph() (in module rustworkx.generators)": [[425, "rustworkx.generators.directed_empty_graph"]], "directed_grid_graph() (in module rustworkx.generators)": [[426, "rustworkx.generators.directed_grid_graph"]], "directed_heavy_hex_graph() (in module rustworkx.generators)": [[427, "rustworkx.generators.directed_heavy_hex_graph"]], "directed_heavy_square_graph() (in module rustworkx.generators)": [[428, "rustworkx.generators.directed_heavy_square_graph"]], "directed_hexagonal_lattice_graph() (in module rustworkx.generators)": [[429, "rustworkx.generators.directed_hexagonal_lattice_graph"]], "directed_mesh_graph() (in module rustworkx.generators)": [[430, "rustworkx.generators.directed_mesh_graph"]], "directed_path_graph() (in module rustworkx.generators)": [[431, "rustworkx.generators.directed_path_graph"]], "directed_star_graph() (in module rustworkx.generators)": [[432, "rustworkx.generators.directed_star_graph"]], "dorogovtsev_goltsev_mendes_graph() (in module rustworkx.generators)": [[433, "rustworkx.generators.dorogovtsev_goltsev_mendes_graph"]], "empty_graph() (in module rustworkx.generators)": [[434, "rustworkx.generators.empty_graph"]], "full_rary_tree() (in module rustworkx.generators)": [[435, "rustworkx.generators.full_rary_tree"]], "generalized_petersen_graph() (in module rustworkx.generators)": [[436, "rustworkx.generators.generalized_petersen_graph"]], "grid_graph() (in module rustworkx.generators)": [[437, "rustworkx.generators.grid_graph"]], "heavy_hex_graph() (in module rustworkx.generators)": [[438, "rustworkx.generators.heavy_hex_graph"]], "heavy_square_graph() (in module rustworkx.generators)": [[439, "rustworkx.generators.heavy_square_graph"]], "hexagonal_lattice_graph() (in module rustworkx.generators)": [[440, "rustworkx.generators.hexagonal_lattice_graph"]], "lollipop_graph() (in module rustworkx.generators)": [[441, "rustworkx.generators.lollipop_graph"]], "mesh_graph() (in module rustworkx.generators)": [[442, "rustworkx.generators.mesh_graph"]], "path_graph() (in module rustworkx.generators)": [[443, "rustworkx.generators.path_graph"]], "star_graph() (in module rustworkx.generators)": [[444, "rustworkx.generators.star_graph"]], "graph_adjacency_matrix() (in module rustworkx)": [[445, "rustworkx.graph_adjacency_matrix"]], "graph_all_pairs_all_simple_paths() (in module rustworkx)": [[446, "rustworkx.graph_all_pairs_all_simple_paths"]], "graph_all_pairs_bellman_ford_path_lengths() (in module rustworkx)": [[447, "rustworkx.graph_all_pairs_bellman_ford_path_lengths"]], "graph_all_pairs_bellman_ford_shortest_paths() (in module rustworkx)": [[448, "rustworkx.graph_all_pairs_bellman_ford_shortest_paths"]], "graph_all_pairs_dijkstra_path_lengths() (in module rustworkx)": [[449, "rustworkx.graph_all_pairs_dijkstra_path_lengths"]], "graph_all_pairs_dijkstra_shortest_paths() (in module rustworkx)": [[450, "rustworkx.graph_all_pairs_dijkstra_shortest_paths"]], "graph_all_shortest_paths() (in module rustworkx)": [[451, "rustworkx.graph_all_shortest_paths"]], "graph_all_simple_paths() (in module rustworkx)": [[452, "rustworkx.graph_all_simple_paths"]], "graph_astar_shortest_path() (in module rustworkx)": [[453, "rustworkx.graph_astar_shortest_path"]], "graph_bellman_ford_shortest_path_lengths() (in module rustworkx)": [[454, "rustworkx.graph_bellman_ford_shortest_path_lengths"]], "graph_betweenness_centrality() (in module rustworkx)": [[455, "rustworkx.graph_betweenness_centrality"]], "graph_bfs_search() (in module rustworkx)": [[456, "rustworkx.graph_bfs_search"]], "graph_bipartite_edge_color() (in module rustworkx)": [[457, "rustworkx.graph_bipartite_edge_color"]], "graph_bipartite_layout() (in module rustworkx)": [[458, "rustworkx.graph_bipartite_layout"]], "graph_cartesian_product() (in module rustworkx)": [[459, "rustworkx.graph_cartesian_product"]], "graph_circular_layout() (in module rustworkx)": [[460, "rustworkx.graph_circular_layout"]], "graph_closeness_centrality() (in module rustworkx)": [[461, "rustworkx.graph_closeness_centrality"]], "graph_complement() (in module rustworkx)": [[462, "rustworkx.graph_complement"]], "graph_core_number() (in module rustworkx)": [[463, "rustworkx.graph_core_number"]], "graph_dfs_edges() (in module rustworkx)": [[464, "rustworkx.graph_dfs_edges"]], "graph_dfs_search() (in module rustworkx)": [[465, "rustworkx.graph_dfs_search"]], "graph_dijkstra_search() (in module rustworkx)": [[466, "rustworkx.graph_dijkstra_search"]], "graph_dijkstra_shortest_path_lengths() (in module rustworkx)": [[467, "rustworkx.graph_dijkstra_shortest_path_lengths"]], "graph_dijkstra_shortest_paths() (in module rustworkx)": [[468, "rustworkx.graph_dijkstra_shortest_paths"]], "graph_distance_matrix() (in module rustworkx)": [[469, "rustworkx.graph_distance_matrix"]], "graph_edge_betweenness_centrality() (in module rustworkx)": [[470, "rustworkx.graph_edge_betweenness_centrality"]], "graph_eigenvector_centrality() (in module rustworkx)": [[471, "rustworkx.graph_eigenvector_centrality"]], "graph_floyd_warshall() (in module rustworkx)": [[472, "rustworkx.graph_floyd_warshall"]], "graph_floyd_warshall_numpy() (in module rustworkx)": [[473, "rustworkx.graph_floyd_warshall_numpy"]], "graph_floyd_warshall_successor_and_distance() (in module rustworkx)": [[474, "rustworkx.graph_floyd_warshall_successor_and_distance"]], "graph_greedy_color() (in module rustworkx)": [[475, "rustworkx.graph_greedy_color"]], "graph_greedy_edge_color() (in module rustworkx)": [[476, "rustworkx.graph_greedy_edge_color"]], "graph_is_isomorphic() (in module rustworkx)": [[477, "rustworkx.graph_is_isomorphic"]], "graph_is_subgraph_isomorphic() (in module rustworkx)": [[478, "rustworkx.graph_is_subgraph_isomorphic"]], "graph_k_shortest_path_lengths() (in module rustworkx)": [[479, "rustworkx.graph_k_shortest_path_lengths"]], "graph_katz_centrality() (in module rustworkx)": [[480, "rustworkx.graph_katz_centrality"]], "graph_line_graph() (in module rustworkx)": [[481, "rustworkx.graph_line_graph"]], "graph_longest_simple_path() (in module rustworkx)": [[482, "rustworkx.graph_longest_simple_path"]], "graph_misra_gries_edge_color() (in module rustworkx)": [[483, "rustworkx.graph_misra_gries_edge_color"]], "graph_node_link_json() (in module rustworkx)": [[484, "rustworkx.graph_node_link_json"]], "graph_num_shortest_paths_unweighted() (in module rustworkx)": [[485, "rustworkx.graph_num_shortest_paths_unweighted"]], "graph_random_layout() (in module rustworkx)": [[486, "rustworkx.graph_random_layout"]], "graph_shell_layout() (in module rustworkx)": [[487, "rustworkx.graph_shell_layout"]], "graph_spiral_layout() (in module rustworkx)": [[488, "rustworkx.graph_spiral_layout"]], "graph_spring_layout() (in module rustworkx)": [[489, "rustworkx.graph_spring_layout"]], "graph_tensor_product() (in module rustworkx)": [[490, "rustworkx.graph_tensor_product"]], "graph_token_swapper() (in module rustworkx)": [[491, "rustworkx.graph_token_swapper"]], "graph_transitivity() (in module rustworkx)": [[492, "rustworkx.graph_transitivity"]], "graph_union() (in module rustworkx)": [[493, "rustworkx.graph_union"]], "graph_unweighted_average_shortest_path_length() (in module rustworkx)": [[494, "rustworkx.graph_unweighted_average_shortest_path_length"]], "graph_vf2_mapping() (in module rustworkx)": [[495, "rustworkx.graph_vf2_mapping"]], "has_path() (in module rustworkx)": [[496, "rustworkx.has_path"]], "hits() (in module rustworkx)": [[497, "rustworkx.hits"]], "hyperbolic_random_graph() (in module rustworkx)": [[498, "rustworkx.hyperbolic_random_graph"]], "is_bipartite() (in module rustworkx)": [[499, "rustworkx.is_bipartite"]], "is_connected() (in module rustworkx)": [[500, "rustworkx.is_connected"]], "is_directed_acyclic_graph() (in module rustworkx)": [[501, "rustworkx.is_directed_acyclic_graph"]], "is_isomorphic() (in module rustworkx)": [[502, "rustworkx.is_isomorphic"]], "is_isomorphic_node_match() (in module rustworkx)": [[503, "rustworkx.is_isomorphic_node_match"]], "is_matching() (in module rustworkx)": [[504, "rustworkx.is_matching"]], "is_maximal_matching() (in module rustworkx)": [[505, "rustworkx.is_maximal_matching"]], "is_planar() (in module rustworkx)": [[506, "rustworkx.is_planar"]], "is_subgraph_isomorphic() (in module rustworkx)": [[507, "rustworkx.is_subgraph_isomorphic"]], "is_weakly_connected() (in module rustworkx)": [[508, "rustworkx.is_weakly_connected"]], "isolates() (in module rustworkx)": [[509, "rustworkx.isolates"]], "k_shortest_path_lengths() (in module rustworkx)": [[510, "rustworkx.k_shortest_path_lengths"]], "katz_centrality() (in module rustworkx)": [[511, "rustworkx.katz_centrality"]], "layers() (in module rustworkx)": [[512, "rustworkx.layers"]], "lexicographical_topological_sort() (in module rustworkx)": [[513, "rustworkx.lexicographical_topological_sort"]], "longest_simple_path() (in module rustworkx)": [[514, "rustworkx.longest_simple_path"]], "max_weight_matching() (in module rustworkx)": [[515, "rustworkx.max_weight_matching"]], "metric_closure() (in module rustworkx)": [[516, "rustworkx.metric_closure"]], "minimum_spanning_edges() (in module rustworkx)": [[517, "rustworkx.minimum_spanning_edges"]], "minimum_spanning_tree() (in module rustworkx)": [[518, "rustworkx.minimum_spanning_tree"]], "negative_edge_cycle() (in module rustworkx)": [[519, "rustworkx.negative_edge_cycle"]], "networkx_converter() (in module rustworkx)": [[520, "rustworkx.networkx_converter"]], "node_connected_component() (in module rustworkx)": [[521, "rustworkx.node_connected_component"]], "node_link_json() (in module rustworkx)": [[522, "rustworkx.node_link_json"]], "num_shortest_paths_unweighted() (in module rustworkx)": [[523, "rustworkx.num_shortest_paths_unweighted"]], "number_connected_components() (in module rustworkx)": [[524, "rustworkx.number_connected_components"]], "number_weakly_connected_components() (in module rustworkx)": [[525, "rustworkx.number_weakly_connected_components"]], "pagerank() (in module rustworkx)": [[526, "rustworkx.pagerank"]], "parse_node_link_json() (in module rustworkx)": [[527, "rustworkx.parse_node_link_json"]], "random_geometric_graph() (in module rustworkx)": [[528, "rustworkx.random_geometric_graph"]], "random_layout() (in module rustworkx)": [[529, "rustworkx.random_layout"]], "read_graphml() (in module rustworkx)": [[530, "rustworkx.read_graphml"]], "shell_layout() (in module rustworkx)": [[531, "rustworkx.shell_layout"]], "simple_cycles() (in module rustworkx)": [[532, "rustworkx.simple_cycles"]], "spiral_layout() (in module rustworkx)": [[533, "rustworkx.spiral_layout"]], "spring_layout() (in module rustworkx)": [[534, "rustworkx.spring_layout"]], "steiner_tree() (in module rustworkx)": [[535, "rustworkx.steiner_tree"]], "stoer_wagner_min_cut() (in module rustworkx)": [[536, "rustworkx.stoer_wagner_min_cut"]], "strongly_connected_components() (in module rustworkx)": [[537, "rustworkx.strongly_connected_components"]], "topological_generations() (in module rustworkx)": [[538, "rustworkx.topological_generations"]], "topological_sort() (in module rustworkx)": [[539, "rustworkx.topological_sort"]], "transitive_reduction() (in module rustworkx)": [[540, "rustworkx.transitive_reduction"]], "transitivity() (in module rustworkx)": [[541, "rustworkx.transitivity"]], "two_color() (in module rustworkx)": [[542, "rustworkx.two_color"]], "undirected_gnm_random_graph() (in module rustworkx)": [[543, "rustworkx.undirected_gnm_random_graph"]], "undirected_gnp_random_graph() (in module rustworkx)": [[544, "rustworkx.undirected_gnp_random_graph"]], "undirected_random_bipartite_graph() (in module rustworkx)": [[545, "rustworkx.undirected_random_bipartite_graph"]], "undirected_sbm_random_graph() (in module rustworkx)": [[546, "rustworkx.undirected_sbm_random_graph"]], "union() (in module rustworkx)": [[547, "rustworkx.union"]], "unweighted_average_shortest_path_length() (in module rustworkx)": [[548, "rustworkx.unweighted_average_shortest_path_length"]], "vf2_mapping() (in module rustworkx)": [[549, "rustworkx.vf2_mapping"]], "bfsvisitor (class in rustworkx.visit)": [[550, "rustworkx.visit.BFSVisitor"]], "black_target_edge() (bfsvisitor method)": [[551, "rustworkx.visit.BFSVisitor.black_target_edge"]], "discover_vertex() (bfsvisitor method)": [[552, "rustworkx.visit.BFSVisitor.discover_vertex"]], "finish_vertex() (bfsvisitor method)": [[553, "rustworkx.visit.BFSVisitor.finish_vertex"]], "gray_target_edge() (bfsvisitor method)": [[554, "rustworkx.visit.BFSVisitor.gray_target_edge"]], "non_tree_edge() (bfsvisitor method)": [[555, "rustworkx.visit.BFSVisitor.non_tree_edge"]], "tree_edge() (bfsvisitor method)": [[556, "rustworkx.visit.BFSVisitor.tree_edge"]], "dfsvisitor (class in rustworkx.visit)": [[557, "rustworkx.visit.DFSVisitor"]], "back_edge() (dfsvisitor method)": [[558, "rustworkx.visit.DFSVisitor.back_edge"]], "discover_vertex() (dfsvisitor method)": [[559, "rustworkx.visit.DFSVisitor.discover_vertex"]], "finish_vertex() (dfsvisitor method)": [[560, "rustworkx.visit.DFSVisitor.finish_vertex"]], "forward_or_cross_edge() (dfsvisitor method)": [[561, "rustworkx.visit.DFSVisitor.forward_or_cross_edge"]], "tree_edge() (dfsvisitor method)": [[562, "rustworkx.visit.DFSVisitor.tree_edge"]], "dijkstravisitor (class in rustworkx.visit)": [[563, "rustworkx.visit.DijkstraVisitor"]], "discover_vertex() (dijkstravisitor method)": [[564, "rustworkx.visit.DijkstraVisitor.discover_vertex"]], "edge_not_relaxed() (dijkstravisitor method)": [[565, "rustworkx.visit.DijkstraVisitor.edge_not_relaxed"]], "edge_relaxed() (dijkstravisitor method)": [[566, "rustworkx.visit.DijkstraVisitor.edge_relaxed"]], "examine_edge() (dijkstravisitor method)": [[567, "rustworkx.visit.DijkstraVisitor.examine_edge"]], "finish_vertex() (dijkstravisitor method)": [[568, "rustworkx.visit.DijkstraVisitor.finish_vertex"]], "prunesearch": [[569, "rustworkx.visit.PruneSearch"]], "stopsearch": [[570, "rustworkx.visit.StopSearch"]], "graphviz_draw() (in module rustworkx.visualization)": [[571, "rustworkx.visualization.graphviz_draw"]], "mpl_draw() (in module rustworkx.visualization)": [[572, "rustworkx.visualization.mpl_draw"]], "weakly_connected_components() (in module rustworkx)": [[573, "rustworkx.weakly_connected_components"]]}})